#!/bin/sh

BIN_PREFIX=$(knoconfig execprefix)/bin
CONFIG_ROOT=$(knoconfig config)
RUN_ROOT=$(knoconfig rundir)
LOG_ROOT=$(knoconfig logdir)

# Have this use knoconfig u8run at some point
DEFAULT_U8RUN=${BIN_PREFIX}/u8run
if [ -z "${DEFAULT_U8RUN}" ] || [ ! -x "${DEFAULT_U8RUN}" ]; then
    DEFAULT_U8RUN=$(which u8run 2> /dev/null);
fi;
U8RUN=${U8RUN:-${DEFAULT_U8RUN}}

U8RUN_ARGS="${DEFAULT_U8RUN_ARGS}"

export CONFDIR RUNDIR LOGDIR BIN_PREFIX
export COMMAND ACTIVITY JOBID SRVNAME

show_usage( ) {
    echo "Usage: knoctl command activity [name] args...";
    echo "Usage: knoctl command [name] args...";
    echo "Usage: knoctl fixdirs";
    echo "  activity=servlet|daemon";
}
usage_err( ) {
    if [ $# -gt 0 ]; then echo $*; fi;
    show_usage;
    exit;
}

find_activity ( ) {
    local name=$1
    if [ ! -z "${ACTIVITY}" ]; then
	echo ${ACTIVITY};
    elif [ -f "${CONFIG_ROOT}/servlets/${name}" ] ||
	     [ -f "${CONFIG_ROOT}/servlets/${name}.cfg" ] ||
	     [ -f "${CONFIG_ROOT}/servlets/${name}.sock" ]; then
	echo servlet;
    elif [ -f "${CONFIG_ROOT}/daemons/${name}" ] ||
	     [ -f "${CONFIG_ROOT}/daemons/${name}.cfg" ] ||
	     [ -f "${CONFIG_ROOT}/daemons/${name}.sock" ]; then
	echo daemon;
    elif [ -f "@run_dir@/servlets/${name}.pid" ]; then
	echo servlet;
    elif [ -f "@run_dir@/daemons/${name}.pid" ]; then
	echo daemon;
    elif [ -f "@log_dir@/servlets/${name}.log" ]; then
	echo servlet;
    elif [ -f "@log_dir@/daemons/${name}.log" ]; then
	echo daemon;
    fi;
}

msg ( ) {
    echo $(date +%T\(%a%d%b%Y\));
}
errmsg ( ) {
    echo $(date +%T\(%a%d%b%Y\)) >2;
}

get_abspath ( ) {
    arg=$1
    if [ -z "$1" ]; then 
	pwd;
    else case $1 in
	     /*)
		 echo $1;
		 ;;
	     *)
		 echo $(pwd)/$1;
		 ;;
	 esac;
    fi;
}

find_ctl_file ( ) {
    local srvname=$1;
    if [ -f ${srvname} ]; then
	echo ${srvname};
    elif [ -f ${CONFDIR}/${srvname} ]; then
	echo ${CONFDIR}/${srvname};
    elif [ -f ${CONFDIR}/${srvname}.cfg ]; then
	echo ${CONFDIR}/${srvname}.cfg;
    elif [ -f ${CONFDIR}/${srvname}.sock ]; then
	echo ${CONFDIR}/${srvname}.sock;
    fi;
}
get_run_file ( ) {
    local srvname=$1
    local suffix=$2
    if [ -f ${RUNDIR}/${srvname}.${suffix} ]; then
	echo ${RUNDIR}/${srvname}.${suffix};
    else
	echo;
    fi;
}
get_run_data ( ) {
    local run_file=$(get_run_file $*)
    if [ -z "${run_file}" ]; then
	echo;
    else cat ${run_file};
    fi;
}

# Checks to see if a PID is live
checkpid ( ) {
    local arg=$1;
    if [ -z "${arg}" ]; then
#	echo "noarg" >&2
	return 1;
    elif [ -f /proc/${arg} ]; then
#	echo "procfile" >&2
	return 0;
    elif ps -p ${arg} 2>&1 > /dev/null; then
#	echo "ps" >&2
	return 0;
    else
#	echo "checkpid_else" >&2
	return 1;
    fi;
}

# Gets a pid file and checks that the PID is live
# If it isn't, it remove the PID file
# Returns the contents of the valid PID file
get_pid_file ( ) {
    local srvname=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${srvname}.${suffix};
    echo "Checking ${pid_file}" >&2
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    echo ${pid_file};
	else
	    rm ${pid_file};
	    echo -n;
	fi;
    fi;
}    
get_pid ( ) {
    local srvname=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${srvname}.${suffix};
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    echo ${pid};
	else
	    rm -f ${pid_file};
	    echo -n;
	fi;
    fi;
}
kill_pid ( ) {
    local pid=$1
    local secs=${2:-8}
    local wait=1
    local elapsed=0
    while checkpid ${pid}; do
    	${SUDO} kill ${pid};
     	sleep ${wait}
     	elapsed=$(expr ${elapsed} \+ ${wait})
     	wait=$(expr ${wait} \* 2)
	echo "wait=${wait} elapsed=${elapsed}" >&2

     done;
     if checkpid ${pid}; then
     	echo "Failed to normally terminate ${ACTIVITY} ${pid}, forcing termination";
     	${SUDO} kill -9 ${pid};
     fi;
}

activity_status ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then errmsg "No configured ${ACTIVITY} named ${srvname}"; fi;
    srvname=$(basename ${ctl_file} .cfg)
    local ppid=$(get_pid ${srvname} ppid)
    local pid=$(get_pid ${srvname} pid)
    if [ ! -z "${ppid}" ] && [ ! -z "${pid}" ]; then echo "active";
    elif [ ! -z "${pid}" ]; then echo "orphan";
    elif [ ! -z "${ppid}" ]; then echo "childless";
    else echo "inactive";
    fi;
}    

start_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    srvname=$(basename ${ctl_file} .cfg)
    echo "Starting ${srvname} using ${ctl_file}";
    if [ -z "${ctl_file}" ]; then errmsg "No configured ${ACTIVITY} named ${srvname}"; fi;
    local status=$(activity_status ${srvname})
    echo "starting ${ACTIVITY} ${srvname} status=${status}";
    if [ ${status} = "active" ]; then
	local ppid=$(get_pid ${srvname} pid)
	local pid=$(get_pid ${srvname} pid)
	echo "${ACTIVITY} ${srvname} already running with PPID=${pid}, pid=${PID}";
    elif [ ${status} = "inactive" ]; then
	echo ${U8RUN} +service @${srvname} ${U8RUN_ARGS} \
	     RUNDIR=${RUNDIR} LOGFILE=${LOGDIR}/${srvname}.log \
	     ${LAUNCHER} ${srvname} RUNDIR=${RUNDIR} CONFIG=${ctl_file};
	${U8RUN} +service @${srvname} ${U8RUN_ARGS} \
	     RUNDIR=${RUNDIR} LOGFILE=${LOGDIR}/${srvname}.log \
	     ${LAUNCHER} ${srvname} RUNDIR=${RUNDIR} CONFIG=${ctl_file};
    else echo "${ACTIVITY} ${srvname} in ${status} status; try restart?";
    fi;
}

restart_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then errmsg "No ${ACTIVITY} named ${srvname}"; fi;
    srvname=$(basename ${ctl_file} .cfg)
    local ppid_file=$(get_pid_file ${srvname} ppid)
    local pid_file=$(get_pid_file ${srvname} pid)
    local ppid;
    local pid;
    if [ ! -z ${ppid_file} ]; then ppid=$(cat ${ppid_file}); fi;
    if [ ! -z ${pid_file} ]; then pid=$(cat ${pid_file}); fi;
    echo "srvname=${srvname} pid=${pid} ppid=${ppid} pid_file=${pid_file} ppid_file=${ppid_file}" >&2
    if [ ! -z "${pid}" ] && [ ! -z "${ppid}" ]; then
	kill_pid ${pid};
	# wait_for_pid_file ${pid_file} ${pid};
    fi;
}

stop_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then
	echo "No known control file for ${ACTIVITY} ${srvname}";
	local kill_pid_file=$(get_pid_file ${srvname} pid)
	if [ -z "${kill_pid_file}" ]; then
	    echo "No PID file for ${ACTIVITY} ${srvname}";
	else
	    local kill_pid=$(cat ${kill_pid_file});
	    kill_pid ${kill_pid};
	fi;
    else
	srvname=$(basename ${ctl_file} .cfg)
	local kill_ppid_file=$(get_pid_file ${srvname} ppid)
	local kill_pid=$(get_pid ${srvname} pid)
	if [ -z "${kill_ppid_file}" ]; then
	    echo "No PPID file for ${ACTIVITY} ${srvname}";
	else
	    local kill_ppid=$(cat ${kill_ppid_file});
	    kill_pid ${kill_ppid};
	fi;
	local cur_pid=$(get_pid ${srvname} pid)
	if [ "${cur_pid}" = "${kill_pid}" ]; then
	    if checkpid ${kill_pid}; then
		echo "Terminating orphan process (#${kill_pid}) for ${ACTIVITY} ${srvname}";
		kill_pid ${kill_pid};
		cur_pid=$(get_pid ${srvname} pid)
	    fi;
	fi;
    fi;
}

show_activity ( ) {
    local srvname=$1;
    local pid=$(get_run_data ${srvname} .pid);
    local ppid=$(get_run_data ${srvname} .ppid);
    local cmd=$(get_run_data ${srvname} .cmd);
    local status=$(get_run_data ${srvname} .status);
    local condition=$(activity_status ${srvname})
    echo "===========================================================================================";
    echo "${ACTIVITY} ${srvname} ${condition} ppid=${pid:-none} pid=${pid:-none} cmd=${cmd:-unknown}";
    if [ ! -z "${status}" ]; then echo "${ACTIVITY} ${srvname} ${status}"; fi;
}

handle_command_arg ( ) {
    arg=$1;
    case ${arg} in 
	servlet|servlets|knocgi|web)
	    echo "servlet";
	    ;;
	daemons|daemon|server|servers|knoserver|knoservers)
	    echo "daemon";
	;;
	help|usage|fixdirs|config|pid|ppid|cmd|command|status|show|start|stop|restart|log|link|disable|enable)
	    echo "command";
	    ;;
    esac;
}

if  [ $# = 0 ]; then
    show_usage;
    exit;
fi;

export COMMAND;
export ACTIVITY;

while [ $# -gt 0 ]; do
    arg=$1
    argtype=$(handle_command_arg ${arg})
    #echo "arg=$arg type=$argtype COMMAND=${COMMAND} ACTIVITY=${ACTIVITY}";
    if [ "${argtype}" = "servlet" ] || [ "${argtype}" = "daemon" ]; then
	if [ -z "${ACTIVITY}" ]; then
	    ACTIVITY=${argtype}; shift;
	else
	    usage_err "Double activity specification";
	    break;
	fi;
    elif [ "${argtype}" = "command" ]; then
	if [ -z "${COMMAND}" ]; then
	    COMMAND=${arg}; shift;
	else
	    break;
	fi;
    else break;
    fi;
done;

case ${COMMAND} in
    help|usage)
	show_usage;
	exit;
	;;
    fixdirs)
	kno_fixdirs;
	exit;
	;;
esac

if [ "${ACTIVITY}" = "servlet" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=${CONFIG_ROOT}/servlets; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=${RUN_ROOT}/servlets; fi;
    if [ -z "${LOGDIR}" ]; then LOGDIR=${LOG_ROOT}/servlets; fi;
    if [ -z "${LAUNCHER}" ]; then LAUNCHER=${BIN_PREFIX}/knocgi; fi;
elif [ "${ACTIVITY}" = "daemon" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=${CONFIG_ROOT}/daemons; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=${RUN_ROOT}/daemons; fi;
    if [ -z "${LOGDIR}" ]; then LOGDIR=${LOG_ROOT}/daemons; fi;
    if [ -z "${LAUNCHER}" ]; then LAUNCHER=${BIN_PREFIX}/knoserver; fi;
fi;

U8RUN_ARGS="${U8RUN_ARGS} RUNDIR=${RUNDIR}"

# Here is where we will handle commands which don't need a taskname

# Here we handle the commands which need a taskname

taskname=$1; shift
activity=$(find_activity ${taskname});
if [ -z "${activity}" ]; then
    usage_err "Unknown activity ${taskname}";
elif [ -z "${ACTIVITY}" ]; then
    ACTIVITY=${activity};
elif [ ${activity} != ${ACTIVITY} ]; then
    usage_err "Activity ${taskname} is a ${activity} not a ${ACTIVITY}";
else
    SRVNAME=${taskname};
fi;

# Only when not debugging
if [ ! -z "${DEBUG_KNOCTL}" ]; then
    echo ACTIVITY=${ACTIVITY}
    echo COMMAND=${COMMAND}
    echo CONFDIR=${CONFDIR}
    echo RUNDIR=${RUNDIR}
    echo LOGDIR=${LOGDIR}
    echo LAUNCHER=${LAUNCHER}
    echo SRVNAME=${SRVNAME}
fi;

case ${COMMAND} in 
    config)
	ctl_file=$(find_ctl_file ${SRVNAME});
	echo "${ctl_file}";
	;;
    pid|ppid|cmd)
	_result=$(get_run_data ${SRVNAME} ${COMMAND});
	if [ -z "${_result}" ]; then
	    echo "No ${COMMAND} for $1";
	    exit 1;
	else
	    echo ${_result};
	fi;
	;;
    status|show)
	show_activity ${SRVNAME};
	;;
    start)
	ctl_file=$(find_ctl_file ${SRVNAME})
	echo "ctl=${ctl_file}"
	if [ -z "$ctl_file" ]; then
	    errmsg "Couldn't find control file for ${srvname}";
	else
	    echo "start_activity ${SRVNAME}";
	    start_activity ${SRVNAME};
	fi;
	;;
    stop)
	stop_activity ${SRVNAME};
	;;
    restart)
	restart_activity ${SRVNAME};
	;;
    disable)
	touch ${CONFDIR}/${SRVNAME}.disabled;
	stop_activity ${SRVNAME};
	;;
    enable)
	rm -f ${CONFDIR}/${SRVNAME}.disabled;
	start_activity ${SRVNAME};
	;;
esac

# case $1 in
#     link)
# 	if [ -z "$1" ]; then
# 	    usage_err "Missing argument to link";
# 	elif [ -f "$1" ]; then
# 	    srvname=$(basename $1 .cfg);
# 	    abspath=$(get_abspath $1);
# 	    ln -sf ${abspath} ${CONFDIR}/${srvname};
# 	    if [ "$2" != "enabled" ]; then
# 		touch ${CONFDIR}/${srvname}.disabled;
# 		msg "Initially disabled; knoctl enable ${ACTIVITY} ${srvname} to enable";
# 	    fi;
# 	else usage_err "The file $1 does not exist";
# 	fi;
# 	;;
# esca

# Local variables:
# mode: shell-script
# End:
