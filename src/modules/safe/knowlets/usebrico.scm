(in-module 'knowlets/usebrico)

(use-module '{texttools knowlets brico brico/lookup brico/dterms})

(define serial 0)

(define (get-unique-id base knowlet)
  (let ((dterms (knowlet-dterms knowlet)))
    (do ((i 1 (1+ i)))
	((fail? (get dterms (stringout base "(" i ")")))
	 (stringout base "(" i ")")))))

(define (kno/bricoref bf knowlet)
  (try (find-frames (knowlet-index knowlet) 'oid bf)
       (let* ((f (frame-create #f))
	      (language (knowlet-language knowlet))
	      (dterm (get-dterm bf language))
	      (kf (kno/dterm
		   (try dterm (get-unique-id (get-norm bf language)))
		   knowlet)))
	 (when (fail? dterm)
	   (warning "Can't get DTERM for " bf))
	 (add! kf 'oid bf)
	 (add! (knowlet-index knowlet) (cons 'oid bf) kf)
	 kf)))

(define (kno/bricocopy map (bf #f) (kf #f) (languages #f))
  (if (not (or bf kf))
      (do-choices (bf (getkeys map))
	(kno/bricocopy map bf (get map kf) languages))
      (let* ((knowlet (knowlet (get kf 'knowlet)))
	     (language (knowlet-language knowlet))
	     (languages (if languages
			    (if (eq? languages #t)
				(choice (car (get bf '{%norms %glosses %hooks}))
					(get language-map (get bf '%words)))
				languages)
			    (choice @?en (get language-map language)))))
	(if (and (test bf 'gloss) (eq? language 'en) (not (test kf 'gloss)))
	    (store! kf 'gloss (get bf 'gloss))
	    (store! kf 'gloss (get-single-gloss bf)))
	(do-choices (lang languages)
	  (add! kf (get lang 'key) (get bf lang))
	  (if (eq? lang language)
	      (add! kf 'norms (get-norm bf lang))
	      (add! kf 'norms (cons (get lang 'key) (get-norm bf lang))))
	  (if (eq? lang language)
	      (add! kf 'glosses (get bf (get gloss-map lang)))
	      (add! kf 'glosses
		    (cons (get lang 'key) (get bf (get gloss-map lang)))))
	  (if (eq? lang language)
	      (add! kf 'hooks (get bf (get index-map lang)))
	      (add! kf 'glosses
		    (cons (get lang 'key)
			  (get bf (get index-map lang))))))
	(unless (test bf 'sensecat '{noun.tops verb.tops})
	  (add! kf 'genls (get map  (get bf {@?always @?commonly})))
	  (add! kf 'commonly (get map (get bf @?commonly)))
	  (add! kf 'sometimes (get map (get bf @?sometimes))))
	(add! kf 'never (get map (get bf @?never)))
	(add! kf 'rarely (get map (get bf @?rarely)))
	(add! kf 'somenot (get map (get bf @?somenot)))
	(when (test bf 'country)
	  (add! kf (kno/dterm "country" knowlet)
		(get map (get bf 'country))))
	(when (test bf 'region)
	  (add! kf (kno/dterm "region" knowlet)
		(get map (get bf 'region))))
	(add! kf (kno/dterm "ingredient" knowlet)
	      (get map (get bf @?ingredients)))
	(add! kf (kno/dterm "member" knowlet)
	      (get map (get bf @?members)))
	kf)))

