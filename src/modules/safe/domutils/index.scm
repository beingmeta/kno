;;; -*- Mode: Scheme; -*-

(in-module 'domutils/index)

(use-module '{reflection fdweb xhtml texttools domutils varconfig})

(module-export! '{dom/index! dom/textanalyze})

(define default-dom-slots '{id class name})

(define default-indexrules (make-hashtable))
(define (indexrule-config var (val))
  (if (bound? val)
      (if (pair? val)
	  (add! default-indexrules (car val) (cdr val)))
      default-indexrules))
(config-def! 'DOM:INDEXRULES indexrule-config)

(define default-rootfn #f)
(varconfig! dom:rootfn default-rootfn)

(define default-refrules {})
(varconfig! dom:refrules default-refrules #f choice)

(define default-analyzers {})
(varconfig! dom:analyzer default-analyzers #f choice)

(defambda (dom/index! index xml (settings #[])
		      (indexslots) (cacheslots)
		      (indexrules) (useids)
		      (analyzers))
  (default! indexslots (try (get settings 'indexslots) default-dom-slots))
  (default! cacheslots (get settings 'cacheslots))
  (default! useids (try (get settings 'useids) #t))
  (default! indexrules (try (get settings 'indexrules) default-indexrules))
  (default! analyzers (try (get settings 'analyzers) default-analyzers))
  (if (pair? xml)
      (dolist (elt xml)
	(dom/index! index elt settings
		    indexslots cacheslots
		    indexrules useids analyzers))
      (when  (table? xml)
	(let ((content (get xml '%content))
	      (indexval (if useids (get xml 'id) xml))
	      (eltinfo (dom/lookup indexrules xml)))
	  (when (test settings 'idmap)
	    (add! (get settings 'idmap) (get xml 'id) xml))
	  (when (exists? indexval)
	    (do-choices (slotid (difference
				 (choice indexslots (pick eltinfo symbol?))
				 (tryif useids 'id)))
	      (add! index (cons slotid (get xml slotid)) indexval))
	    (do-choices (analyzer (choice analyzers (pick eltinfo procedure?)))
	      (do-choices (slot.val (analyzer xml settings))
		(when (overlaps? (car slot.val) cacheslots)
		  (add! xml (car slot.val) (cdr slot.val)))
		(add! index (cons (car slot.val) (cdr slot.val))
		      indexval))))
	  (when (exists? content)
	    (dolist (elt content)
	      (dom/index! index elt settings
			  indexslots cacheslots
			  indexrules useids analyzers)))))))

(define (dom/textanalyze xml settings)
  (let* ((text (dom/textify xml))
	 (rootfn (try (get settings 'rootfn) default-rootfn))
	 (refrules (try (get settings 'refrules) default-refrules))
	 (phrasemap (get settings 'phrasemap))
	 (allcaps (uppercase? text))
	 (refs (tryif (not allcaps) (gather refrules text)))
	 (wordv (words->vector text))
	 (rootv (and (and rootfn (map rootfn wordv))))
	 (refwords (elts (words->vector refs)))
	 (words (difference (elts wordv) refwords))
	 (roots (difference (elts rootv) refwords)))
    (when (exists? refs) (store! xml 'refs refs))
    (store! xml 'words wordv)
    (store! xml 'roots rootv)
    (choice (cons 'refs refs)
	    (cons 'words words)
	    (cons 'roots roots)
	    (tryif (exists? phrasemap)
		   (for-choices (phrase (get phrasemap words))
		     (tryif (search phrase wordv)
			    (cons 'words (seq->phrase phrase)))))
	    (tryif (exists? phrasemap)
		   (for-choices (phrase (get phrasemap roots))
		     (tryif (search phrase rootv)
			    (cons 'words (seq->phrase phrase))))))))

(add! default-indexrules *block-text-tags* dom/textanalyze)
