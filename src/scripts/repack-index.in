#!@exec_prefix@/fdexec
;;; -*- Mode: Scheme -*-

(config! 'cachelevel 2)
(use-module 'tighten)

(define (fudgeit base fudge)
  (cond ((< base 1000) 1000000)
	((inexact? fudge)
	 (inexact->exact (truncate (* fudge base))))
	((> fudge (* 2 base)) fudge)
	(else (* 2 base))))

(define (get-keyblock sizes start chunksize)
  (if (>= start (length sizes)) 0
      (do ((i (1+ start) (1+ i))
	   (n (cdr (elt sizes start)) (+ n (cdr (elt sizes i))))
	   (lim (length sizes)))
	  ((or (>= i lim) (> n chunksize))
	   i))))

(define (repack-report nkeys nvals total from to)
  (message (inexact->string (/ (* 100.0 nkeys) total) 2) "%:  "
	   "Copied " nkeys " keys, " nvals " values"))

(define (repack-index from to (fudge 3.0))
  (let* ((in (open-index from))
	 (sizes (rsorted (index-sizes in) cdr))
	 (newsize (fudgeit (length sizes) fudge))
	 (cyclesize (quotient (length sizes) 100))
	 (out (begin (make-file-index to newsize) (open-index to)))
	 (chunksize (config 'chunksize (* 8 65536)))
	 (keycount 0) (valcount 0))
    (message "Repacking " (length sizes) " keys from " (write from)
	     " into " newsize " slots in " (write to))
    (do ((start 0 end)
	 (end (get-keyblock sizes 0 chunksize)
	      (get-keyblock sizes end chunksize))
	 (lastreport 0))
	((or (zero? end) (>= end (length sizes))))
      (let ((subvec (subseq sizes start end)))
	(message "Prefetching " (- end start) " keys")
	(prefetch-keys! in (car (elts subvec)))
	(message "Prefetched " (- end start) " keys")
	(doseq (key+size subvec)
	  (when (> (- keycount lastreport) cyclesize)
	    (repack-report keycount valcount (length sizes) from to)
	    (set! lastreport keycount))
	  (store! out (car key+size) (get in (car key+size)))
	  (set! keycount (1+ keycount))
	  (set! valcount (+ valcount (cdr key+size))))
	(repack-report keycount valcount (length sizes) from to)
	(swapout in)
	(commit out)
	(swapout out)))))

(define (main in (out #f))
  (tighten! (choice get-keyblock repack))
  (if out (repack-index in out (config 'fudge 3.0))
      (let ((tmpfile (string-append in ".part")))
	(repack-index in tmpfile)
	(rename in (string-append in ".old"))
	(rename tmpfile in))))
