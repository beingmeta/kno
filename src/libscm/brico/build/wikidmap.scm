;;; -*- Mode: Scheme; Character-encoding: utf-8; -*-
;;; Copyright (C) 2005-2019 beingmeta, inc.  All rights reserved.

(in-module 'brico/build/wikidmap)

(use-module '{logger webtools varconfig libarchive texttools stringfmts})
(use-module '{knodb knodb/branches knodb/typeindex knodb/flexindex})
(use-module '{brico brico/indexing brico/wikid brico/build/wikidata})

(module-export! '{wikidata->brico wikid/brico
		  wikid/import!
		  wikidata/import/enginefn})

(define %loglevel %notice%)

(define-init wikidmap (make-hashtable))
(define-init wikid.update {})
(varconfig! wikid:update wikid.update #f choice)

(define (wikidata->brico wikid (wikidstring) (cached))
  (default! wikidstring (if (string? wikid) wikid (get wikid 'id)))
  (unless (oid? wikid) (set! wikid (or (wikidata/ref wikidstring) wikid)))
  (when (fail? wikid) (irritant wikidstring |InvalidWikidRef|))
  (set! cached (try (get wikidmap wikid)  (get wikidmap wikidstring)))
  (if (exists? cached)
      (if cached cached {})
      (let ((found (try (?? 'wikidref wikidstring) #f)))
	(store! wikidmap wikidstring found)
	(store! wikidmap wikid found)
	(or found (fail)))))
(define wikid/brico wikidata->brico)

(define (copy-lexslots wikid brico index)
  ;; We should use 'index' here
  (let* ((wds #[]) (norms #[]) (glosses #[])
	 (labels (get wikid 'labels))
	 (aliases (get wikid 'aliases))
	 (descriptions (get wikid 'descriptions)))
    (do-choices (alias aliases)
      (do-choices (langid (getkeys alias))
	(let ((v (get alias langid)))
	  (add! wds langid v))))
    (do-choices (label labels)
      (do-choices (langid (getkeys label))
	(add! {wds norms} langid (get label langid))))
    (do-choices (description descriptions)
      (do-choices (langid (getkeys description))
	(add! glosses langid (get description langid))))
    (let ((cur-wds (get brico '%norms))
	  (cur-norms (get brico '%words))
	  (cur-glosses (get brico '%glosses))
	  (langs (getkeys {wds norms glosses})))
      (store! brico '%words wds)
      (store! brico '%norms norms)
      (store! brico '%glosses glosses)
      (add! brico 'words (get wds 'en))
      (add! brico 'norms (get norms 'en))
      (do-choices (lang langs)
	(let ((addwds (difference (get wds lang) (get cur-wds lang))))
	  (when (exists? addwds)
	    (index-string wikid.index brico 
			  (get language-map (downcase lang))
	      {addwds (downcase addwds)})))
	(let ((addnorms (difference (get norms lang) (get cur-norms lang))))
	  (when (exists? addnorms)
	    (index-string wikid.index brico 
	      (get norm-map (downcase lang))
	      addnorms)))))))

(define import-slotids
  [@1/2c27e{isa} {@1/1f("instance of" wikid "P31")
		  @1/44e51("occupation" wikid "P106")
		  @1/44ee9("position held" wikid "P39")
		  @1/45056("noble title" wikid "P97")
		  @1/45a48("animal breed" wikid "P4743")}
   @1/2c272{genls} @1/20("subclass of" wikid "P279")
   @1/2c274{part-of} {@1/4500a("location" wikid "P276")
		      @1/450f1("watershed" wikid "P4614")
		      @1/44dbf("country" wikid "P17")
		      @1/44dd7("located in time zone" wikid "P421")
		      @1/44dc1("continent" wikid "P30")
		      @1/45262("series" wikid "P179")}
   @1/2c275{parts} {@1/44e17("has part" wikid "P527")
		    @1/44dc8("contains administrative territorial entity" wikid "P150")   }
   @1/2c276{made-of}   {@1/44fbd("material used" wikid "P186")}
   @1/2c279{member-of} {@1/23("member of" wikid "P463") 	;;=#6.1
			@1/44ebc("member of political party" wikid "P102")
			@1/4525c("parliamentary group" wikid "P4100")
			@1/4526d("astronaut mission" wikid "P450")}])

(define (wikid/import! wikid (opts #f) (template) (wikidstring))
  (default! template (getopt opts 'template #f))
  (default! wikidstring (if (string? wikid) wikid (get wikid 'id)))
  (unless (oid? wikid) (set! wikid (or (wikidata/ref wikidstring) wikid)))
  (when (fail? wikid) (irritant wikidstring |InvalidWikidRef|))
  (let* ((cached (or (try (get wikidmap wikid) (get wikidmap wikidstring)
			  (wikidata->brico wikidstring))
		     #f))
	 (label (try (pick-one (get wikid 'norms)) (pick-one (get wikid 'words))))
	 (frame (or cached
		    (frame-create wikid.pool
		      '%id `(WIKID ,label ,wikidstring)
		      'type {'wikid (getopt opts 'type '{noun thing})} 'source 'wikidata
		      'wikidref wikidstring
		      'imported (config 'sessionid)
		      'imported_at (timestamp)
		      'wikidata_rev (get wikid 'lastrevid))))
	 (unmapped {}))
    (when (or (not cached) (in-pool? frame wikid.pool)
	      (exists in-pool? frame wikid.update))
      (copy-lexslots wikid frame wikid.index)
      (store! wikidmap {wikid wikidstring} frame)
      (unless cached (index-core wikid.index frame))
      (do-choices (prop (pickoids (getkeys wikid)))
	(let* ((wikidvals (get wikid prop))
	       (refvals (pickoids wikidvals))
	       (litvals (difference wikidvals refvals))
	       (newvals (choice (get refvals 'id)
				(wikidata->brico refvals)
				litvals))
	       (cur (get frame prop))
	       (toadd (difference newvals cur))
	       (todrop (difference cur newvals)))
	  (add! frame prop toadd)
	  (drop! frame prop todrop)
	  (set+! unmapped (get (reject refvals wikidmap) 'id))
	  (when (and (exists? toadd) (exists? refvals))
	    (index-frame wikid.index frame prop (pickoids toadd)))))
      (do-choices (import (getkeys import-slotids))
	(let* ((cur (get frame import))
	       (new (wikidata->brico (get wikid (get import-slotids import))))
	       (add (difference new cur))
	       (drop (difference cur new)))
	  (add! frame import add)
	  (drop! frame import drop)
	  (index-frame wikid.index frame import add)))
      (when template
	(do-choices (key (getkeys template))
	  (let* ((cur (get frame key))
		 (new (get template key))
		 (add (difference new cur))
		 (drop (difference cur new)))
	    (add! frame key add)
	    (drop! frame key drop)
	    (index-frame wikid.index frame key add))))
      (index-frame wikid.index frame 'pending unmapped)
      (let ((adjust (find-frames wikid.index 'pending wikid)))
	(lock-oids! adjust)
	(prefetch-oids! adjust)
	(do-choices (adj adjust)
	  (do-choices (slot (getkeys adj))
	    (when (test adj slot wikid)
	      (drop! adj slot wikid)
	      (add! adj slot frame)
	      (index-frame wikid.index adj slot frame))))))
    (cond (cached)
	  ((%test frame 'sensecat))
	  ((%test frame @?genls)
	   (add! frame 'type (get (%get frame @?genls) 'type))
	   (add! frame 'sensecat (get (%get frame @?genls) 'sensecat))
	   (index-frame wikid.index frame '{sensecat type})))
    (index-lattice wikidata.index frame)
    (index-relations wikidata.index frame)
    (index-analytics wikidata.index frame)
    frame))

(defambda (wikidata/import/enginefn batch)
  (prefetch-oids! batch)
  (prefetch-keys! wikid.index (cons 'wikidref (get batch 'id)))
  (wikid/import! batch))


