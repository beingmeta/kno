;;; -*- Mode: Scheme; Character-encoding: utf-8; -*-

(in-module 'condense)

(use-module '{reflection varconfig logger})

(define %loglevel %debug%)

(module-export! '{condense vaporize condense/expand})

(define (asis? object)
  (or (not (cons? object)) (symbol? object)
      (uuid? object) (timestamp? object) (regex? object)
      (number? object) 
      (and (string? object) (< (length object) 200))
      (and (packet? object) (<= (length object) 64))))

(define (condense? object)
  (or (ambiguous? object) (table? object) (vector? object) 
      (and (compound? object) (not (compound-opaque? object)))
      (and (string? object) (> (length object) 200))
      (and (packet? object) (> (length object) 64))))

(defambda (count-refs object refcounts)
  (unless (asis? object)
    (let ((ptr (hashptr object)))
      (hashtable-increment! refcounts ptr)
      (cond ((ambiguous? object)
	     (do-choices (elt object) (when (cons? elt) (count-refs elt refcounts))))
	    ((vector? object)
	     (doseq (elt object) (when (cons? elt) (count-refs elt refcounts))))
	    ((pair? object)
	     (let ((scan object))
	       (while (pair? scan)
		 (count-refs (car scan) refcounts)
		 (set! scan (cdr scan)))
	       (when (cons? scan) (count-refs scan refcounts))))
	    ((and (compound? object) (not (compound-opaque? object)))
	     (dotimes (i (compound-length object))
	       (when (cons? (compound-ref object i))
		 (count-refs (compound-ref object i) refcounts))))
	    ((table? object)
	     (do-choices (key (getkeys object))
	       (count-refs key refcounts)
	       (count-refs (get object key) refcounts)))
	    ((exception? object)
	     (count-refs (exception-context object) refcounts)
	     (when (exception-irritant? object)
	       (count-refs (exception-irritant object) refcounts))
	     (count-refs (exception-stack object) refcounts))
	    (else)))))

(defambda (add-condensed object root uuids condensed (ptr) (uuid (getuuid)))
  (default! ptr (hashptr object))
  (store! uuids ptr uuid)
  (store! root uuid condensed)
  uuid)

(defambda (dump-elt object container refcounts root uuids (cptr) (optr) (uuid))
  (default! optr (hashptr object))
  (default! cptr (hashptr container))
  (default! uuid (and (> (get refcounts optr) (get refcounts cptr))
		      (getuuid)))
  (cond ((test uuids optr) (get uuids optr))
	((not uuid) (dumper object refcounts root uuids))
	(else
	 (store! uuids optr uuid)
	 (dumper object refcounts root uuids))))

(defambda (dumper object refcounts root uuids)
  (cond ((fail? object) object)
	((asis? object) object)
	((ambiguous? object)
	 (let* ((ptr (hashptr object))
		(refcount (get refcounts ptr)))
	   (if (and (= refcount 1) (< (choice-size object) 17))
	       (for-choices (elt object) (dumper elt refcounts root uuids))
	       (add-condensed
		object root uuids
		(for-choices (elt object)
		  (if (asis? elt) elt (dump-elt elt object refcounts root uuids ptr)))
		ptr))))
	((pool? object)
	 (make-compound 'pool
			(pool-source object) 
			(try (poolctl object 'metadata 'opts) #f)))
	((index? object)
	 (make-compound 'index
			(index-source object) 
			(try (indexctl object 'metadata 'opts) #f)))
	((and (or (special-form? object) (procedure? object))
	      (procedure-name object))
	 (make-compound '|procedure|
			(procedure-name object)
			(or (procedure-module object) 
			    (procedure-filename object))))
	((test uuids (hashptr object)) (get uuids (hashptr object)))
	((and (or (vector? object) (pair? object) 
		  (string? object) (packet? object) 
		  (secret? object))
	      (test uuids object))
	 (get uuids object))
	((or (vector? object) (proper-list? object))
	 (let* ((ptr (hashptr object))
		(refcount (get refcounts ptr)))
	   (if (and (= refcount 1) (< (length object) 17))
	       (forseq (elt object) (dumper elt refcounts root uuids))
	       (add-condensed
		object root uuids
		(forseq (elt object)
		  (if (asis? elt) elt (dump-elt elt object refcounts root uuids ptr)))
		ptr))))
	((or (and (compound? object) (compound-opaque? object))
	     (macro? object) (special-form? object) (procedure? object)
	     (dtype-stream? object) (port? object)
	     (%lexref? object) (dtserver? object)
	     (opcode? object) (thread? object) (synchronizer? object))
	 (debug%watch "Wrapping OPAQUE object " object)
	 (try (get uuids (hashptr object))
	      (add-condensed object root uuids
			     (make-compound '%opaque (stringout object)))))
	((and (compound? object) (sequence? object))
	 (try (get uuids (hashptr object))
	      (let* ((ptr (hashptr object))
		     (uuid (getuuid))
		     (components (->vector object)))
		(store! uuids ptr uuid)
		(add-condensed
		 object root uuids
		 (vector->compound
		  (forseq (elt components)
		    (if (asis? elt) elt
			(dump-elt elt object refcounts root uuids ptr)))
		  (compound-tag object))))))
	((compound? object)
	 (try (get uuids (hashptr object))
	      (let* ((ptr (hashptr object))
		     (len (compound-length object))
		     (components (make-vector len #f))
		     (uuid (getuuid)))
		(dotimes (i len)
		  (vector-set! components i (compound-ref object i)))
		(store! uuids ptr uuid)
		(add-condensed
		 object root uuids
		 (apply make-compound (compound-tag object)
			(forseq (elt (->list components))
			  (if (asis? elt) elt
			      (dump-elt elt object refcounts root uuids ptr))))))))
	((or (string? object) (packet? object) (secret? object))
	 (add-condensed object root uuids object))
	((hashtable? object)
	 (let ((uuid (getuuid))
	       (ptr (hashptr object))
	       (condensed (make-hashtable (table-size object))))
	   (store! uuids ptr uuid)
	   (store! root uuid condensed)
	   (do-choices (key (getkeys object))
	     (store! condensed
	       (if (asis? key) key (dump-elt key object refcounts root uuids))
	       (dump-elt (get object key) object refcounts root uuids)))
	   condensed))
	((hashset? object)
	 (let* ((uuid (getuuid))
		(ptr (hashptr object))
		(elts (hashset-elts object))
		(celts (for-choices (elt elts)
			 (dump-elt elt object refcounts root uuids)))
		(condensed (choice->hashset celts)))
	   (store! uuids ptr uuid)
	   (store! root uuid condensed)
	   condensed))
	((pair? object)
	 (cons (dumper (car object) refcounts root uuids)
	       (dumper (cdr object) refcounts root uuids)))
	((table? object)
	 (let ((condensed (frame-create #f)))
	   (do-choices (key (getkeys object))
	     (store! condensed
	       (if (asis? key) key (dump-elt key object refcounts root uuids))
	       (dump-elt (get object key) object refcounts root uuids)))
	   condensed))
	((exception? object)
	 (let* ((condition (exception-condition object))
		(caller (exception-caller object))
		(details (exception-details object))
		(threadno (exception-threadno object))
		(sessionid (exception-sessionid object))
		(moment (exception-moment object))
		(timebase (exception-timebase object))
		(context (dumper (exception-context object)
				 refcounts root uuids))
		(stack (dumper (exception-stack object)
			       refcounts root uuids)))
	   (add-condensed object root uuids
			  (if (exception-irritant? object)
			      (make-compound '|exception|
					     condition caller details threadno sessionid moment timebase
					     context stack
					     (dumper (exception-irritant object) refcounts root uuids))
			      (make-compound '|exception|
					     condition caller details threadno sessionid moment timebase
					      context stack)))))
	(else (try (get uuids (hashptr object))
		   (let ((stringform (stringout object))
			 (ptr (hashptr object)))
		     (debug%watch "Fall through to opaque " object)
		     (if (> (get refcounts ptr) 1)
			 (add-condensed object root uuids
					(make-compound '%opaque stringform))
			 (make-compound '%opaque stringform)))))))

(define (condense object (into (make-hashtable)))
  (let ((refcounts (make-hashtable))
	(uuids (make-hashtable))
	(rootid #f))
    (count-refs object refcounts)
    (store! into '%root #f)
    (set! rootid (dumper object refcounts into uuids))
    (store! into '%root (get into rootid))
    (drop! into rootid)
    into))

(define (vaporize roots)
  (try (get roots '%expanded)
       (let* ((root (get roots '%root))
	      (depths (make-hashtable)))
	 (gather-depths 0 root roots)
	 (doseq (ref (rsorted (difference (getkeys roots) '%root)
			      depths))
	   (unless (= (get depths ref) 0)
	     (store! roots ref (expander (get roots ref) roots #t))))
	 (let ((expanded (expander root roots)))
	   (store! roots '%expanded expanded)
	   expanded))))
(define (condense/expand roots) (vaporize roots))

(defambda (gather-depths depth object roots (depths (make-hashtable)))
  (cond ((ambiguous? object)
	 (do-choices (elt object) (gather-depths depth elt roots depths)))
	((and (uuid? object) (test roots object))
	 (hashtable-maximize! depths object depth)
	 (gather-depths (1+ depth) (get roots object) roots depths))
	((not (cons? object)))
	((or (vector? object) (and (compound? object) (sequence? object))) 
	 (doseq (elt object) (gather-depths depth elt roots depths)))
	((pair? object)
	 (while (pair? object)
	   (gather-depths depth (car object) depths roots)
	   (set! object (cdr object)))
	 (gather-depths depth object roots depths))
	((compound? object)
	 (dotimes (i (compound-length object))
	   (gather-depths depth (compound-ref object i) roots depths)))
	((table? object)
	 (do-choices (key (getkeys object))
	   (gather-depths depth key roots depths)
	   (gather-depths depth (get object key) roots depths)))
	(else)))

(defambda (expander object table)
  (cond ((ambiguous? object) (for-choices (elt object) (expander elt table)))
	((not (cons? object)) object)
	((and (uuid? object) (test table object))
	 (expander (get table object) table))
	((pair? object)
	 (let* ((head (list (expander (car object) table)))
		(scan (cdr object))
		(tail head)
		(new #f))
	   (while (pair? scan)
	     (set! new (list (expander (car scan) table)))
	     (set-cdr! tail new)
	     (set! tail new)
	     (set! scan (cdr scan)))
	   (set-cdr! tail scan)
	   head))
	((vector? object) (forseq (elt object) (expander elt table)))
	((compound? object '|procedure|)
	 (let* ((name (string->symbol (compound-ref object 0)))
		(source (compound-ref object 1))
		(module (and (symbol? source) (get-loaded-module source))))
	   (if (and module (test module name))
	       (get module name)
	       object)))
	((compound? object '|exception|)
	 (let* ((ex (vector->compound 
		     (forseq (elt (->vector object)) (expander elt table)) 
		     '|exception|))
		(condition (compound-ref ex 0))
		(caller (compound-ref ex 1))
		(details (compound-ref ex 2))
		(threadno (compound-ref ex 3))
		(sessionid (compound-ref ex 4))
		(moment (compound-ref ex 5))
		(timebase (compound-ref ex 6))
		(context (compound-ref ex 7))
		(stack (compound-ref ex 8)))
	   (make-exception condition caller details 
		threadno sessionid moment timebase
		stack context
		(if (> (compound-length ex) 9)
		    (compound-ref ex 9)
		    #default))))
	((and (compound? object) (sequence? object))
	 (vector->compound (forseq (elt object) (expander elt table))
			   (compound-tag object)))
	((and (compound? object) (compound-opaque? object))
	 (let* ((len (compound-length object))
		(components (make-vector len #f)))
	   (dotimes (i len)
	     (vector-set! components i
			  (expander (compound-ref object i) table)))
	   (apply make-opaque-compound (compound-tag object)
		  (->list components))))
	((compound? object)
	 (let* ((len (compound-length object))
		(components (make-vector len #f)))
	   (dotimes (i len)
	     (vector-set! components i
			  (expander (compound-ref object i) table)))
	   (apply make-compound (compound-tag object)
		  (->list components))))
	((hashtable? object)
	 (let ((expanded (make-hashtable)))
	   (do-choices (key (getkeys object))
	     (store! expanded (expander key table) 
		     (expander (get object key) table)))
	   expanded))
	((or (slotmap? object) (schemap? object))
	 (let ((expanded (frame-create #f)))
	   (do-choices (key (getkeys object))
	     (store! expanded (expander key table) 
		     (expander (get object key) table)))
	   expanded))
	((error? object)
	 (make-exception (exception-condition object)
			 (exception-caller object)
			 (expander (exception-details object) table)
			 (exception-threadno object)
			 (exception-sessionid object)
			 (exception-moment object)
			 (exception-timebase object)
			 (expander (exception-stack object) table)
			 (expander (exception-context object) table)
			 (if (exception-irritant? object)
			     (expander (exception-irritant object) table)
			     #default)))
	(else object)))
