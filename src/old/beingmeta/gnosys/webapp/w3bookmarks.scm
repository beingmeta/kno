(in-module 'gnosys/webapp/w3bookmarks)

(use-module 'texttools)
(use-module 'brico)
(use-module '{fdweb xhtml xhtml/clickit xhtml/brico})
(use-module '{gnosys gnosys/urldb gnosys/docdb
		     gnosys/webapp/userinfo
		     gnosys/webapp/metakeys})
(use-module '{gnosys/metakeys gnosys/bookmarks})

(module-export! '{getbookmark geturl tagstring})
(module-export! '{output-composite-bookmark
		  output-bookmark
		  output-url
		  output-passage})

;;; CGI access

(define (getbookmark)
  (let ((user (getuser))
	(bookmark (cgiget 'bookmark)))
    (if (and (exists? bookmark) (overlaps? user (get bookmark 'source)))
	bookmark
	(let ((bookmark (make-bookmark user (geturl))))
	  (unless (test bookmark 'status 'init)
	    (index-frame bookmarkindex bookmark
	      @?gn/concepts (get-tags* (get bookmark 'about) user))
	    (add! bookmark 'status 'init))
	  (cgiset! 'bookmark bookmark)
	  bookmark))))

(define (geturl)
  (prog1 
   (if (exists? (cgiget 'url))
       (let ((url (url2frame (cgiget 'url))))
	 (cond ((fail? (get url 'name)) url)
	       ((or (has-prefix (get url 'name) "index.")
		    (equal? (get url 'name) "index"))
		;; We assume that files named index are the
		;;  same as their parent.  This will probably come
		;;  back to bite us at some point, but it's a valuable
		;;  inference.
		(get url @?gn/parent))
	       (else url)))
       (begin (form (action "tag.fdcgi" class "tagit")
		(div (class "editing_url")
		  (div (class "instructions") "Enter a URL to tag")
		  (INPUT TYPE "text" SIZE 45 NAME "URL" VALUE ""
			 ID "url_input")))
	      (fail)))
   (commit urlpool) (commit urlindex)))

;;;; Displaying bookmarks

(define (tagstring bookmark)
  (let ((tags (choice (get bookmark 'tags)
		      (get-tags* (get bookmark 'about)
				 (get bookmark 'source)
				 (qc (get bookmark 'untags))))))
    (if (exists? tags)
	(stringout (do-choices (tag (choice (get tags @?genls*)
					    (get tags @?part-of*)
					    (get (get tags @?isa) @?genls*)))
		     (printout (oid2id tag) ";"))))))

(define (bookmark-tags bookmark)
  (choice (get bookmark 'tags)
	  (get-tags* (get bookmark 'about) (get bookmark 'source))))

(define (find-evidence concept language hitlist)
  (tryif (pair? hitlist)
	 (try (filter-choices (term (get (car hitlist) '{keywords @?gn/keywords}))
		(overlaps? (lookup-term term language) concept))
	      (filter-choices (term (get (car hitlist) @?gn/words))
		(overlaps? (lookup-term term language) concept))
	      (find-evidence concept language (cdr hitlist)))))

(define (output-explanation why language (hitlist ()))
  (when why
    (span ((class "explanation"))
      (do-choices (tag why)
	(metakey->html tag)
	(xmlout " ")))))

(define (output-bookmark bookmark (why #f))
  (let* ((url (get bookmark 'about))
	 (user (get bookmark 'source))
	 (doc (try (get bookmark 'doc) (get url 'doc)))
	 (language (get-language)))
    (div ((class "bookmark") (name "bookmark")
	  (tags (tagstring bookmark)))
      ;; (div (class "url") (get (get bookmark 'about) 'about))
      (anchor* (get (get bookmark 'about) 'url)
	       (class "plain" target "_new")
	       (if (test bookmark 'title)
		   (div ((class "title")
			 (title (get (get bookmark 'about) 'url)))
		     (get bookmark 'title)
		     (when why (output-explanation (qc why) language)))
		   (div (class "url")
		     (get (get bookmark 'about) 'url)
		     (when why (output-explanation (qc why) language)))))
      (when (exists? (get bookmark 'excerpt))
	(div (class "excerpt") (get bookmark 'excerpt)))
      (div ((class "bookmarkbar"))
	(xurlclick (get (get bookmark 'about) 'url) "original"
		   "visit the original source of this document")
	(when (exists? (get bookmark 'doc))
	  (xurlclick (scripturl "cached.fdcgi" 'doc (get bookmark 'doc))
		     "my copy" "visit your personal copy of this document"))
	(when (exists? (get bookmark 'doc))
	  (xurlclick (scripturl "links.fdcgi" 'doc (get bookmark 'doc))
		     "links" "view the links out of this document"))
	(when (exists? (get bookmark 'doc))
	  (xurlclick (scripturl "sparse.fdcgi" 'doc (get bookmark 'doc))
		     "sparse" "view a sparse, stripped, version of this document"))
; 	(when (exists? (get bookmark 'doc))
; 	  (xurlclick (scripturl "indexed.fdcgi" 'doc (get bookmark 'doc))
; 		     "indexed"
; 		     "visit an indexed version of this document"))
; 	(if (exists? (get bookmark 'doc))
; 	    (xurlclick (scripturl "similar.fdcgi" 'doc (get bookmark 'doc))
; 		       "similar" "find documents like this one")
; 	    (xurlclick (scripturl "similar.fdcgi" 'url (get bookmark 'about))
; 		       "similar" "find documents like this one"))
	(scriptclick "bookmark_showtags(event)" "tags"
		     "show/hide the tags for this bookmark")
	(xurlclick (scripturl "tag.fdcgi" 'bookmark bookmark) "edit"
		   "edit this bookmark")
	(span ((class "tagtime")
	       (title (stringout "bookmark=" (oid->string bookmark)
				 "; url=" (oid->string url))))
	  (try (get (get bookmark 'date) 'shortstring) ""))
	;; (span ((class "debuginfo")) (anchor bookmark (oid->string bookmark)))
	)
      (let* ((displayed {})
	     (inherited (get-tags* (get bookmark 'about) (get bookmark 'source)
				   (qc (get bookmark 'untags))))
	     (others (choice (get url @?gn/xconcepts) (get url @?gn/aconcepts)))
	     (parents (get* (get url @?gn/parent) @?gn/parent))
	     (others-inherited (choice (get parents @?gn/xconcepts)
				       (get parents @?gn/aconcepts)))
	     (language (get-language)))
	(div ((class "tags")
	      (style "display: none;")
	      (onmouseover "richtip_mouseover(event);")
	      (onmouseout "richtip_mouseout(event);"))
	  (do-choices (tag (get bookmark 'tags) i)
	    (when (> i 0) (xmlout " . "))
	    (metakey->html tag) (xmlout " "))
	  (set+! displayed (get bookmark 'tags))
	  (span (class "inherited")
	    (do-choices (tag (difference inherited
					 displayed
					 (get bookmark 'untags)))
	      (metakey->html tag)
	      (xmlout " ")))
	  (set+! displayed inherited)
	  (span (class "others")
	    (do-choices (tag (difference others displayed))
	      (metakey->html tag language #f #f #f "mkref")
	      (xmlout " ")))
	  (set+! displayed others)
	  (span (class "others_inherited")
	    (do-choices (tag (difference others-inherited displayed))
	      (metakey->html tag language #f #f #f "mkref")
	      (xmlout " "))))))))

(define (output-composite-bookmark url (user #f) (why #f))
  (let* ((bookmarks (find-frames bookmarkindex 'about url))
	 (bookmark (find-frames bookmarkindex 'about url 'source user))
	 (language (get-language))
	 (tags (choice (get url @?gn/xconcepts)
		       (bookmark-tags (qc bookmark bookmarks)))))
    (let ((doc (try (get bookmark 'doc) (get url 'doc))))
      (div ((class "bookmark") (name "bookmark")
	    (tags (stringout (do-choices (c (get tags @?genls*))
			       (printout (oid2id c) ";")))))
	;; (div (class "url") (get (get bookmark 'about) 'url))
	(anchor* (try (get (get bookmark 'about) 'url)
		      (pick-one (get (get bookmarks 'about) 'url)))
		 (class "plain" target "_new")
		 (cond ((test bookmark 'title)
			(div (class "url") (get (get bookmark 'about) 'url))
			(div ((class "title")
			      (title (get (get bookmark 'about) 'url)))
			  (get bookmark 'title)
			  (when why (output-explanation (qc why) language))))
		       ((test bookmarks 'title)
			(div (class "url") (get (get bookmark 'about) 'url))
			(div ((class "title")
			      (title (get (get bookmark 'about) 'url)))
			  (pick-one (get bookmarks 'title))
			  (when why (output-explanation (qc why) language))))
		       (else 
			(div ((class "title")
			      (title (get (get bookmark 'about) 'url)))
			  (get (get bookmark 'about) 'url)
			  (when why (output-explanation (qc why) language)))))) 
	(when (exists? (get bookmark 'excerpt))
	  (div (class "excerpt") (get bookmark 'excerpt)))
	(div ((class "bookmarkbar"))
	  (xurlclick (get url 'url) "original"
		     "visit the original source of this document")
	  (when (exists? doc)
	    (xurlclick (scripturl "cached.fdcgi" 'doc (get bookmark 'doc))
		       "my copy" "visit your personal copy of this document")
	    (xurlclick (scripturl "links.fdcgi" 'doc (get bookmark 'doc))
		       "links" "view the links out of this document")
	    (xurlclick (scripturl "sparse.fdcgi" 'doc (get bookmark 'doc))
		       "sparse" "view a sparse, stripped, version of this document")
; 	    (xurlclick (scripturl "indexed.fdcgi" 'doc (get bookmark 'doc))
; 		       "indexed"
; 		       "visit an indexed version of this document")
; 	    (xurlclick (scripturl "similar.fdcgi" 'doc (get bookmark 'about))
; 		       "similar" "find documents like this one"))
	  (scriptclick "bookmark_showtags(event)" "tags"
		       "show/hide the tags for this bookmark")
	  (if (exists? bookmark)
	      (xurlclick (scripturl "tag.fdcgi" 'bookmark bookmark) "edit"
			 "edit this bookmark")
	      (xurlclick (scripturl "tag.fdcgi" 'url url) "edit"
			 "edit this bookmark"))
	  (span ((class "tagtime")
		 (title (stringout "bookmark=" (oid->string bookmark)
				   "; url=" (oid->string url))))
	    (get (get bookmark 'date) 'shortstring))
	  ;; (span ((class "debuginfo")) (anchor bookmark (oid->string bookmark)))
	  ))
	(let* ((displayed {})
	       (inherited (get-tags* (get url @?gn/parent)
				     (get bookmark 'source)))
	       (others (choice (get url @?gn/aconcepts)
			       (get url @?gn/xconcepts)))
	       (parents (get* (get url @?gn/parent) @?gn/parent))
	       (others-inherited (choice (get parents @?gn/aconcepts)
					 (get parents @?gn/xconcepts)))
	       (language (get-language)))
	  (div ((class "tags")
		(onmouseover "richtip_mouseover(event);")
		(onmouseout "richtip_mouseout(event);")
		(style "display: none;"))
	    (do-choices (tag (get bookmark 'tags) i)
	      (when (> i 0) (xmlout " . "))
	      (metakey->html tag)
	      (xmlout " "))
	    (set+! displayed (get bookmark 'tags))
	    (span (class "inherited")
	      (do-choices (tag (difference inherited
					   displayed
					   (get bookmark 'untags)))
		(metakey->html tag)
		(xmlout " ")))
	    (set+! displayed inherited)
	    (span (class "others")
	      (do-choices (tag (difference others displayed))
		(metakey->html tag)
		(xmlout " ")
		(set+! displayed tag))
	      (span (class "inherited")
		(do-choices (tag (difference others-inherited displayed))
		  (metakey->html tag)
		  (xmlout " ")
		  (set+! displayed tag))))
	    (set+! displayed others)))))))

(define (get-explanation result q)
  (let ((candidates (choice (get result @?gn/concepts)
			    (get (find-frames temp-bookmarks 'about result) 'tags))))
    (filter-choices (tag candidates)
      (if (pair? tag)
	  (let ((tag (tag-concepts tag)))
	    (or (overlaps? tag q)
		(test tag @?genls* q)
		(test (get tag @?isa) @?genls* q)
		(test tag @?part-of* q)))
	  (or (overlaps? tag q)
	      (test tag @?genls* q)
	      (test (get tag @?isa) @?genls* q)
	      (test tag @?part-of* q))))))

(define (display-passage passage language query)
  (let ((text (strip-markup (get passage 'text)))
	(concepts (get passage @?gn/concepts))
	(segmented (getwords text #t)))
    ))

(define (output-score score)
  (cond ((> score 10)
	 (span ((class "hugescore") (title (stringout "score=" score)))
	   (dotimes (i score) (img src "scorecheck.png" alt "*"))))
	((> score 5)
	 (span ((class "bigscore") (title (stringout "score=" score)))
	   (dotimes (i score) (img src "scorecheck.png" alt "*"))))
	(else
	 (span ((class "score") (title (stringout "score=" score)))
	   (dotimes (i score) (img src "scorecheck.png" alt "*"))))))
(define (output-score score)
  (span ((class "score") (title (stringout "score=" score)))
    (dotimes (i score) (img src "scorecheck.png" alt "*"))))

(define (pathget path slotid)
  (if (null? path) (fail)
      (try (pick-one (difference (get (car path) slotid) ""))
	   (pathget (cdr path) slotid))))

(define (output-url url domain score keywordscore q passages)
  (let* ((user (getuser))
	 (language (get-language))
	 (ubookmarks (find-frames (choice bookmarkindex temp-bookmarks)
		       'about url 'source user))
	 (dbookmarks
	  (if (empty? domain)
	      (find-frames (choice bookmarkindex temp-bookmarks)
		'about url)
	      (find-frames (choice bookmarkindex temp-bookmarks)
		'about url 'source domain)))
	 (bookmarks (if (empty? domain)
			(choice
			 (find-frames bookmarkindex 'about url)
			 (find-frames temp-bookmarks 'about url))
			(find-frames (choice bookmarkindex temp-bookmarks)
			  'about url 'source domain)))
	 (bookmark (pick-one (try (pick dbookmarks oid?)
				  (pick ubookmarks oid?)
				  (pick bookmarks oid?)
				  ubookmarks
				  dbookmarks
				  bookmarks)))
	 (bookpath `(,dbookmarks ,ubookmarks ,bookmarks))
	 (source (get bookmark 'source))
	 (doc (try (get ubookmarks 'doc) (get url 'doc)))
	 (tags (choice (get url @?gn/xconcepts)
		       (bookmark-tags (qc bookmark bookmarks))))
	 (title (pathget bookpath 'title))
	 (excerpts (for-choices (bookmark dbookmarks)
		     (cons (get bookmark 'source) (get bookmark 'excerpt))))
	 (description (pathget bookpath 'description))
	 (why (get-explanation (qc url bookmarks) (qc q))))
    (div ((class "bookmark") (name "bookmark")
	  (tags (stringout (do-choices (c (get tags @?genls*))
			     (printout (oid2id c) ";")))))
      (if (or (eq? user source) (fail? source))
	  (do-choices (bookmark (reject bookmarks oid?))
	    (span ((class "provider"))
	      "[" (when (test bookmark 'user)
		    (xmlout (get bookmark 'user) "@"))
	      (get bookmark 'provider) "]"))
	  (span ((class "source"))
	    "from "
	    (if (test source 'displayname)
		(span ((class "displayname")) (get source 'displayname))
		(span ((class "email")) (get source 'email)))))
      (anchor* (get url 'url)
	       ((class "plain") (target "_new"))
	       (div ((class "title"))
		 (span ((class "scorediff")
			(title (if (and (exists? keywordscore) keywordscore)
				   (stringout "keyword score=" keywordscore)
				   "this item was not found by keyword search")))
		   (if (fail? keywordscore)
		       (img src "GoldStar.png" alt "*"
			    style "height: 18px; width: 18px;")
		       (if (and keywordscore (> score keywordscore))
			   (dotimes (i (quotient score keywordscore))
			     (img src "GoldStar.png" alt "*")))))
		 (output-score score)
		 (span ((title (stringout "score=" score ": " (get url 'url))))
		   (try title (get url 'url)))
		 (when why (output-explanation
			    (qc why) language
			    (append (choice->list ubookmarks)
				    (choice->list dbookmarks)
				    (choice->list bookmarks)
				    (list url))))))
      (div ((class "tabbar"))
	(span ((class "buttons"))
	  (xurlclick (get url 'url) "original"
		     "visit the original source of this document")
	  (when (exists? doc)
	    (xurlclick (scripturl "cached.fdcgi" 'doc (get bookmark 'doc))
		       "my copy" "visit your personal copy of this document")
	    (xurlclick (scripturl "links.fdcgi" 'doc (get bookmark 'doc))
		       "links" "view the links out of this document")
	    (xurlclick (scripturl "sparse.fdcgi" 'doc (get bookmark 'doc))
		       "sparse" "view a sparse, stripped, version of this document"))
	  (if (exists? bookmark)
	      (if (and (oid? bookmark) (test bookmark 'source user))
		  (xurlclick (scripturl "tag.fdcgi" 'bookmark bookmark) "edit"
			     "edit this bookmark")
		  (xurlclick (scripturl "tag.fdcgi"
					'url (get url 'url)
					'title (qc (get bookmark 'title))
					'description
					(qc (get bookmark 'description))
					'tags (qc (get bookmark 'tags))
					'typedwords
					(qc (get bookmark @?gn/keywords)))
			     "make copy" "copy this bookmark"))))
	(when (exists? description)
	  (tabbutton "Description" #f
		     (oid2id url "DESCRIPTION") #f (exists? description)))
	(tabbutton "Tags" #f (oid2id url "TAGS") #f (fail? description))
	(when (exists? excerpts)
	  (tabbutton "Excerpts" #f (oid2id url "EXCERPTS")))
	(when (exists? doc)
	  (tabbutton "Analysis" #f (oid2id url "ANALYSIS")))
	(tabbutton "Etc" #f (oid2id url "ETC") #f))
      (when (exists? description)
	(div ((class "tab_content") (id (oid2id url "DESCRIPTION"))
	      (style "display: block;"))
	  (div ((class "description")) description)))
      (when (exists? excerpts)
	(div ((class "tab_content") (id (oid2id url "EXCERPTS")))
	  (div ((class "excerpts"))
	    (cond ((fail? excerpts))
		  ((singleton? excerpts)
		   (div (class "excerpt")
		     (cdr excerpts)
		     (span ((class "source"))
		       "from " (if (test (car excerpts) 'displayname)
				   (span ((class "displayname"))
				     (get (car excerpts) 'displayname))
				   (span ((class "email"))
				     (get (car excerpts) 'email))))))
		  (else 
		   (let* ((ordered
			   (sorted excerpts (lambda (x) (length (cdr x)))))
			  (last (1- (length ordered))))
		     (span ((class "narrative")) "excerpts")
		     (xmlout " ")
		     (xmlblock SELECT
			 ((size 1) (onclick "display_excerpt(event);"))
		       (doseq (ex ordered i)
			 (xmlblock OPTION
			     ((value (oid2id url (stringout "excerpt" i)))
			      ("SELECTED" (= i last)))
			   (subseq (cdr ex) 0 (min (length (cdr ex)) 80)) "...")))
		     (doseq (ex ordered i)
		       (div ((class "excerpt")
			     (id (oid2id url (stringout "excerpt" i)))
			     (style (if (< i last) "display: none;")))
			 (cdr ex)
			 (span ((class "source"))
			   "from " (if (test (car ex) 'displayname)
				       (span ((class "displayname"))
					 (get (car ex) 'displayname))
				       (span ((class "email"))
					 (get (car ex) 'email))))))))))))
      (let* ((bm (try bookmark (pick-one bookmarks)))
	     (direct (get bm 'tags))
	     (inherited (difference (get-tags* (get url @?gn/parent)
					       (get bm 'source))
				    direct
				    (get bm 'untags)))
	     (others (difference (get-tags* (get url @?gn/parent) #f)
				 direct inherited))
	     (auto (difference (choice
				(get (get* url @?gn/parent) @?gn/concepts)
				(get (find-frames docindex @?doc/source url)
				     @?gn/concepts))
			       direct inherited))
	     (language (get-language))
	     (displayed {}))
	(div ((class "tab_content") (id (oid2id url "TAGS"))
	      (style (if (fail? description) "display: block;")))
	  (div ((class "tags")
		(onmouseover "richtip_mouseover(event);")
		(onmouseout "richtip_mouseout(event);")
		(title "click to add this tag to the current search")
		(onclick (if (cgitest 'insearch)
			     "hint_copy_click(event);"
			     "gotocloud_click(event);")))
	    ;; (xmlout "tags: " (get bookmark 'tags))
	    (do-choices (tag (get bookmark 'tags) i)
	      (when (> i 0) (xmlout " . "))
	      (metakey->html tag)
	      (xmlout " "))
	    (set+! displayed (get bookmark 'tags))
	    (when (exists? inherited)
	      (span ((class "narrative")) " (inherited) "))
	    (span (class "inherited")
	      (do-choices (tag inherited)
		(metakey->html tag)
		(xmlout " ")))
	    (set+! displayed inherited)
	    (when (exists? others)
	      (span ((class "narrative")) " (others) "))
	    (span ((class "others"))
	      (do-choices (tag others)
		(metakey->html tag)
		(xmlout " ")))
	    (set+! displayed others)
	    (unless (exists? displayed)
	      (span ((class "notags_message")) "No Tags")))))
      (div ((class "tab_content") (id (oid2id url "ETC"))
	    (style "display: none;"))
	(div ((class "geekstuff"))
	  "url=" url "; user=" user
	  (if (and (exists? bookmark) (oid? bookmark))
	      (xmlout "; bookmark=" bookmark))
	  (if (and (exists? doc) (oid? doc))
	      (xmlout "; doc=" doc)))
	(div ((class "geekstuff"))
	  "bookmarks=" bookmarks "; dbookmarks=" dbookmarks
	  "; ubookmarks=" ubookmarks "; bookmark=" bookmark)
	(let ((bm (try bookmark
		       (pick-one
			(try (find-frames bookmarkindex 'about url)
			     (find-frames temp-bookmarks 'about url))))))
	  (when (exists? bm)
	    (div ((class "geekstuff"))
	      (if (oid? bm)
		  (xmlout "bookmark=" bm "; source=" (get bm 'source))
		  (xmlout "imported bookmark: site="
			  "; user=" (get bm 'user)
			  "; source=" (get bm 'source)
			  "; keywords=" (get bm 'keywords))))
	    (div ((class "geekstuff"))
	      "keywords=" (do-choices (keyword (get bm @?gn/keywords) i)
			    (xmlout (if (> i 0) ";") keyword)))
	    (div ((class "geekstuff"))
	      "concepts=" (do-choices (concept (get bm @?gn/xconcepts) i)
			    (xmlout (if (> i 0) " ; ") (write concept))))
	    (div ((class "geekstuff"))
	      "tags=" (do-choices (tag (get bm 'tags) i)
			(xmlout (if (> i 0) " ") (write tag)))))))
      (div ((class "tab_content") (id (oid2id url "ANALYSIS"))
	    (style "display: none;"))
	(let* ((direct (get bookmark 'tags))
	       (inherited (difference (get-tags* (get url @?gn/parent)
						 (get bookmark 'source))
				      direct
				      (get bookmark 'untags)))
	       (others (difference (get-tags* (get url @?gn/parent) #f)
				   direct inherited))
	       (auto (difference (choice
				  (get (get* url @?gn/parent) @?gn/concepts)
				  (get (find-frames docindex @?doc/source url)
				       @?gn/concepts))
				 direct inherited))
	       (language (get-language))
	       (displayed {}))
	  (div ((class "tags")
		(title "click to add this tag to the current search")
		(onclick "bookmark_tag_click(event);"))
	    (do-choices (tag (get bookmark 'tags) i)
	      (when (> i 0) (xmlout " . "))
	      (metakey->html tag)
	      (xmlout " "))
	    (set+! displayed (get bookmark 'tags))
	    (when (exists? inherited)
	      (span ((class "inlinehead")) "inherited="))
	    (span (class "inherited")
	      (do-choices (tag inherited) (xmlout " ") (metakey->html tag)))
	    (when (exists? others)
	      (span ((class "inlinehead")) "others="))
	    (span ((class "others"))
	      (do-choices (tag others) (xmlout " ") (metakey->html tag)))
	    (when (exists? auto)
	      (span ((class "inlinehead")) "auto="))
	    (span ((class "auto"))
	      (do-choices (tag auto) (xmlout " ") (metakey->html tag))))))
      (when (and (exists? passages) (> (length passages) 0))
	(div ((class "passages"))
	  (doseq (passage passages)
	    (div ((class "passage"))
	      (anchor passage (img src "bm_diamond.png" border 0 alt "[+]"))
	      " "
	      (strip-markup (get passage 'text))
	      (let* ((ex (get-explanation passage (qc q)))
		     (explanation (get-basis ex @?genls)))
		(when (exists? explanation)
		  (span ((class "explanation"))
		    (do-choices (e explanation)
		      (metakey->html e))))))))))))






