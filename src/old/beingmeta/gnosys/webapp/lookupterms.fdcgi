;;; -*- Mode: Scheme; -*-

(use-module  (get-component "podpings.scm"))
(use-module '{podpings/base podpings/query})
(use-module '{facebook facebook/fbcall})
(use-module '{fdweb xhtml texttools logger logctl})
(use-module '{brico brico/lookup xhtml/brico brico/dterms})
(use-module '{gnosys gnosys/disambiguate})

(define version "$Id$")

(define (output-concept term concept (lang (get-language))
			(field #f) (value #f))
  (xmlout "{"
	  (write "term") ": " (write term) ", "
	  (write "oid") ": "
	  (write (stringout ":" (oid->string concept))) ", "
	  (let ((gloss (try (shortgloss concept lang) "")))
	    (xmlout
	      (write "gloss") ": "
	      (write (string-subst (stdspace gloss)
				   "\"" "'"))))
	  (let ((dterm (try (get-dterm concept lang) (get-norm concept lang))))
	    (when (exists? dterm)
	      (xmlout ", " (write "dterm") ": "
		      (if (singleton? dterm) (write dterm)
			  (write (pick-one (largest dterm length)))))))
	  (when (and field value)
	    (xmlout ", " (write field) ": " (write value)))
	  "}"))

(define (main (terms {}) (doreplace #f) (oddcaps #f))
  (cgiset! 'doctype #f)
  ;; (message "TERMS=" terms)
  (let* ((lang (get-language))
	 ;; (maps (ipeval (taglookup terms lang oddcaps)))
	 (maps (taglookup terms lang oddcaps)))
    ;; (message "MAPS=" maps)
    (xmlout "["
	    (do-choices (map maps i)
	      (if (> i 0) (xmlout ", "))
	      (cond ((string? map) (write map))
		    ((string? map))
		    ((oid? map)
		     (output-concept (get-norm map lang) map lang))
		    ((and (pair? map) (singleton? (cdr map))
			  (or doreplace (test (cdr map) lang (car map))))
		     (output-concept (car map) (cdr map) lang
				     "replace" (car map)
				     ))
		    ((pair? map)
		     (xmlout (write (car map)) ", ")
		     (do-choices (oid (cdr map) j)
		       (if (> j 0) (xmlout ", "))
		       (output-concept (car map) oid lang)))))
	    "]")
    ;; (message "JSON generated")
    ))

(define tagopts #[tryhard 1 sumthresh 0.03])
(define allopts #[])

(define (reverse-name string)
  (let ((words (words->vector string)))
    (choice
     (string-append (seq->phrase words 1)
		    (if (= (length (elt words -1)) 1)
			(choice " " ". ")
			" ")
		    (seq->phrase words 0 1))
     (tryif (= (length (elt words -1)) 1)
	    (string-append (seq->phrase words 1 -1) " "
			   (seq->phrase words 0 1))))))

(define (vary-caps string)
  (if (uppercase? string) string
      (choice string
	      (downcase string)
	      (capitalize string))))

(define (oddcap? term)
  (and (capitalized? term)
       (not (uppercase? term))
       (not (compound? term))))

(define (main (terms {}) (oddcaps) (all #f))
  (default! oddcaps (exists oddcap? terms))
  (cgiset! 'doctype #f)
  (let* ((lang (get-language))
	 ;; (maps (ipeval (taglookup terms lang oddcaps)))
	 (maps {}))
    (do-choices (term terms)
      (let ((m (try (brico/ref (if oddcaps (vary-caps term) term)
			       lang
			       (if all #[] tagopts))
		    (tryif (and (compound? term) (capitalized? term))
			   (brico/ref (reverse-name term) lang
				      tagopts)))))
	(when (exists? m)
	  (set+! maps (cons term (qc m))))))
    (xmlout "["
	    (do-choices (map maps i)
	      (if (> i 0) (xmlout ", "))
	      (if (singleton? (cdr map))
		  (output-concept (car map) (cdr map) lang
				  "replace" (car map))
		  (doseq (c (sorted (cdr map) getabsfreq) j)
		    (if (> j 0) (xmlout ", "))
		    (output-concept (car map) c lang))))
	    "]")
    ;; (message "JSON generated")
    ))










