(cond ((config 'getmeaningsconfig #f))
      ((file-exists? (get-component "custom.cfg"))
       (load-config (get-component "custom.cfg")))
      ((file-exists? (get-component "default.cfg"))
       (load-config (get-component "default.cfg"))))

(use-module '{texttools fdweb xhtml xhtml/brico xhtml/clickit})
(use-module '{morph brico brico/lookup brico/dterms brico/dtermcache})
(use-module '{gnosys gnosys/webapp gnosys/nlp gnosys/disambiguate})

(define (synonyms-string concept language)
  (stringout (do-choices (w (get concept language) i)
	       (printout w ";"))))

(define (main term language (context {}))
  (default! language (get-language))
  (cgiset! 'content-type "Content-Type: text/xml;")
  (cgiset! 'doctype #f)
  (lookup-term/prefetch term language)
  (let ((direct (lookup-term term language)))
    (if (singleton? (cdr direct))
	(xmlblock MEANINGS ((term term))
	  (let ((meaning (cdr direct)))
	    (xmlelt 'MEANING
		    'oid meaning 'norm (get-norm meaning language)
		    'gloss
		    (decode-entities (get-single-gloss meaning language))
		    'synonyms (synonyms-string meaning language)
		    'frequency (concept-frequency meaning)
		    'dterm (ifexists (cached-dterm meaning language))
		    'selected "yes")))
	(let* ((ambentries
		(choice (term->ambentry term language)
			(concept->ambentry (pickoids context) language)
			(concept->ambentry (pickstrings context) language)))
	       (entries (disambiguate ambentries)))
	  (xmlblock MEANINGS ((term term))
	    (do-choices (entry (pick entries ambentry-term term))
	      (let ((actual (ambentry-resolved entry))
		    (possible (ambentry-possible entry)))
		(do-choices (meaning possible)
		  (xmlelt 'MEANING
			  'oid meaning 'norm (get-norm meaning language)
			  'gloss
			  (decode-entities (get-single-gloss meaning language))
			  'synonyms (synonyms-string meaning language)
			  'frequency (concept-frequency meaning)
			  'dterm (ifexists (cached-dterm meaning language))
			  'selected "yes")))))))))


