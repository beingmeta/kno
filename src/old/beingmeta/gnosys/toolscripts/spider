#!/usr/bin/env fdexec
;; -*- Mode: fdscript; -*-

(use-module 'load-utils)
(use-module 'index-plus)
(use-module 'vpools)

(use-module 'gnosys/spider)
(use-module 'gnosys/indexer)
(use-module 'gnosys)

(auto-cache-file-pools)
(auto-cache-file-indices)

(use-pool++ 'brico)
;(use-pool++ 'xbrico)

(gset! %debug #t)
(set-notify! #t)

(define (get-nthreads)
  (cond ((not (bound? spawn)) 1)
	((not (bound? NTHREADS)) 1)
	((number? NTHREADS) NTHREADS)
	((string? NTHREADS)
	 (if (number? (read-from-string NTHREADS))
	     (read-from-string NTHREADS)
	     1))
	(else 1)))

(define (url-analyzer-proc n) (analyze-urls))

(define-if-needed SPIDIR (pwd))

(define (convert-fence-arg s)
  (if (member s '("domain" "site" "dir")) (read-from-string s) s))

(define (run-spiders n)
  (if (= n 1) (spider)
    (parallel (spider) (run-spiders (1- n)))))

(define (main (command #f) . args)
  (cond
    ((not command)
     (spider-start! SPIDIR)
     (run-spiders (get-nthreads))
     (spider-save))
    ((equal? command "queue")
     (spider-start! SPIDIR)
     (examine-url (car args) (convert-fence-arg (cadr args)))
     (spider-save))
    (else (lineout "Unknown command: " command))))

;(define (main (dir #f) (premium #f))
;  (let ((directory (or dir (pwd))))
;    (when (file-exists? (newpath directory "spider.cfg"))
;      (load-config (newpath directory "spider.cfg")))
;    (set-data-dir! (newpath directory ""))
;    (if (bound? LOGFILE) (set-notify! LOGFILE))
;    (report-process-limits)
;    (cache-pool (all-pools))
;    (cache-index (all-indices))
;    (let ((threads (get-nthreads)))
;      (if (= threads 1) (analyze-urls)
;	  (let ((thread-nums {}))
;	    (dotimes (i threads) (set+! thread-nums i))
;	    (mpcall url-analyzer-proc thread-nums))))
;    (framerd-stats)
;    ;; This should happen automatically on exit, and faster, since
;    ;; it won't try to free everything
;    (lineout "Memory=" (* 4096 (ru-data-size)))
;    (lineout "Freespace=" (pool-freespace content-pool))
;    (spider-exit)))



