;;; #(tag type data base cache)

;; Morphological analysis
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph)
(use-module 'fdtext)

(define (trace-morphology! (flag #t))
  (if flag (set! rule-applier traced-rule-applier)
      (set! rule-applier inner-rule-applier)))

(define (make-rule tag type data (base #f) (override #f))
  (let ((vec `#(,tag ,type ,data ,base #f ,override)))
    (make-record 'morphrule vec)))

(define defrule
  '(macro (expr)
     (let ((name (cadr expr)))
       `(begin (define ,name
		 (make-rule ',name ,@(cddr expr)))
	       (if (> (choice-size ,name) 1)
		   (lineout "Warning: Rule " ',name " blew up"))))))

(define (rule-tag rule) (vector-ref rule 0))
(define (rule-base rule) (vector-ref rule 3))
(define (rule-cache rule) (vector-ref rule 4))
(define (rule-overrides rule) (vector-ref rule 5))

(define (apply-suffix-rule string rule base)
  (let ((suffix (car rule)) (replacement (cdr rule)))
    (if  (has-suffix suffix string)
	(apply-rule base
		    (string-append
		     (subseq string 0 (- (length string) (length suffix)))
		     replacement))
	(fail))))

(define (add-tag input tag)
  (if (string? input) (list input tag)
      (if (pair? input)
	  (cons (car input) (cons tag (cdr input)))
	  input)))
(define (inner-rule-applier rule string)
  (let* ((rule-data (record-data rule)))
    (case (vector-ref rule-data 1)
      (suffix
       (let ((suffixes (vector-ref rule-data 2)))
	 (for-choices (suffix suffixes)
	   (if (has-suffix suffix string)
	       (apply-rule (rule-base rule-data)
			   (subseq string 0 (- (length string) (length suffix))))
	       (fail)))))
      (prefix 
       (let ((prefix (vector-ref rule-data 2)))
	 (if (has-prefix prefix string)
	     (apply-rule (rule-base rule-data)
			 (subseq string (length prefix)))
	     (fail))))
      (suffix-subst
       (let* ((pairs (vector-ref rule-data 2)))
	 (for-choices (pair pairs)
	   (apply-suffix-rule string pair (rule-base rule-data)))))
      (suffix-test
       (let* ((suffix (vector-ref rule-data 2)))
	 (if (has-suffix suffix string)
	     (apply-rule (rule-base rule-data) string)
	     (fail))))
      (sequence
	(let ((rules (vector-ref rule-data 2)))
	  (do ((r (cdr rules) (cdr r))
	       (a (apply-rule (car rules) string)
		  (apply-rule (car r) string)))
	      ((or (and (exists? a) a) (null? r)) a))))
      (choice
       (apply-rule (vector-ref rule-data 2) string))
      (rewrite
       (let ((rewritten (tx-subst (vector-ref rule-data 2) string)))
	 (apply-rule (rule-base rule-data) rewritten)))
      (rule
       (if (tx-match (vector-ref rule-data 2) string)
	   string
	   (fail)))
      (table
       (let ((table (vector-ref rule-data 2)))
	 (let ((map (get table string)))
	   (if (and (exists? map) map)
	       (apply-rule (rule-base rule-data) map)
	       (fail)))))
      (set
       (if (hashset-contains? (vector-ref rule-data 2) string)
	   string (fail))))))
(define (traced-rule-applier rule string)
  (lineout ";;; Considering ``" string "'' with "
	   (rule-tag (record-data rule)))
  (let ((v (inner-rule-applier rule string)))
    (unless (fail? v)
      (lineout ";;; Result from ``" string "'' with "
	       (rule-tag (record-data rule)) ": " v))
    v))
(define rule-applier inner-rule-applier)
;(define (apply-rule rule string) (rule-applier rule string))
(define (apply-rule rule-arg string)
  (if rule-arg
      (try (if (rule-overrides (record-data rule-arg))
	       (get (rule-overrides (record-data rule-arg)) string)
	     (fail))
	   (let ((rule (record-data rule-arg)))
	     (if (vector-ref rule 4)
		 (let ((cached (hashtable-get (vector-ref rule 4) string)))
		   (if (exists? cached)
		       (or cached (fail))
		       (let ((answer (rule-applier rule-arg string)))
			 (hashtable-add! (vector-ref rule 4) string
					 (try answer #f))
			 answer)))
		 (rule-applier rule-arg string))))
      string))

(define morph-apply apply-rule)
(let ((module (get-module 'bemeta)))
  (when (exists? module)
    (set! morph-apply (eval 'morph-apply module))))

(define (index->hashtable index)
  (let* ((ix (use-index index))
	 (keys (index-keys ix))
	 (table (make-hashtable (* 2 (choice-size keys)))))
    (do-choices (key keys)
      (hashtable-add! table key (index-get ix key)))
    table))
(define (index->alist index)
  (let* ((ix (use-index index))
	 (keys (index-keys ix))
	 (alist '()))
    (do-choices (key keys)
      (set! alist (cons (cons key (choices->list (index-get ix key)))
			alist)))
    alist))

(module-export!
 '{make-rule apply-rule morph-apply defrule trace-morphology!
	     index->hashtable})
