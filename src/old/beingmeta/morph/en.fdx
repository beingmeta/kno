;; -*- coding: latin-1 -*-

;; English Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/en '{morph fdtext})

(define irregular-verbs
  (read-dtype-from-file (get-component "data/en-verb-roots.dtype"))
  ;; (use-index (get-component "data/en-verb-roots.index"))
  )
(define verb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-verb.dtype"))))
(define verb-root
  (make-rule 'verb-root 'set verb-roots #f))
(define add-e-rule
  (make-rule 'verb-stem 'suffix-subst '("". "e")
	     verb-root))
(define verb-stem
  (make-rule 'verb-stem 'sequence
	     (list add-e-rule verb-root)
	     #f))
(define past-verb
  (make-rule 'past-verb 'suffix "ed" verb-stem))
(define ing-verb
  (make-rule 'ing-verb 'suffix "ing" verb-stem))
(define passive-verb
  (make-rule 'passive-verb 'suffix "s" verb-root))
(define verb
  (make-rule 'verb 'sequence
	     (list verb-root past-verb ing-verb passive-verb)
	     #f irregular-verbs))

(define irregular-nouns
  (read-dtype-from-file (get-component "data/en-noun-roots.dtype"))
  ;; (use-index (get-component "data/en-noun-roots.index"))
  )
(define noun-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-noun.dtype"))))
(define noun-root
  (make-rule 'singular-noun 'set noun-roots #f))
(define plural-noun
  (make-rule 'plural-noun 'suffix "s" noun-root irregular-nouns))
(define add-es-rule
  (make-rule 'plural-noun 'suffix "es" noun-root irregular-nouns))
(define noun
  (make-rule 'noun 'sequence (list plural-noun add-es-rule noun-root) #f))
(define proper-name
  (make-rule 'noun 'rule #((isupper) (islower+)) #f))

(define adjective-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-adjective.dtype"))))
(define adjective-root
  (make-rule 'adjective-root 'set adjective-roots #f))
(define dashed-word
  (make-rule 'dashed-word 'rule #((isalpha+) "-" (isalpha+)) #f))
(define possessive
  (choice (make-rule 'possessive-1 'suffix "'s" proper-name)
	  (make-rule 'possessive-2 'suffix "'s" proper-name)))
(define adjective
  (choice adjective-root dashed-word possessive))
(define noun-pre-modifier
  (choice adjective-root possessive noun-root proper-name))
(define noun-post-modifier {})

(define adverb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-adverb.dtype"))))
(define adverb-root
  (make-rule 'adverb-root 'set adverb-roots #f))
(define adverb adverb-root)

;(ing-verb "ing" verb-stem)
;(ed-verb "ed" verb-stem)
;(s-verb "ed" verb-root)
;(verb-stem (drop "e") verb) ; #((isalpha+) (subst "e" ""))
;(verb-stem (add "p") verb) ; #((isalpha+) "p" (subst "" "p"))

(define known-names
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-names.dtype"))))
(define name-starts
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-name-starts.dtype"))))

;;; Non linguistic classes

(define stop-words
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-stop-words.dtype"))))
(define stop-word (make-rule 'stop-word 'set stop-words #f))

(define glue-words
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-glue-words.dtype"))))
(define glue-word (make-rule 'glue-word 'set glue-words #f))

(define aux-words
  (choices->hashset
   (read-dtype-from-file (get-component "data/en-aux-words.dtype"))))
(define aux-word (make-rule 'aux-word 'set aux-words #f))

(define determiner-table
  (choices->hashset
   (choice (elts (segment "the an a some one any all every this that"))
	   (elts (segment "those their my your our his her its")))))
(define preposition-table
  (choices->hashset
   (elts (segment "of for in by through at with about from over
under"))))
(define conjunction-table (choices->hashset {"and" "or"}))
(define np-cues
  (choices->hashset
   (choice (hashset-elts preposition-table)
	   (hashset-elts determiner-table)
	   (hashset-elts conjunction-table))))
(define simple-np-cue (make-rule 'simple-np-cue 'set np-cues #f))
(define np-cue
  (make-rule 'np-cue 'choice
	     (qc simple-np-cue possessive) #f))

;;; Phrase rules

(define strict-noun-phrase-pattern
  (choice
   (vector (qc noun-pre-modifier) (qc plural-noun))
   (vector (qc noun-pre-modifier) (qc noun-pre-modifier)
	   (qc plural-noun))
   (list (vector (qc np-cue)
		 (qc noun-pre-modifier dashed-word possessive)
		 (qc noun-pre-modifier)
		 (qc noun)
		 `(not ,noun))
	 1 1)
   (list (vector (qc np-cue)
		 (qc noun-pre-modifier dashed-word possessive)
		 (qc noun-pre-modifier)
		 (qc noun)
		 `(not ,noun))
	 2 1)
   (list (vector (qc np-cue) (qc noun-pre-modifier) (qc noun))
	 1)))

(define noun-phrase-pattern
  (choice
   (vector (qc noun-pre-modifier) (qc noun))
   (vector (qc noun-pre-modifier) (qc noun-pre-modifier)
	   (qc noun))))

(define head-at-end #t)

(module-export! '{noun verb adverb adjective})
(module-export! '{noun-pre-modifier noun-post-modifier})
(module-export! '{stop-word stop-words aux-word aux-words glue-word glue-words known-names name-starts})
(module-export! '{noun-phrase-pattern ocxt-noun-phrase-pattern head-at-end})
 