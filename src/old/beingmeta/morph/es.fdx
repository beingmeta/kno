;;; -*- coding: latin-1 -*-

;; Spanish Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/es)
(use-module 'morph)
(use-module 'fdtext)

(define known-names (make-hashtable))

(define verb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/es-verb.dtype"))))
(define pseudo-verb-roots
  (read-dtype-from-file (get-component "data/es-changed-stems.dtype")))
(define irregular-verbs
  (read-dtype-from-file (get-component "data/es-verb-roots.dtype")))

(define real-verb-root
  (make-rule 'real-verb-root 'set verb-roots #f))
(define verb-root
  (make-rule 'verb-root 'sequence
	     (list real-verb-root
		   (make-rule 'pseudo-verb-root 'table
			      pseudo-verb-roots real-verb-root))
	     #f))
(define past-participle
  (make-rule 'past-participle 'sequence
	     (list (make-rule 'past-participle-ar
			      'suffix-subst '("ado" . " ar") verb-root)
		   (make-rule 'past-participle-er
			      'suffix-subst '("ido" "er") verb-root)
		   (make-rule 'past-participle-ir
			      'suffix-subst '("ido" "ir") verb-root))
	     #f))
(define present-participle
  (make-rule 'present-participle 'sequence
	     (list (make-rule 'present-participle-ar 'suffix-subst
			      '("ando" . "ar") verb-root)
		   (make-rule 'present-participle-er 'suffix-subst
			      '("iendo" . "er") verb-root)
		   (make-rule 'present-participle-ir 'suffix-subst
			      '("iendo" . "ir") verb-root))
	     #f))
(define present-indicative
  (make-rule 'present-indicative 'sequence
	     (list (make-rule 'present-indicative-ar 'suffix-subst
			      '({"o" "as" "a" "amos" "áis" "an"} . "ar") verb-root)
		   (make-rule 'present-indicative-er 'suffix-subst
			      '({"o" "es" "e" "emos" "éis" "en"} . "er") verb-root)
		   (make-rule 'present-indicative-ir 'suffix-subst
			      '({"o" "es" "e" "emos" "éis" "en"} . "ir") verb-root))
	     #f))
(define imperfect-indicative
  (make-rule 'imperfect-indicative 'sequence
	     (list (make-rule 'imperfect-indicative-ar 'suffix-subst
			      '({"aba" "abas"  "ábamos" "abais" "aban"} . "ar") verb-root)
		   (make-rule 'imperfect-indicative-er 'suffix-subst
			      '({"ía" "ías"  "íamos" "íais" "ían"} . "er") verb-root)
		   (make-rule 'imperfect-indicative-ir 'suffix-subst
			      '({"ía" "ías"  "íamos" "íais" "ían"} . "ir") verb-root))
	     #f))
(define preterit
  (make-rule 'preterit 'sequence
	     (list (make-rule 'preterit-ar 'suffix-subst
			      '({"é" "aste"  "ó" "amos" "asteis" "aron"} . "ar") verb-root)
		   (make-rule 'preterit-er 'suffix-subst
			      '({"í" "iste"  "ió" "imos" "isteis" "ieron"} . "er") verb-root)
		   (make-rule 'preterit-ir 'suffix-subst
			      '({"í" "iste"  "ió" "imos" "isteis" "ieron"} . "ir") verb-root))
	     #f))
(define future
  (make-rule 'future 'suffix
	     '{"é" "ás" "á" "emos" "éis" "án"}
	     verb-root))
(define conditional
  (make-rule 'future 'suffix
	     '{"ía" "iás" "íamos" "íais" "ían"}
	     verb-root))
(define present-subjunctive
  (make-rule 'preterit 'sequence
	     (list (make-rule 'preterit-ar 'suffix-subst
			      '({"e" "es" "emos" "éis" "en"} . "ar") verb-root)
		     (make-rule 'preterit-er 'suffix-subst
				'({"a" "as" "amos" "áis" "an"} . "er") verb-root)
		     (make-rule 'preterit-ir 'suffix-subst
				'({"a" "as" "amos" "áis" "an"} . "ir") verb-root))
	     #f))
(define imperfect-subjunctive
  (make-rule 'imperfect-subjective 'suffix-subst
	     '({"ra" "ras" "ramos" "rais" "rain"
		"se" "ses" "semos" "ses" "sen"}
	       . "ron")
	     preterit
	     #f))

(define verb
  (make-rule 'verb 'sequence
	     (list verb-root
		   past-participle
		   present-participle
		   present-indicative
		   imperfect-indicative
		   preterit
		   future
		   conditional
		   present-subjunctive
		   imperfect-subjunctive)
	     #f irregular-verbs))

(define noun-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/es-noun.dtype"))))
(define noun-root
  (make-rule 'singular-noun 'set noun-roots #f))
(define masculine-noun
  (make-rule 'masculine-noun 'suffix-test "o" noun-root))
(define feminine-noun
  (make-rule 'feminine-noun 'sequence
	     (list (make-rule #f 'suffix-test "a" noun-root)
		   (make-rule #f 'suffix-subst '("a" . "") noun-root)
		   (make-rule #f 'suffix-test "cíon" noun-root)
		   (make-rule #f 'suffix-test "síon" noun-root)
		   (make-rule #f 'suffix-test "dad" noun-root)
		   (make-rule #f 'suffix-test "tad" noun-root)
		   (make-rule #f 'suffix-test "tud" noun-root)
		   (make-rule #f 'suffix-test "umbre" noun-root))
	     #f))
(define personal-noun
  (make-rule 'personal-noun 'suffix-test "nte" noun-root))
(define plural-noun
  (make-rule 'plural-noun 'sequence
	     (list (make-rule #f 'suffix-subst '("ces" . "z") noun-root)
		   (make-rule #f 'suffix-subst
			      (cons (qc (string-append {"a" "e" "i" "o" "u"} "s"))
				    "")
			      noun-root)
		   (make-rule #f 'suffix-subst '("es" . "") noun-root))
	     #f))
(define noun
  (make-rule 'noun 'sequence (list plural-noun feminine-noun noun-root) #f))

(define adjective-roots {}
  (choices->hashset (read-dtype-from-file "español-adjective.dtype")))
(define adjective-root
  (make-rule 'adjective-root 'set adjective-roots #f))
(define feminine-adjective
  (make-rule 'feminine-adjective 'suffix-subst '("a" . "o")
	     adjective-root))
(define plural-adjective
  (make-rule 'plural-adjective 'sequence
	     (list (make-rule #f 'suffix-subst '("ces" . "z") noun-root)
		   (make-rule #f 'suffix-subst
			      (cons (qc  (string-append {"a" "e" "i" "o" "u"} "s"))
				    "")
			      noun-root)
		   (make-rule #f 'suffix-subst '("es" . "") noun-root))
	     adjective-root))
(define adjective
  (make-rule 'adjective 'sequence (list feminine-adjective adjective-root) #f))

(define adverb-roots {}
  (choices->hashset
   (read-dtype-from-file (get-component "data/es-adverb.dtype"))))
(define adverb-root
  (make-rule 'adverb-root 'set adverb-roots #f))
(define adverb adverb-root)

;;; Other word classes

(define prepositions
  (elts (segment "a de sin con en hasta para por")))
(define negatives
  (elts (segment "no nada nadie nunca jamás ninguno ni tampoco")))
(define pronouns
  (choice
   ;; direct object
   (elts (segment "yo tú él ella usted nosotros vosotros ellos ellas ustedes"))
   ;; object and indirect object
   (elts (segment "me te le lo la nos os los las les mí ti"))
   ;; possessive
   (elts (segment "mi mis tu tus su sus nuestro nuestra nuestros nuestras vuestro vuestra vuestros vuestros"))
   ;; demonstrative
   (elts (segment "éste ésta ése ésa aquél aquélla éstos éstas ésos ésas aquéllos aquéllas"))
   ;; relative pronouns
   (elts (segment "que quien quienes"))
   ;; Interrogatives
   (elts (segment "qué cuándo dónde adónde cuánto quién quiénes cómo"))
   (elts (segment "cual cuales cuál"))))
(define determiners
  (elts (segment "el la los las al del un una unos unas")))
(define conjunctions
  (elts (segment "y u o ho")))
;;; More parsing stuff

(define stop-words
  (choices->hashset
   (choice prepositions negatives pronouns determiners conjunctions)))
(define stop-word (make-rule 'stop-word 'set stop-words #f))
(define determiner
  (make-rule 'determiner 'set (choices->hashset determiners)))

(define glue-words
  (choices->hashset (choice (elts (segment "que quien quienes"))
			    (elts (segment "qué cuándo dónde adónde cuánto quién quiénes cómo"))
			    (elts (segment "cual cuales cuál")))))
(define glue-word (make-rule 'glue-word 'set glue-words #f))

(define aux-words
  (choices->hashset negatives))
(define aux-word (make-rule 'glue-word 'set aux-words #f))

(define name
  (make-rule 'name 'rule #((isupper) (islower+)) #f))
(define de (make-rule 'de 'rule "de" #f))

(define noun-phrase-pattern
  (choice (vector (qc noun) (qc adjective))
	  (vector (qc noun) de (qc noun name))
	  (vector (qc noun) de determiner (qc noun name))))

;(ing-verb "ing" verb-stem)
;(ed-verb "ed" verb-stem)
;(s-verb "ed" verb-root)
;(verb-stem (drop "e") verb) ; #((isalpha+) (subst "e" ""))
;(verb-stem (add "p") verb) ; #((isalpha+) "p" (subst "" "p"))

(module-export! '{noun verb adjective adverb})
(module-export! '{stop-words aux-words glue-words})
(module-export! '{stop-word aux-word glue-word})
(module-export! '{noun-phrase-pattern})
