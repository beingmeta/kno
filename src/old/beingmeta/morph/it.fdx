;;; -*- coding: latin-1 -*-

;; Italian Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/it)
(use-module 'morph)
(use-module 'fdtext)

(define known-names (make-hashtable))

(define irregulars
  (read-dtype-from-file (get-component "data/it-exceptions.dtype")))
(define (irregulars-table tag)
  (let ((map (make-hashtable)))
    (do-choices (irregular irregulars)
      (if (eq? (cadr irregular) tag)
	  (hashtable-set! map (caddr irregular) (car irregular))))
    map))
(define verb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/it-verb.dtype"))))
(define verb-root
  (make-rule 'verb-root 'set verb-roots #f))
(define past-participle
  (make-rule 'past-participle 'sequence
	     (list (make-rule 'past-participle-are 'suffix-subst
			      '("ato" . "are") verb-root)
		   (make-rule 'past-participle-ere 'suffix-subst
			      '("uto" . "ere") verb-root)
		   (make-rule 'past-participle-ire 'suffix-subst
			      '("ito" . "ire") verb-root))
	     #f
	     (irregulars-table 'past-participle)))
(define feminized-past-participle
  (make-rule 'feminized-past-participle 'suffix-subst
	     '("a" . "o") past-participle))
(define present-participle
  (make-rule 'present-participle 'sequence
	     (list (make-rule 'past-participle-are 'suffix-subst
			      '("ando" . "are") verb-root)
		   (make-rule 'past-participle-ere 'suffix-subst
			      '("endo" . "ere") verb-root)
		   (make-rule 'past-participle-ire 'suffix-subst
			      '("endo" . "ire") verb-root))
	     #f
	     (irregulars-table 'present-participle)))
(define feminized-present-participle
  (make-rule 'feminized-present-participle 'suffix-subst
	     '("a" . "o") present-participle))
(define present-indicative
  (make-rule 'present-indicative 'sequence
	     (list (make-rule 'present-indicative-are 'suffix-subst
			      '({"o" "i" "a" "iamo" "ate" "ano"} . "are")
			      verb-root)
		   (make-rule 'present-indicative-ere 'suffix-subst
			      '({"o" "i" "e" "iamo" "ete" "ono"} . "ere")
			      verb-root)
		   (make-rule 'present-indicative-ire 'suffix-subst
			      '({"o" "i" "e" "iamo" "ite" "ono"} . "ire")
			      verb-root))
	     #f
	     (irregulars-table 'present)))
(define imperfect-indicative
  (make-rule 'imperfect-indicative 'sequence
     (list (make-rule 'imperfect-indicative-are 'suffix-subst
		      '({"avo" "avi" "ava" "avamo" "avate" "avano"} . "are")
		      verb-root)
	   (make-rule 'imperfect-indicative-ere 'suffix-subst
		      '({"evo" "evi" "eva" "evamo" "evate" "evano"} . "ere")
		      verb-root)
	   (make-rule 'imperfect-indicative-ire 'suffix-subst
		      '({"ivo" "ivi" "iva" "ivamo" "ivate" "ivano"} . "ire")
		      verb-root))
     #f
     (irregulars-table 'imperfect)))
(define abspast ;; past-absolute
  (make-rule 'abspast 'sequence
    (list (make-rule 'asbpast-are 'suffix-subst
		     '({"ai" "asti" "ò" "ammo" "aste" "arono"} . "are")
		     verb-root)
	  (make-rule 'asbpast-ere 'suffix-subst
		     '({"ei" "esti" "è" "emmo" "dste" "erono"
			"etti" "ette" "ettero"}
		       . "ere")
		     verb-root)
	  (make-rule 'asbpast-ire 'suffix-subst
		     '({"ii" "isti" "ì" "immo" "iste" "irono"} . "ire")
		     verb-root))
    #f
    (irregulars-table 'abspast)))
(define verb-stem
  (make-rule 'verb-stem 'sequence
	     (list (make-rule 'verb-stem-are 'suffix-subst
			      '("ar" . "are") verb-root)
		   (make-rule 'verb-stem-ere 'suffix-subst
			      '("er" . "ere") verb-root)
		   (make-rule 'verb-stem-ire 'suffix-subst
			      '("ir" . "ire") verb-root))
	     #f))

(define future
  (make-rule 'future 'suffix
	     '{"ò" "ai" "à" "emo" "ete" "anno"}
	     verb-stem
	     (irregulars-table 'future)))
(define conditional
  (make-rule 'conditional 'suffix
	     '{"ei" "esti" "ebbe" "emmo" "este" "ebbero"}
	     verb-stem
	     (irregulars-table 'conditional)))
(define imperative
  (make-rule 'imperative 'sequence
     (list (make-rule 'imperative-are 'suffix-subst
		      '({"a" "i" "iamo" "ate" "ino"} . "are")
		      verb-root)
	   (make-rule 'imperative-ere 'suffix-subst
		      '({"i" "a" "iamo" "ete" "ano"} . "ere")
		      verb-root)
	   (make-rule 'imperative-ire 'suffix-subst
		      '({"i" "a" "iamo" "ite" "ano" "isci" "isca" "iscano"}
			. "ire")
		      verb-root))
     #f
     (irregulars-table 'imperative)))

(define present-subjunctive
  (make-rule 'present-subjunctive 'sequence
	     (list (make-rule 'present-subjunctive-are 'suffix-subst
			      '({"i" "iamo" "iate" "ino"} . "are")
			      verb-root)
		     (make-rule 'present-subjunctive-ere 'suffix-subst
				'({"a" "iamo" "iate" "ano"} . "ere")
				verb-root)
		     (make-rule 'present-subjunctive-ire 'suffix-subst
				'({"a" "isca" "iamo" "iate" "ano" "iscano"}
				  . "ire")
				verb-root))
	     #f
	     (irregulars-table 'present-subjunctive)))

(define imperfect-subjunctive
  (make-rule 'imperfect-subjunctive 'sequence
	     (list (make-rule 'imperfect-subjunctive-are 'suffix-subst
			      '({"assi" "asse" "assimo" "aste" "assero"}
				. "are")
			      verb-root)
		     (make-rule 'imperfect-subjunctive-ere 'suffix-subst
				'({"essi" "esse" "essimo" "este" "essero"}
				  . "ere")
				verb-root)
		     (make-rule 'imperfect-subjunctive-ire 'suffix-subst
				'({"issi" "isse" "issimo" "iste" "issero"}
				  . "ire")
				verb-root))
	     #f
	     (irregulars-table 'imperfect-subjunctive)))
(define past-infinitive
  (make-rule 'imperfect-subjunctive 'suffix "e" verb-root #f))

(define verb
  (make-rule 'verb 'sequence
	     (list verb-root
		   past-participle
		   feminized-past-participle
		   present-participle
		   present-indicative
		   imperfect-indicative
		   abspast
		   future
		   imperative
		   conditional
		   present-subjunctive
		   imperfect-subjunctive
		   past-infinitive)
	     #f))

(define noun-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/it-noun.dtype"))))
(define noun-root
  (make-rule 'singular-noun 'set noun-roots #f))
(define masculine-noun
  (make-rule 'masculine-noun 'suffix-test "o" noun-root))
(define feminine-noun
  (make-rule 'feminine-noun 'suffix-test "a" noun-root #f))
(define noun-stem
  (make-rule 'noun-stem 'sequence
	     (list noun-root
		   (make-rule #f 'suffix-subst '("co" . "cio") noun-root)
		   (make-rule #f 'suffix-subst '("go" . "gio") noun-root)
		   (make-rule #f 'suffix-subst '("ca" . "cia") noun-root)
		   (make-rule #f 'suffix-subst '("ga" . "gia") noun-root)
		   (make-rule #f 'suffix-subst '("o" . "io") noun-root))
	     #f))
(define plural-noun
  (make-rule 'plural-noun 'sequence
	     (list (make-rule #f 'suffix-subst '("i" . {"o" "e"}) noun-stem)
		   (make-rule #f 'suffix-subst '("e" . "a") noun-stem)
		   (make-rule #f 'suffix-subst '({"isti" "iste"} . "ista")
			      noun-root)
		   (make-rule #f 'suffix-subst '({"chi" "ci"} . "co")
			      noun-root)
		   (make-rule #f 'suffix-subst '({"ghi" "gi"} . "go")
			      noun-root)
		   (make-rule #f 'suffix-subst '("emi" . "ema") noun-root)
		   (make-rule #f 'suffix-subst '("ammi" . "amma") noun-root)
		   (make-rule #f 'suffix-subst '("um" . "a") noun-root))
	     #f))
(define noun
  (make-rule 'noun 'sequence (list plural-noun noun-root) #f))

(define adjective-roots {}
  (choices->hashset
   (read-dtype-from-file (get-component "data/it-adjective.dtype"))))
(define adjective-root
  (make-rule 'adjective-root 'set adjective-roots #f))
(define feminine-adjective
  (make-rule 'feminine-adjective 'suffix-subst '("a" . "o")
	     adjective-root))
(define plural-adjective
  (make-rule 'plural-adjective 'sequence
	     (list (make-rule #f 'suffix-subst '({"a" "i" "e"} . "o")
			      adjective-root)
		   (make-rule #f 'suffix-subst '({"i" "e"} . "e")
			      adjective-root))))
(define adjective
  (make-rule 'adjective 'sequence (list feminine-adjective
					plural-adjective
					adjective-root) #f))

(define adverb-roots {}
  (choices->hashset
   (read-dtype-from-file (get-component "data/it-adverb.dtype"))))
(define adverb-root
  (make-rule 'adverb-root 'set adverb-roots #f))
(define adverb adverb-root)

;(ing-verb "ing" verb-stem)
;(ed-verb "ed" verb-stem)
;(s-verb "ed" verb-root)
;(verb-stem (drop "e") verb) ; #((isalpha+) (subst "e" ""))
;(verb-stem (add "p") verb) ; #((isalpha+) "p" (subst "" "p"))

(module-export! '{noun verb adverb adjective})
