#!/usr/bin/env fdexec
;; -*- Mode: Scheme -*-

(load-component "arc-weights")

(define (main word tag (weight #f))
  (let* ((lexsource (get-lexicon-source))
	 (lexicon (open-index lexsource))
	 (grammar (get lexicon '%grammar))
	 (arcs (first grammar))
	 (term (if (string? word)
		   (if (position #\Space word) (segment word " ") word)
		   word))
	 (lexentry (get lexicon term)))
    (message "Using lexicon from " lexsource)
    (when (and weight (or (fail? lexentry) (not (vector? lexentry))))
      (message "The word \"" word "\" doesn't have an entry in " lexsource)
      (set! lexentry (make-vector (length arcs) #f)))
    (if weight
	(do ((arcs (->list arcs) (cdr arcs))
	     (weights (->list lexentry) (cdr weights))
	     (new-lexentry
	      '() (cons (if (eq? (car arcs) tag) weight (car weights))
			new-lexentry)))
	    ((null? weights)
	     (let ((newlex (->vector (reverse new-lexentry))))
	       (store! lexicon term newlex)
	       (commit))))
	(let ((xweights (get lexicon tag)))
	  (if (exists? tag)
	      (begin (message "Defining " word " based on " tag)
		     (store! lexicon term xweights)
		     (commit))
	      (message "No lexicon entry for " tag))))
    (show-pos-data word lexicon)))




