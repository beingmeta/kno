;;; -*- Mode: Scheme; -*-

(use-module 'fdweb)
(use-module 'xhtml)
(use-module 'texttools)

(define menubar
  (macro expr
    `(div (class "menubar")
       (img src "/graphics/chopper_menubar" class "applogo")
       (img src "/graphics/bm_menubar" class "sitelogo")
       ,@(cdr expr))))

(config! 'lexdata "/data/lexdata")

(define noun-tags '{noun solitary-noun proper-name plural-noun})
(define verb-tags '{verb complement-adjective inflected-verb
			 infinitival-verb ing-verb be-verb})

(define (get-word-class entry)
  (cond ((overlaps? (second entry) noun-tags) "noun")
	((overlaps? (second entry) verb-tags) "verb")
	(else "word")))

(define (make-title entry)
  (stringout (second entry) " w/tension=" (fourth entry) ": "
	     (third entry)))

(define lexword first)
(define lextag second)
(define lexroot third)

(define (gather-phrases current inputs)
  (if (null? inputs) (choice)
      (let* ((input (car inputs)) (tag (lextag input)))
	(choice
	 (tryif (pair? (lexword input))
		(if (overlaps? tag '{proper-name proper-modifier})
		    (lexword input)
		    (lexroot input)))
	 (tryif (eq? tag 'time-word) (lexword input))
	 (cond ((eq? tag 'noun-modifier)
		(if (null? current)
		    (gather-phrases (list (third input)) (cdr inputs))
		    (let ((new-compound `(,@current ,(lexroot input))))
		      (choice 
		       new-compound
		       (gather-phrases (list new-compound) (cdr inputs))))))
	       ((eq? tag 'proper-modifier)
		(if (null? current)
		    (gather-phrases `(,(lexword input)) (cdr inputs))
		    (gather-phrases
		     `(,@current ,(lexword input)) (cdr inputs))))
	       ((eq? tag 'proper-name)
		(choice
		 (if (null? current) (list (lexword input))
		     `(,@current ,(lexword input)))
		 (gather-phrases '() (cdr inputs))))
	       ((eq? tag 'proper-possessive)
		(let ((compound (if (null? current)
				    `(,(lexroot input))
				    `(,@current ,(lexroot input)))))
		  (choice compound
			  (gather-phrases compound (cdr inputs)))))
	       ((overlaps? tag noun-tags)
		(if (null? current)
		    (gather-phrases '() (cdr inputs))
		    (choice `(,@current ,(lexroot input))
			    (gather-phrases '() (cdr inputs)))))
	       ((eq? tag 'possessive)
		(if (null? current)
		    (choice `(,(lexroot input))
			    (gather-phrases `(,(lexroot input)) (cdr inputs)))
		    (choice `(,@current ,(lexroot input))
			    (gather-phrases
			     `(,@current ,(lexroot input))
			     (cdr inputs)))))
	       (else (gather-phrases '() (cdr inputs))))))))

(define (getphrases x) (gather-phrases '() x))

(define (output-term x)
  (if (string? x) (xmlout x)
      (doseq (elt x) (output-term elt) (xmlout " "))))

(define (main (text #f))
  (stylesheet! "nlp.css")
  (menubar "This page demonstrates beingmeta's natural language technology")
  (when text
    (let* ((result (tagtext* text))
	   (stats result)
	   (parsed (fifth result))
	   (distance 0))
      (p* (class "summary")
	  "Text analysis processed "
	  (second stats) " words, exploring "
	  (third stats) " states in " (fourth stats) " seconds")
      (p* (class "instructions")
	  (span (style "color: red;") "Verbs") " are "
	  (span (style "color: red;") "red") ", " 
	  (span (style "color: blue;") "nouns") " are "
	  (span (style "color: blue;") "blue") ", and phrases are "
	  "\"quoted\"" (br)
	  "Text size "
	  (span (style "font-size: 140%;") "variations")
	  " indicate the changing "
	  (anchor* "howitworks.html"
		   ((title "More information about how the parser works")
		    (style "font-size: 140%;")
		    (target "_new"))
		   "tension")
	  " of the parse." (br)
	  (strong "Move the mouse pointer")
	  " over "
	  (span (title "not these words, silly!") "individual words")
	  " to see more information.")
      (div (class "parser_output")
	(doseq (sentence parsed)
	  (p* (class "sentence")
	      (doseq (word sentence i)
		(let ((delta (- (fourth word) distance)))
		  (set! distance (fourth word))
		  (span ((class (get-word-class word))
			 (title (make-title word))
			 (style (if (> delta 0)
				    (stringout "font-size: "
				      (+ 100 (* delta 20)) "%;"))))
		    (if (pair? (first word))
			(xmlout "\""
				(doseq (elt (first word) i)
				  (printout (if (> i 0) " ") elt))
				"\"")
			(xmlout (first word)))))
		(xmlout " ")))))
      (H1 "Try some more:")))
  (form (action "parseform.fdcgi")
    (P* (class "textarea")
	"Enter text to be analyzed by the Chopper" (br)
	(xmlblock '(textarea name "TEXT" rows "6" cols "60")
		  (if text text
		      (xmlout "This area is reserved for example sentences "
			      "which will be analyzed and displayed below.  "
			      "You can enter your own sentences and see what "
			      "the parser produces for analysis.")))
    (P* (class "parsebutton")
	(xmlempty 'input 'type "submit" 'name "action" 'value "Parse")))))



