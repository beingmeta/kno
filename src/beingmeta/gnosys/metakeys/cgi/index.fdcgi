;;; -*- Mode: Scheme; -*-

(define load-start (elapsed-time))
(load-config (get-component "site.cfg"))

(use-module 'fdweb)
(use-module '{xhtml xhtml/clickit})
(use-module '{brico tracer})
(use-module '{metakeys metakeys/web metakeys/disambiguate})
(use-module '{metakeys/translate metakeys/suggestions})

(reload-module 'metakeys/web)

(default! version 0)
(set! version (1+ version))

; (url-rewrite!
;   "http://images.beingmeta.com/dvo/" "http://demo.beingmeta.com/dvoimages/")
; (url-rewrite!
;   "http://images.beingmeta.com:80/dvo/" "http://demo.beingmeta.com/dvoimages/")

(define %profile #[])

;(reload-module '{metakeys metakeys/disambig metakeys/web})

(define use-ipeval #f)

(define searchids
  (or (config 'searchids #f)
      (let ((table (make-hashtable)))
	(config! 'searchids table)
	table)))

(define get-concepts-time #f)
(define get-dterms-time #f)

(define n-specls #f)

;;; The computing core

(define (keylist-compute)
  (tracer 1 "Starting keylist compute")
  (let* ((start (elapsed-time))
	 (language (get-language))
	 (newlang (cgiget 'newlang))
	 (keylist (get-keylist 'keywords)))
    (unless (eq? language newlang)
      (tracer 1 "Language changed from " language " to " newlang)
      (set! keylist (change-language keylist newlang))
      (set! language newlang)
      (set-cookie! 'language newlang)
      (cgiset! 'language newlang))
    (ipeval
     (doseq (entry (keylist-entries keylist))
       (get-dterm (keyentry-possible entry) language
		  (keyentry-base entry))))
    (cgiset! 'keywords keylist)
    (tracer 1 "keylistcompute took " (- (elapsed-time) start) "secs")    
    keylist))

(define (searchcompute)
  (tracer 1 "Starting searchompute")
  (let* ((start (elapsed-time))
	 (language (get-language))
	 (keylist (keylist-compute))
	 (actual (keylist-actual keylist))
	 (possible (keylist-possible keylist))
	 (sampled
	  (tryif (cgitest 'command 'search)
		 (lightbox-concepts (qc (cgiget 'image)))))
	 (allconcepts (choice actual sampled))
	 (displayed (choice actual (get-basis sampled @?genls)))
	 (suggestions 
	  (get-suggestions (qc document-indices)
			   (qc allconcepts)
			   (qc (cgiget 'image)))))
    (tracer 1 "Getting dterms")
    (ipeval (get-dterm sampled language))
    (tracer 1 "Searchcompute took " (- (elapsed-time) start) "secs")
    `#[language ,(keylist-language keylist) keylist ,keylist
       removed ,(cgiget 'removed) sampled ,sampled
       actual ,allconcepts displayed ,displayed
       suggestions ,suggestions]))

(define (lightbox-concepts images)
  (ipeval (get (get images @?gn/concepts) @?genls*))
  (let ((table (make-hashtable))
	(meanings (get (get images @?gn/concepts) @?genls*)))
    (do-choices (meaning meanings)
      (store! table meaning
	      (choice-size (intersection
			    images
			    (find-frames document-indices
			      @?gn/concepts meaning)))))
    (hashtable-max table)))

(define (tagcompute)
  (tracer 1 "Starting tagcompute")
  (let* ((start (elapsed-time))
	 (language (get-language))
	 (keylist (keylist-compute))
	 (actual (keylist-actual keylist))
	 (possible (keylist-possible keylist))
	 (common (ipeval (get-common-concepts (qc (cgiget 'image)))))
	 (removed (cgiget 'removed))
	 (allconcepts (choice actual common))
	 (displayed (choice actual (get-basis common @?genls)))
	 (suggestions
	  (if (cgitest 'command 'image) {}
	      (get-suggestions (qc document-indices)
			       (qc allconcepts)
			       (qc (cgiget 'image))))))
    (when (cgitest 'command 'commit)
      (assert! (cgiget 'image) @?gn/xconcepts actual)
      (retract! (cgiget 'image) @?gn/xconcepts removed)
      (clear-slotcache! @?gn/xconcepts)
      (clear-slotcache! @?gn/concepts))
    (tracer 1 "Getting dterms")
    (ipeval (get-dterm common language))
    (tracer 1 "tagcompute took " (- (elapsed-time) start) "secs")
    `#[language ,(keylist-language keylist) keylist ,keylist
       sampled ,common removed ,(cgiget 'removed)
       actual ,allconcepts displayed ,displayed
       suggestions ,suggestions]))

(define (get-common-concepts images)
  (if (singleton? images)
      (get (get images @?gn/xconcepts) @?genls*)
      (let* ((ordered (sorted images))
	     (results (get (get (first ordered) @?gn/xconcepts) @?genls*))
	     (len (length ordered)))
	(do ((i 1 (1+ i)))
	    ((or (empty? results) (>= i len)) results)
	  (set! results
		(intersection
		 (get (get (elt ordered i) @?gn/xconcepts) @?genls*)
		 results))))))

(define (get-form-class)
  (cond ((cgitest 'command 'search) "searching")
	((cgitest 'command 'page) "searching")
	((cgitest 'command 'tag) "browsing")
	((cgitest 'command 'image) "browsing")
	((cgitest 'command 'commit) "browsing")
	(else "refining")))

;;; The menubar

(define menubar
  (macro expr
    `(div (class "menubar")
       (img src "/graphics/bv_menubar" class "applogo")
       (img src "/graphics/bm_menubar" class "sitelogo")
       ,@(cdr expr))))


;;; Rendering the search results

(define pagesize 10)

(define (iexpt x n)
  (if (> n 1) (* x (iexpt x (1- n))) x))

(define (render-search-results)
  (let ((searchid (cgiget 'searchid))
	(searchpos (cgiget 'searchpos)))
    (if (and (not (cgitest 'command 'search))
	     (exists? searchid) (exists? (get searchids searchid)))
	(render-searchbox searchid (try searchpos 0))
	(let ((bgscores (make-hashtable))
	      (keyscores (make-hashtable))
	      (scores (make-hashtable))
	      (concepts (cgiget 'actual))
	      (keyconcepts (keylist-actual (cgiget 'keywords))))
	  (tracer 1 "Starting search")
	  (do-choices (concept concepts)
	    (hashtable-increment!
	     bgscores (find-frames document-indices @?gn/concepts concept)))
	  (when (fail? keyconcepts) (set! scores bgscores))
	  (when (exists? keyconcepts)
	    (tracer 1 "Biasing with keyconcepts")
	    (do-choices (concept keyconcepts)
	      (let ((documents (find-frames document-indices
				 @?gn/concepts concept)))
		(hashtable-increment! keyscores documents)))
	    (if (identical? keyconcepts concepts)
		(set! scores keyscores)
		(do-choices (document (getkeys keyscores))
		  (store! scores document
			  (iexpt (get bgscores document)
				 (1+ (get keyscores document)))))))
	  (let ((results (reverse (sorted (getkeys scores) scores)))
		(searchid (* (random (* 65536 256)) 1)))
	    (tracer 1 "Finished executing search")
	    (store! searchids searchid
		    (vector results scores (qc concepts)
			    (choice-size
			     (find-frames document-indices
			       @?gn/xconcepts concepts))))
	    (render-searchbox searchid 0))))))

(define (render-searchbox searchid searchpos)
  (let* ((resultdata (get searchids searchid))
	 (results (first resultdata))
	 (scores (second resultdata))
	 (pageend (min (+ searchpos pagesize) (length results)))
	 (prevpage (- searchpos pagesize))
	 (nextpage (1+ pageend))
	 (maxscore (get scores (elt results searchpos)))
	 (minscore (get scores (elt results (1- pageend)))))
    (div (class "searchbox")
      (div (class "header") "Results")
      (div (class "subheader")
	searchpos "-" pageend " of "
	(length results) " found")
      (div (class "subheader")
	(fourth resultdata) " tagged / "
	(- (length results) (fourth resultdata))
	" inferred")
      (pagebar prevpage nextpage (length results))
      (div (class "subheader")
	(span  (style "background: gold;")
	  "[" (anchor (scripturl "lightbox.fdcgi"
				 'searchid searchid 'searchpos searchpos)
		      "lightbox") "]"))
      (scorebar minscore maxscore)
      (input type "hidden" id "searchid" name "SEARCHID" value searchid)
      (input type "hidden" id "searchpos" name "SEARCHPOS" value searchpos)
      (doseq (result (subseq results searchpos pageend))
	(showthumbnail
	 result "searchresult"
	 (stringout "score=" (get scores result) "; click for details")))
      (scorebar minscore maxscore)
      (pagebar prevpage nextpage (length results)))))

(define (pagebar prevpage nextpage maxpage)
  (div (class "pagebar")
    (if (> prevpage 0)
	(img class "leftbutton"
	     src "/graphics/prev_arrow" alt "back"
	     title "click to go back one page of images"
	     onclick (stringout "search_go(" prevpage ");"))
	(img class "leftbutton"
	     src "/graphics/stop_dot" alt "start"))
    (if (< nextpage maxpage)
	(img class "rightbutton" src "/graphics/next_arrow" alt "more"
	     title "click to go to the next page of images"
	     onclick (stringout "search_go(" nextpage ");"))
	(img class "rightbutton" src "/graphics/stop_dot" alt "no more"))))

(define (scorebar min max)
  (if (= min max)
      (div (class "subheader") "scores=" max)
      (div (class "subheader") "scores=" max "..." min)))

;;; Displaying the image, if there is one.

(define (render-single-imagebox image)
  (div (class "imagebox")
    (if (cgitest 'command 'image)
	(div (class "header") "Image")
	(div (class "header") "Tagging"))
    (div (class "image")
      (anchor (get image 'url)
	      (img src (rewrite-url (get image 'url)) class "subject")))
    (div (class "keywords")
      (when (exists? (get image 'keywords))
	(div (class "header") "Keywords"))
      (do-choices (keyword (get image 'keywords) i)
	(if (> i 0) (xmlout " "))
	(if (position #\Space keyword)
	    (xmlout "\"" keyword "\"")
	    (xmlout keyword))))))

(define (render-imagebox images)
  (do-choices (image images)
    (input type "hidden" name "IMAGE" value image))
  (if (singleton? images)
      (render-single-imagebox images)
      (div (class "imagebox")
	(div (class "header") "Tagging")
	(div (class "thumbnails")
	  (do-choices (image images)
	    (anchor* (scripturl "index.fdcgi" 'image image 'command 'image)
		     (target "_new")
		     (img src (thumbnail-url (rewrite-url (get image 'url)))
			  class "subjects"
			  title "Click to see alone")))))))

;;; Rendering the console

(define (render-console textvar textval)
  (div ((class "console") (id "console"))
    (div (class "directions" name "help")
      "Please " (strong "enter keywords")
      " to identify disambiguated "
      (span (class "conceptmarkup") "metakeys"))
    (div (class "directions" id "keyword_details")
      "Enclose phrases in \"double quotes\"; "
      "use a colon to disambiguate terms, e.g. " "fish:animal")
    (div (class "textbar")
      (input type "text" name (->string textvar) value textval
	     id "keyword_input" autocomplete "off"
	     onfocus "keyword_input_selected(this,true);"
	     onblur "keyword_input_selected(this,false);"
	     onkeyup "textchange(this,event);")
      (let ((language (get-language))
	    (languages (get-languages)))
	(xmlblock SELECT
	    ((name "NEWLANG")
	     (size 1)
	     (onchange "language_changed(this);"))
	  (do-choices (lang languages)
	    (xmlblock (if (eq? language lang)
			  `(OPTION value ,lang "selected")
			  `(OPTION value ,lang))
		(get lang '%id)))))
      (input type 'submit name "ACTION" value "Refresh"
	     style "display: none;")
      (when (or (cgitest 'command 'tag)  (cgitest 'command 'commit))
	(commandclick 'commit "Commit" "Save your changes"))
      (when (cgitest 'command 'image)
	(commandclick 'tag "Edit" "Change the tags for this image"))
      (unless (or (cgitest 'command 'tag) (cgitest 'command 'commit))
	(commandclick 'search "Search"
		      "Find images based on these metakeys"))
      (urlclick "index.fdcgi" "New" "Start a new blank search")
      (xurlclick "prefs.fdcgi" "Prefs"
		 "Configure your BabelVision session"))
    (div (class "feedback" id "feedback") "")))

;;; Picking a new focus

(define (pick-new-focus info)
  (let ((new-focus (pick-one (get info 'displayed))))
    (tracer 1 "New focus is " new-focus)
    (cgiset! 'focus new-focus)
    new-focus))

;;; The main event.

(define (main keywords language action)
  ;; (clearcaches)
  (tracer 1 "Entered MAIN" )
  ;; (config! 'calltrack "/tmp/metakeys.log")
  ;; (set! %profile (deep-copy #[]))
  (default! keywords "")
  (let* ((command (cgiget 'command))
	 (focus (cgiget 'focus))
	 (info (if (overlaps? command '{tag commit image})
		   (tagcompute)
		   (searchcompute)))
	 (keylist (get info 'keylist))
	 (actual (get info 'actual))
	 (displayed (get info 'displayed)))
    (unless (cgitest 'command 'page)
      (cgiset! 'searchid (qc))
      (cgiset! 'searchpos (qc)))
    (tracer 1 "Finished precompute" )
    (if (cgitest 'sparselayout #t)
	(body! 'onload "load_conceptdetails();"
	       'class "sparse")
	(body! 'onload "load_conceptdetails();"))
    (title! "Babelvision")
    (stylesheet! "babelvision.css")
    (stylesheet! "metakeys.css")
    (javascript! "metakeys.js")
    (javascript! "babelvision.js")
    (menubar
     (cond ((cgitest 'command 'search)
	    (div (class "pagesummary")
	      "This page shows images tagged with "
	      "a particular selection of metakeys."))
	   ((or (cgitest 'command 'tag) (cgitest 'command 'commit))
	    (div (class "pagesummary")
	      "This page allows you to add, remove, or refine "
	      "metakeys associated with particular images."))
	   ((cgitest 'command 'image)
	    (div (class "pagesummary")
	      "This page shows you the annotations for a "
	      "particular image."))
	   (else (div (class "pagesummary")
		   "This page lets you specify metakeys "
		   "for searching the database."))))
    (cgiset! 'actual (qc (get info 'actual)))
    (tracer 1 "Started generating FORM content")
    (form (action "index.fdcgi" class (get-form-class)) ;; METHOD "POST"
      (if (eq? command 'commit)
	  (input type "hidden" id "command_elt" name "COMMAND" value 'tag)
	  (input type "hidden" id "command_elt" name "COMMAND"
		 value command))
      (unless (and (exists? focus) (overlaps? focus displayed))
	(set! focus (pick-new-focus info)))
      (input type "hidden" id "focus_elt" name "FOCUS" value focus)
      (tracer 1 "Starting concept listings")
      (div (class "conceptlistings")
	(div (class "header") "MetaKeys")
	(div (class "directions") "Click to examine")
	(div (class "directions") "Alt-click to remove")
	(let* ((actual (keylist-actual keylist))
	       (removed (cgiget 'removed))
	       (sampled (difference (get info 'sampled) actual)))
	  (div ((id "keylist_conceptlistings")
		(title "These metakeys are based on query text"))
	    (doseq (keyentry (keylist-entries keylist))
	      (do-choices (possible (keyentry-actual keyentry))
		(conceptlisting possible))))
	  ;; Now we assumed that all the removed entries are done.
	  (when  (exists? sampled)
	    (div ((class "header")
		  (id "context_header")
		  (title "These are concepts putting your search in context")
		  (style (if (empty? actual) "display: none;")))
	      "Context")
	    (when (cgitest 'command '{search searchplus})
	      (div ((class "directions")) "Double-click to emphasize")))
	  (div (id "sampled_conceptlistings")
	    (do-choices (concept (get-basis sampled @?genls))
	      (conceptlisting concept)))))
      (tracer 1 "Done with concept listings" )
      ;; Display the images if there are any
      (if (or (cgitest 'command 'tag)
	      (cgitest 'command 'commit)
	      (cgitest 'command 'image))
	  (let ((image (cgiget 'image)))
	    (when (exists? image) (render-imagebox (qc image))))
	  (do-choices (image (cgiget 'image))
	    (input type "hidden" name "IMAGE" value image)))
      ;; Display the search results if they exist
      (when (or (cgitest 'command 'search)  (cgitest 'command 'page))
	(tracer 1 "Displaying search results" )
	(render-search-results)
	(tracer 1 "Done displaying search results" ))

      (tracer 1 "Rendering console")
      ;; Render the console
      (render-console 'keywords
		      (try (keylist-text (get info 'keylist))
			   ""))
      ;; Render suggestions
      (div ((class "concept_suggestions")
	    (style (if (empty? (get info 'suggestions)) "display: none;")))
	(span (class "head") "Suggestions:")
	(div ((id "concept_suggestions"))
	  (doseq (c (subseq (get info 'suggestions)
			    0 (min 20 (length (get info 'suggestions)))))
	    (conceptsuggestion c))))
      ;; Output the details, most of which will be hidden
      (tracer 1 "Rendering concept details and placeholders")
      (div (class "details" id "conceptdetails")
	;; In this new AJAX version, we just render the focus now and
	;; expect load_conceptdetails() to get the rest.
	(begin (conceptdetail focus) (xmlout)))
      (tracer 1 "Done reindering FORM content"))
    ;; (config! 'calltrack "/tmp/metakeys.log")
    (tracer 1 "Finished MAIN")))

(define load-time (- (elapsed-time) load-start))
