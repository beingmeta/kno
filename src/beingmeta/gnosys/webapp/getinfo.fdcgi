(cond ((config 'getmeaningsconfig #f))
      ((file-exists? (get-component "custom.cfg"))
       (load-config (get-component "custom.cfg")))
      ((file-exists? (get-component "default.cfg"))
       (load-config (get-component "default.cfg"))))

(use-module '{fdweb xhtml xhtml/brico xhtml/clickit})
(use-module '{morph brico brico/lookup brico/dterms brico/dtermcache})
(use-module '{gnosys gnosys/webapp gnosys/nlp gnosys/disambiguate})

; (define common-module
;   (and (config 'getmeaningsconfig #f)
;        (and (string? (config 'getmeaningsconfig))
; 	    (get-component (config 'getmeaningsconfig)))))
; (when common-module
;   (load-module common-module))

(defambda (output-field c slotid name lang (values))
  (when (or (and (bound? values) (exists? values))
	    (test c slotid))
    (default! values (pick (get c slotid) 'type))
    (when (exists? values)
      (xmlblock REL ((relname name))
	(do-choices (v values)
	  (xmlelt 'VALUE 'oid v
		  'dterm (ifexists (pick-one (cached-dterm v lang)))
		  'norm
		  (try (get-norm v lang)
		       (pick-one (get v lang))
		       (string-append "en$" (pick-one (get v english))))
		  'gloss (get-single-gloss v lang))
	  (xmlout "\n")))
      (xmlout "\n"))))

(define show-slotids
  (choice @?implies ;; @?genls
	  @?partof @?ingredients @?sumterms))
(define inv-slotids (get show-slotids 'inverse))

(define (main concept language)
  (cgiset! 'doctype #f)
  (cgiset! 'content-type "text/xml;charset=utf-8")
  (lineout "<?xml version='1.0' encoding='UTF-8'?>")
  (lineout "<!DOCTYPE CINFO>")
  (if (bound? language)
      (unless (oid? language)
	(set! language (get language-map language)))
      (set! language (get-language)))
  (let ((lang (default language (get-language))))
    ;; (message "getinfo lang=" lang " language=" language " concept=" concept)
    (request-dterm concept lang)
    (prefetch-oids! (%get concept show-slotids))
    (prefetch-keys! (cons inv-slotids concept))
    (xmlblock CINFO ()
      (xmlout "\n")
      (do-choices (c concept)
	(xmlblock SUM ((oid c) (dterm (pick-one (require-dterm c lang))))
	  (output-field c @?always "always" lang)
	  (output-field c @?commonly "commonly" lang
			(difference (get c @?commonly) (get c @?always)))
	  (output-field c @?sometimes "sometimes" lang
			(difference (get c @?sometimes)
				    (get c {@?always @?commonly})))
	  (output-field c @?never "never" lang (?? @?never c))
	  ;; (output-field c @?genls "genls" lang)
	  (output-field c @?partof "partof" lang)
	  (output-field c @?ingredients "madeof" lang)
	  (output-field c @?sumterms "sumterms" lang))))))

