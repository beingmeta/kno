#!/usr/bin/fdscript
;;; -*- Mode: fdscript; -*-

;;; Copyright (C) 2002, beingmeta, inc.
;;; $Id:$

;;; This script resets all of a spiders data files, removing history
;;; files.  Note that this does not touch background pools or indices.

;;; Initialization

(use-module 'load-utils)

(set-notify! #t)

;;; This script resets all of the spider data and control files in the
;;; designated (or current) directory
;;; $Id:$

(define (main (dir "."))
  ;; Remove or reset pools and files
  (let ((dir (add-slash (if (equal? dir ".") (pwd) dir))))
    (reset-file-pool (stringout dir "content.pool"))
    (reset-file-pool (stringout dir "context.pool"))
    (reset-file-index (stringout dir "content.index"))
    (reset-file-index (stringout dir "context.index"))
    (when (file-exists? (stringout dir "analyses.index"))
      (reset-file-index (stringout dir "analyses.index")))    
    (do-choices (file (getfiles dir))
      (cond ((has-suffix {".log" ".err" ".failed" ".big"} file)
	     (removef file))))
    ;; Remove history from past retries
    (when (directory?  (newpath dir "history"))
      (removef (getfiles (newpath dir "history"))))
    ;; Reset anciallary indices
    (if (file-exists? (newpath dir "md5.index"))
	(reset-file-index (newpath dir "md5.index")))
    ;; Remove the urlqueue
    (when (file-exists? (newpath dir "urlqueue"))
      (remove-file (newpath dir "urlqueue")))
    (when (file-exists? (newpath dir "log"))
      (remove-file (newpath dir "log")))
    (when (file-exists? (newpath dir "sleep"))
      (remove-file (newpath dir "sleep")))
    (when (file-exists? (newpath dir "status"))
      (remove-file (newpath dir "status")))))

;;;; Utility functions

(define (reset-file-index file)
  (let ((size (1- (index-size file))))
    (notify "Resetting file index " file " to " size)
    (remove-file file)
    (make-file-index file size)))

(define (removef file)
  (when (file-exists? file)
    (notify "Removing file " file)
    (remove-file file)))
(define (make-link link-origin link-location)
  (cond ((file-exists? link-location)
	 (notify "Clobbering " link-location " with link to " link-origin)
	 (remove-file file)
	 (make-symbolic-link link-origin link-location))
	(else
	 (notify "Creating link from " link-location " to " link-origin)
	 (make-symbolic-link link-origin link-location))))

(define (add-slash dir)
  (if (has-suffix "/" dir) dir (string-append dir "/")))

;;; $Log:$  

