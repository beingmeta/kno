;;; -*- coding: latin-1 -*-

;; French Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/fr)
(use-module 'morph)
(use-module 'fdtext)

(define known-names (make-hashtable))

(define irregulars
  (read-dtype-from-file (get-component "data/fr-exceptions.dtype")))
(define (irregulars-table tag)
  (let ((map (make-hashtable)))
    (do-choices (irregular irregulars)
      (if (eq? (cadr irregular) tag)
	  (hashtable-set! map (caddr irregular) (car irregular))))
    map))
(define verb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/fr-verb.dtype"))))
(define double-consonant-map
  (alist->hashtable
   '(("appeller" . "appeler")
     ("rappeller" . "rappeler")
     ("jetter" . "jeter")
     ("rejetter" . "rejeter"))))
(define verb-root (make-rule 'verb-root 'set verb-roots #f))
(define modified-verb-root
  (make-rule 'modified-verb-root 'sequence
	     (list verb-root
		   (make-rule 'cer-root 'suffix-subst
			      '("çer" . "cer")
			      verb-root #f)
		   (make-rule 'ger-root 'suffix-subst
			      '("geer" . "ger")
			      verb-root #f)
		   (make-rule 'oyer-root 'suffix-subst
			      '("oier" . "oyer")
			      verb-root #f)
		   (make-rule 'ayer-root 'suffix-subst
			      '("aier" . "ayer")
			      verb-root #f)
		   (make-rule 'double-consonant 'map
			      double-consonant-map
			      verb-root #f)
		   (make-rule 'e-change 'rewrite
			      #((char-not "è") (subst "è" "e")
				(isalpha+) "er")
			      verb-root #f)
		   (make-rule 'e-change 'rewrite
			      #((char-not "è") (subst "è" "e")
				(isalpha+) "er")
			      verb-root #f)
		   (make-rule 'é-change 'rewrite
			      #((char-not "è") (subst "è" "é")
				(isalpha+) "er")
			      verb-root #f))
	     #f))
(define present-indicative
  (make-rule 'present-indicative 'sequence
	     (list (make-rule 'present-indicative-er 'suffix-subst
			      '({"e" "es" "ons" "ez" "ent"} . "er")
			      verb-root)
		   (make-rule 'present-indicative-ir 'suffix-subst
			      '({"is" "it" "issons" "issez" "issent"} . "ir")
			      verb-root)
		   (make-rule 'present-indicative-re 'suffix-subst
			      '({"s" "" "ons" "ez" "ent"} . "re")
			      verb-root))
	     #f
	     (irregulars-table 'present-indicative)))
(define imperfect-indicative
  (make-rule 'imperfect-indicative 'suffix-subst
	     '({"ais" "ait" "ions" "iez" "aient"} . "ons")
	     present-indicative
	     (irregulars-table 'imperfect-indicative)))

(define simple-past
  (make-rule 'simple-past 'sequence
	     (list (make-rule 'simple-past-er 'suffix-subst
			      '({"ai" "as" "a" "âmes" "âtes" "èrent"} . "er")
			      verb-root)
		   (make-rule 'simple-past-ir-or-re 'suffix-subst
			      '({"is" "it" "îmes" "îtes" "irent"} .
				{"ir" "re"})
			      verb-root))
	     #f
	     (irregulars-table 'simple-past)))

(define verb-stem
  (make-rule 'verb-stem 'sequence
	     (list (make-rule 'verb-stem-ar-ir 'suffix-test
			      '{"er" "ir"} verb-root)
		   (make-rule 'verb-stem-re 'suffix-subst
			      '("r" . "re") verb-root))
	     #f))

(define future
  (make-rule 'future 'suffix
	     '{"ai" "as" "a" "ons" "ez" "ont"}
	     verb-stem
	     (irregulars-table 'future)))
(define conditional
  (make-rule 'conditional 'suffix
	     '{"ais" "ait" "ions" "iez" "aient"}
	     verb-stem
	     (irregulars-table 'future)))

(define past-participle
  (make-rule 'past-participle 'sequence
	     (list (make-rule 'past-participle-er 'suffix-subst
			      '("é" . "er") verb-root)
		   (make-rule 'past-participle-ir 'suffix-subst
			      '("i" . "ir") verb-root)
		   (make-rule 'past-participle-re 'suffix-subst
			      '("u" . "re") verb-root))
	     #f
	     (irregulars-table 'past-participle)))
(define present-participle
  (make-rule 'present-participle 'suffix-subst
	     '("ant" . "ons")
	     present-indicative
	     (irregulars-table 'present-participle)))

(define present-subjunctive
  (make-rule 'present-subjunctive 'suffix-subst
	     '({"e" "es" "ions" "iez" "ent"} . "ant")
	     present-participle
	     (irregulars-table 'present-subjunctive)))

(define imperfect-subjunctive
  (make-rule 'imperfect-subjunctive 'sequence
	     (list (make-rule 'imperfect-subjunctive-er 'suffix-subst
			      '({"asse" "asses" "ât" "assions"
				 "assiez" "assent"}
				. "er")
			      verb-root)
		     (make-rule 'imperfect-subjunctive-ir 'suffix-subst
				'({"isse" "isses" "ît" "issions"
				   "issiez" "issent"}
				  . "ir")
				verb-root)
		     (make-rule 'imperfect-subjunctive-re 'suffix-subst
			      '({"usse" "usses" "ût" "ussions" "ussiez"
				 "ussent"}
				. "re")
			      verb-root))
	     #f
	     (irregulars-table 'imperfect-subjunctive)))

(define verb
  (make-rule 'verb 'sequence
	     (list verb-root
		   past-participle
		   present-participle
		   present-indicative
		   imperfect-indicative
		   simple-past
		   future
		   conditional
		   present-subjunctive
		   imperfect-subjunctive)
	     #f))

(define noun-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/fr-noun.dtype"))))
(define noun-root
  (make-rule 'singular-noun 'set noun-roots #f))
(define feminine-noun
  (make-rule 'feminine-noun 'sequence
	     (list (make-rule #f 'suffix-subst '("e" . "") noun-root)
		   (make-rule #f 'suffix-subst '("anne" . "an") noun-root)
		   (make-rule #f 'suffix-subst '("enne" . "en") noun-root)
		   (make-rule #f 'suffix-subst '("ère" . "er") noun-root)
		   (make-rule #f 'suffix-subst '("euse" . "eur") noun-root)
		   (make-rule #f 'suffix-subst '("trice" . "teur") noun-root))
	     #f))
(define plural-noun
  (make-rule 'plural-noun 'sequence
	     (list (make-rule #f 'suffix-subst '("x" . "x") noun-root)
		   (make-rule #f 'suffix-subst '("s" . "s") noun-root)
		   (make-rule #f 'suffix-subst '("z" . "z") noun-root)
		   (make-rule #f 'suffix-subst '("es" . "") noun-root)
		   (make-rule #f 'suffix-subst '("s" . "") noun-root)
		   (make-rule #f 'suffix-subst '("aux" . {"ail" "al"}) noun-root)
		   (make-rule #f 'suffix-subst '("eaux" . "eau") noun-root)
		   (make-rule #f 'suffix-subst '("eux" . "eu") noun-root)
		   (make-rule #f 'suffix-subst '("oux" . "ou") noun-root))
	     #f))
(define noun
  (make-rule 'noun 'sequence (list plural-noun feminine-noun noun-root) #f))

(define adjective-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/fr-adjective.dtype"))))
(define adjective-root
  (make-rule 'adjective-root 'set adjective-roots #f))
(define feminine-adjective
  (make-rule 'plural-adjective 'sequence
	     (list (make-rule 'feminine-adjective 'suffix-subst '("e" . "")
			      adjective-root)
		   (make-rule #f 'suffix-subst '("euse" . {"eux" "eur"}) adjective-root)
		   (make-rule #f 'suffix-subst '("ve" . "f") adjective-root)
		   (make-rule #f 'suffix-subst '("ère" . "er") adjective-root)
		   (make-rule #f 'suffix-subst '("ille" . "il") adjective-root)
		   (make-rule #f 'suffix-subst '("elle" . "el") adjective-root)
		   (make-rule #f 'suffix-subst '("ulle" . "ul") adjective-root)
		   (make-rule #f 'suffix-subst '("enne" . "en") adjective-root)
		   (make-rule #f 'suffix-subst '("onne" . "on") adjective-root)
		   (make-rule #f 'suffix-subst '("ète" . "et") adjective-root))))
(define plural-adjective
  (make-rule 'plural-adjective 'sequence
	     (list (make-rule #f 'suffix-subst '("es" . "") adjective-root)
		   (make-rule #f 'suffix-subst '("s" . "") adjective-root)
		   (make-rule #f 'suffix-subst '("x" . "x") adjective-root)
		   (make-rule #f 'suffix-subst '("s" . "s") adjective-root)
		   (make-rule #f 'suffix-subst '("aux" . {"eau" "al"}) adjective-root))
	     #f))
(define adjective
  (make-rule 'adjective 'sequence
	     (list feminine-adjective plural-adjective adjective-root) #f))

(define adverb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/fr-adverb.dtype"))))
(define adverb-root
  (make-rule 'adverb-root 'set adverb-roots #f))
(define feminine-adverb
  (make-rule 'plural-adverb 'sequence
	     (list (make-rule 'feminine-adverb 'suffix-subst '("e" . "")
			      adverb-root)
		   (make-rule #f 'suffix-subst '("euse" . {"eux" "eur"}) adverb-root)
		   (make-rule #f 'suffix-subst '("ve" . "f") adverb-root)
		   (make-rule #f 'suffix-subst '("ère" . "er") adverb-root)
		   (make-rule #f 'suffix-subst '("ille" . "il") adverb-root)
		   (make-rule #f 'suffix-subst '("elle" . "el") adverb-root)
		   (make-rule #f 'suffix-subst '("ulle" . "ul") adverb-root)
		   (make-rule #f 'suffix-subst '("enne" . "en") adverb-root)
		   (make-rule #f 'suffix-subst '("onne" . "on") adverb-root)
		   (make-rule #f 'suffix-subst '("ète" . "et") adverb-root))))
(define adverb
  (make-rule 'adverb 'sequence
	     (list feminine-adverb adverb-root) #f))

(define determiners (elts (segment "la le un une")))
(define determiner
  (make-rule 'determiner 'set (choices->hashset determiners)))

(define name
  (make-rule 'name 'rule #((isupper) (islower+)) #f))
(define de (make-rule 'de-variants
		      'set (choices->hashset (elts (segment "de du des")))
		      #f))
(define noun-phrase-pattern
  (choice (vector `(label head ,noun) (qc adjective))
	  (vector `(label head ,noun) de `(label modifier ,(choice noun name)))
	  (vector `(label head ,noun) de determiner `(label modifier ,(choice noun name)))))

(module-export! '{noun verb adjective adverb known-names})
