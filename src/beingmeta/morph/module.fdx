;;; -*- text-encoding: latin1 -*-

(in-module 'morph)

(load-component "rules.fdx")

(define iso-codes
  (alist->hashtable
   '(("english" . "en") ("eng" . "en") ("en" . "en")
     ("français" . "fr") ("francais" . "fr") ("french" . "fr") ("fr" . "fr")
     ("español" . "es") ("espanol" . "es") ("spanish" . "es")
     ("sp" . "es") ("span" . "es") ("es" . "es")
     ("italiano" . "it") ("italian" . "it") ("it" . "it")
     ("suomi" . "fi") ("finnish" "fi") ("fi" . "fi"))))
(define (iso-lookup code)
  (hashtable-get iso-codes (string-downcase code)))
(define (langmod x)
  (cond ((environment? x) x)
	((oid? x) (langmod (get x 'iso639/1)))
	((string? x)
	 (try (get-module (stringout "morph/" x))
	      (get-module (string-append "morph/" (iso-lookup x)))
	      (langmod (find-frames 'brico 'names x))))
	((symbol? x)
	 (get-module (string-append "morph/" (iso-lookup (symbol->string x)))))
	(else (raise-exception 'not-a-language "module" x))))

(define (get-root word pos language)
  (let ((module (langmod language)))
    (if (and (exists? module) module (symbol-bound? pos module))
	(morph-apply (eval pos module) word)
      word)))
(define (get-roots word language)
  (let ((module (langmod language)))
    (if (and (exists? module) module)
	(morph-apply (eval '{noun verb adjective adverb} module)
		     word)
	(fail))))
(define (get-tagged-roots word language)
  (let ((module (langmod language)))
    (if (and (exists? module) module)
	(for-choices (part-of-speech '{verb noun adjective adverb})
	  (list (morph-apply (eval part-of-speech module)) part-of-speech))
	(fail))))

(define (test-language word-list language)
  (let ((n-words (length word-list)) (native 0) (total 0))
    (do ((words word-list (cdr words))
	 (total 0 (1+ total)))
	((or (null? words) (> (- total native) (/ n-words 2)))
	 (> (- total native) (/ n-words 2)))
      (if (exists? (get-roots (car words) language))
	  (set! native (+ 1 native))))))

(define (guess-language string)
  (let ((words (qc (elts (segment string)))))
    (choice (test-language words 'english)
	    (test-language words 'français)
	    (test-language words 'español)
	    (test-language words 'italiano))))

(module-export! '{langmod})
(module-export! '{get-root get-roots get-tagged-roots})
(module-export! '{guess-language})
(module-export! '{noun-root verb-root adjective-root adverb-root})


