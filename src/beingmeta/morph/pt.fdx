;;; -*- coding: latin-1 -*-

;; Portuguese Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/pt)
(use-module 'morph)
(use-module 'fdtext)

(define verb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/pt-verb.dtype"))))
(define irregular-verbs (make-hashtable))

(define verb-root
  (make-rule 'verb-root 'set verb-roots))
(define ortho-variant-verb-root
  (make-rule 'orth-variant-verb-root
	     'suffix-subst
	     (qc '{("quar" . "car") ("guar" . "gar") ("car" . "çar") ("çer" . "cer")
		   ("jer" . "ger") ("ger" "guer") ("jir" "gir") ("guir" "guir")})
	     verb-root))
(define radical-variant-verb-root
  (make-rule 'orth-variant-verb-root
	     'suffix-subst
	     (qc '{("eiar" . "ear") ("iir" . "eir") ("uir" . "oir")})
	     verb-root))
(define virtual-verb-root
  (make-rule 'virtual-verb-root 'sequence
	     (list verb-root ortho-variant-verb-root radical-variant-verb-root)))

(define past-participle
  (make-rule 'past-participle 'sequence
	     (list (make-rule 'past-participle-ar 'rewrite
			      #((isalpha+) (subst "ado" "ar")) virtual-verb-root)
		   (make-rule 'past-participle-er 'rewrite
			      #((isalpha+) (subst "ido" "er")) verb-root)
		   (make-rule 'past-participle-ir 'rewrite
			      #((isalpha+) (subst "ido" "ir")) verb-root))
	     #f))
(define present-participle
  (make-rule 'present-participle 'sequence
	     (list (make-rule 'present-participle-ar 'suffix-subst
			      '("ando" . "ar") verb-root)
		   (make-rule 'present-participle-er 'suffix-subst
			      '("endo" . "er") verb-root)
		   (make-rule 'present-participle-ir 'suffix-subst
			      '("indo" . "ir") verb-root))
	     #f))
(define present-indicative
  (make-rule 'present-indicative 'sequence
	     (list (make-rule 'present-indicative-ar 'suffix-subst
			      '({"o" "as" "a" "amos" "ais" "am"} . "ar") verb-root)
		   (make-rule 'present-indicative-er 'suffix-subst
			      '({"o" "es" "e" "emos" "eis" "em"} . "er") verb-root)
		   (make-rule 'present-indicative-ir 'suffix-subst
			      '({"o" "es" "e" "imos" "is" "em"} . "ir") verb-root))
	     #f))

(define imperfect-indicative
  (make-rule 'imperfect-indicative 'sequence
	     (list (make-rule 'imperfect-indicative-ar 'suffix-subst
			      '({"ava" "avas" "ávamos" "áveis" "avam"} . "ar") verb-root)
		   (make-rule 'imperfect-indicative-er 'suffix-subst
			      '({"ia" "ias"  "íamos" "íeis" "iam"} . "er") verb-root)
		   (make-rule 'imperfect-indicative-ir 'suffix-subst
			      '({"ia" "ias"  "íamos" "íeis" "iam"} . "ir") verb-root))
	     #f))

(define preterit
  (make-rule 'preterit 'sequence
	     (list (make-rule 'preterit-ar 'suffix-subst
			      '({"ei" "aste" "ou" "ámos" "astes" "aram"} . "ar") virtual-verb-root)
		   (make-rule 'preterit-er 'suffix-subst
			      '({"i" "este" "eu" "emos" "estes" "eram"} . "er") virtual-verb-root)
		   (make-rule 'preterit-ir 'suffix-subst
			      '({"i" "iste" "iu" "imos" "istes" "iram"} . "ir") virtual-verb-root))
	     #f))

(define future
  (make-rule 'future 'suffix
	     (qc '{"ei" "ás" "á" "emos" "eis" "ão"})
	     virtual-verb-root))
(define conditional
  (make-rule 'conditional 'suffix
	     (qc '{"ia" "ias" "íamos" "íeis" "iam"})
	     verb-root))

(define present-subjunctive
  (make-rule 'preterit 'sequence
	     (list (make-rule 'preterit-ar 'suffix-subst
			      '({"e" "es" "emos" "eis" "em"} . "ar") verb-root)
		     (make-rule 'preterit-er 'suffix-subst
				'({"a" "as" "amos" "ais" "am"} . "er") verb-root)
		     (make-rule 'preterit-ir 'suffix-subst
				'({"a" "as" "amos" "ais" "am"} . "ir") verb-root))
	     #f))

(define imperfect-subjunctive
  (make-rule 'imperfect-subjective 'suffix-subst
	     '({"sse" "sses" "ssemos" "sseis" "ssem"}
	       . "ram")
	     preterit
	     #f))

(define future-subjunctive
  (make-rule 'imperfect-subjective 'suffix-subst
	     '({"r" "res" "rmos" "rdes" "rem"} . "ram")
	     preterit))

(define base-verb
  (make-rule 'verb 'choice
	     (qc verb-root
		 past-participle
		 present-participle
		 present-indicative
		 imperfect-indicative
		 preterit
		 future
		 conditional
		 present-subjunctive
		 imperfect-subjunctive
		 future-subjunctive)
	     #f irregular-verbs))

(define verb-with-stuff
  (make-rule 'verb-with-pronouns 'rewrite
	     #((isalpha+) (subst (+ #("-" (isalpha+))) ""))
	     base-verb))

(define verb
  (make-rule 'verb-with-pronouns 'sequence
	     (list base-verb verb-with-stuff)))

(define noun-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/pt-noun.dtype"))))
(define noun-root
  (make-rule 'singular-noun 'set noun-roots #f))
(define plural-noun
  (make-rule 'plural-noun 'sequence
	     (list (make-rule 'simple-plural 'suffix-subst '("s" . "") noun-root)
		   (make-rule 'rz-plural 'suffix-subst
			      (qc '{("res" . "r") ("zes" . "z")}) noun-root)
		   (make-rule 's-plural 'suffix-subst
			      (qc '{("s" . "s") ("ses" . "s")}) noun-root)
		   (make-rule 'm-plural 'suffix-subst '("ns" . "m") noun-root)
		   (make-rule 'm-plural 'suffix-subst '("ns" . "m") noun-root)
		   (make-rule 'vl-plural 'suffix-subst
			      (qc '{("ais" . "al") ("eis" . "el") ("ois" . "ol") ("uis" . "ul") })
			      noun-root)
		   		   (make-rule 'm-plural 'suffix-subst '("ns" . "m") noun-root)
		   (make-rule 'il-plural 'suffix-subst (qc '{("is" . "il") ("eis" . "il") })
			      noun-root)
		   (make-rule 'aõ-plural 'suffix-subst
			      (qc '{("ões" . "aõ") ("ãos" . "aõ") ("ães" . "aõ")})
			      noun-root))))
(define noun
  (make-rule 'noun 'sequence (list plural-noun noun-root) #f))

(define adjective-roots
  (choices->hashset (read-dtype-from-file (get-component "data/pt-adjective.dtype"))))
(define adjective-root
  (make-rule 'adjective-root 'set adjective-roots #f))
(define feminine-exceptions
  (alist->hashtable '(("boa" . "bom") ("má" . "mau") ("duas" . "dois"))))
(define feminine-adjective
  (make-rule 'feminine-adjective 'sequence
	     (list (make-rule 'o-adjective 'suffix-subst '("a" . "o") adjective-root)
		   ;; removed no-op rule
		   ;; (make-rule 'o-adjective 'suffix-subst '("e" . "e") adjective-root)
		   ;; also ending in consonants
		   (make-rule 'national-adjective 'suffix-subst '("a" "") adjective-root)
		   (make-rule 'aõ-adjective 'suffix-subst '("ã" "ão") adjective-root)
		   (make-rule 'eu-adjective 'suffix-subst '("eia" "eu") adjective-root)
		   (make-rule 'u-adjective 'suffix-subst '("ua" "u") adjective-root)
		   (make-rule 'irregulars 'table feminine-exceptions adjective-root))
	     #f))
(define adjective-base
  (make-rule 'adjective-base 'sequence (list feminine-adjective adjective-root)))
(define plural-adjective
  (make-rule 'plural-adjective 'sequence
	     (list (make-rule 'simple-plural 'suffix-subst '("s" . "") adjective-base)
		   (make-rule 'rz-plural 'suffix-subst
			      (qc '{("res" . "r") ("zes" . "z")}) adjective-base)
		   (make-rule 's-plural 'suffix-subst
			      (qc '{("s" . "s") ("ses" . "s")}) adjective-base)
		   (make-rule 'm-plural 'suffix-subst '("ns" . "m") adjective-base)
		   (make-rule 'vl-plural 'suffix-subst
			      (qc '{("ais" . "al") ("eis" . "el") ("ois" . "ol") ("uis" . "ul") })
			      adjective-base)
		   (make-rule 'il-plural 'suffix-subst (qc '{("is" . "il") ("eis" . "il") })
			      adjective-base)
		   (make-rule 'aõ-plural 'suffix-subst
			      (qc '{("ões" . "aõ") ("ãos" . "aõ") ("ães" . "aõ")})
			      adjective-base))))
(define adjective
  (make-rule 'adjective 'sequence (list plural-adjective adjective-base)))

(define known-names (make-hashtable))

(define definite-articles (elts (segment "o s os as")))
(define indefinite-articles (elts (segment "um uma uns umas")))
(define determiners (choice definite-articles indefinite-articles))
(define determiner
  (make-rule 'determiner 'set (choices->hashset determiners)))

(define simple-conjunctions
  (elts (segment "e mas ou quer nem que se")))
(define complex-conjunctions
  (elts (segment "tanto como não porque pois")))
(define conjunctions (choice simple-conjunctions complex-conjunctions)
  (elts (segment "e mas ou quer nem que se tanto como não porque pois")))
(define conjunction (make-rule 'conjunction 'set (choices->hashset conjunctions)))

(define prepositions
  (choice (elts (segment "a ante após até com conforme consoante contra de"))
	   (elts (segment "desde durante em entre excepto para perante por"))
	   (elts (segment "segundo sem sob sobre"))
	   ;; Preposition+article
	   (elts (segment "do da dos das"))
	   (elts (segment "no na nos nas"))
	   (elts (segment "ao à aos às"))
	   (elts (segment "pelo pela pelos pelas"))
	   (elts (segment "num numa nuns numas"))
	   (elts (segment "dum duma duns dumas"))))
(define preposition (make-rule 'preposition 'set (choices->hashset prepositions)))

(define simple-pronouns
  (choice (elts (segment "eu tu você ele ela nós vós vocês eles elas"))
	  (elts (segment "me te o a nos vos os as"))
	  (elts (segment "me te lhe nos vos lhes"))
	  (elts (segment "mim ti se ele ela nós vós vocês eles elas"))
	  (elts (segment "mim ti se ele ela nós vós vocês eles elas"))))
(define complex-pronouns
  (choice (elts (segment "meu minha meus minhas"))
	  (elts (segment "teu tua teus tuas"))
	  (elts (segment "seu sua seus suas"))
	  (elts (segment "nosso nossa nossos nossas"))
	  (elts (segment "vosso vossa vossos vossas"))
	  (elts (segment "este esta estes estas"))
	  (elts (segment "esse essa esses essas"))
	  (elts (segment "aquele aquela aqueles aquelas"))
	  (elts (segment "isto isso aquilo"))
	  (elts (segment "deste desta destes destas"))
	  (elts (segment "desse dessa desses dessas"))
	  (elts (segment "neste nesta nestes nestas"))
	  (elts (segment "nesse nessa nesses nessas"))
	  (elts (segment "daquele daquela daqueles daquelas"))
	  (elts (segment "àquele àquele àqueles àquelas"))
	  (elts (segment "naquele naquela naqueles naquelas"))
	  (elts (segment "disto disso daquilo"))
	  "àquilo" (elts (segment "nisto nisso naquilo"))
	  (elts (segment "que quem onde qual quais"))
	  (elts (segment "cujo cuja cujos cujas"))
	  (elts (segment "quanto quanta quantos quantas"))

	  (elts (segment "algo alguém certo certa certos certas"))
	  (elts (segment "tal tais cada vários várias bastante bastantes"))
	  (elts (segment "muito muita muitos muitas todo toda todos todas tudo"))
	  (elts (segment "pouco pouca poucos poucas"))
	  (elts (segment "nenhum nehuma nenhuns nenhumas ninguém nada"))))

(define stop-words
  (choice determiners simple-pronouns simple-conjunctions
	  prepositions conjunctions complex-pronouns complex-conjunctions))
(define glue-words
  (choice prepositions conjunctions complex-pronouns complex-conjunctions))

(define name
  (make-rule 'name 'rule #((isupper) (islower+)) #f))
(define de (make-rule 'de-variants
		      'set (choices->hashset (elts (segment "de do da dos das")))
		      #f))

;; This is baed on morph rules
(define noun-phrase-pattern
  (choice (vector (qc noun) (qc adjective))
	  (vector (qc noun) de (qc noun name))
	  (vector (qc noun) de determiner (qc noun name))))
;; This is just based on syntax and assumes that the morph rules have
;; already done their proofing
(define noun-phrase-parser
  (choice #((label head (isalpha+)) (spaces) (label amodifier (isalpha+)))
	  `#((label head (isalpha+)) ,(elts (segment "de do da dos das"))
	     {(label nmodifier (chunk #((isalpha+) (* #((spaces) (isalpha+))))))
	      (label nmodifier
		     (chunk #((isupper) (islower+)
			      (* #((spaces) (isupper) (islower+))))))})
	  `#((label head (isalpha+))
	     ,(elts (segment "de do da dos das")) ,determiners
	     {(label nmodifier (chunk #((isalpha+) (* #((spaces) (isalpha+))))))
	      (label nmodifier (chunk #((isupper) (islower+)
					(* #((spaces) (isupper) (islower+))))))})))
(define adverb-roots
  (choices->hashset
   (read-dtype-from-file (get-component "data/pt-adverb.dtype"))))
(define adverb-root
  (make-rule 'adverb-root 'set adverb-roots #f))
(define adjectival-adverb
  (make-rule 'adjectival-adverb 'suffix-subst '("mente" . "") feminine-adjective #f))
(define adverb
  (make-rule 'adverb 'sequence (list adjectival-adverb adverb-root) #f))
 
(define compound-pattern-1 ; "Secretary of State"
  #((spaces*)
    (label head (chunk (* (capword)))) (spaces)
    (+ #((lword) (spaces)))
    (+ (capword)) (rest)))
(define compound-pattern-2 ; "Executive Director of the ACLU"
  #((spaces*)
    (label head (chunk #((capword)))) (spaces)
    (+ #((capword) (spaces)))
    (+ #((lword) (spaces)))
    (+ (capword)) (rest)))
(define compound-pattern-3 ; "Agencia Estado"
  #((spaces*)
    (label head (chunk (capword)))
    (+ #((capword) (spaces)))))
;; This is for imported names
(define compound-pattern-4 ; "Young Men's Christian Association"
  #((spaces*)
    (+ #((capword) (spaces)))
    (label head (chunk (capword)))))

(define compound-patterns
  (list compound-pattern-1
	compound-pattern-2
	compound-pattern-3
	compound-pattern-4))

(define name-glue {"E" "Ou"})

(define head-at-end #f)

(module-export! '{noun verb adjective adverb stop-words glue-words name-glue
		       noun-phrase-pattern noun-phrase-parser
		       compound-patterns head-at-end})
