;; -*- coding: latin-1 -*-

;; Finnish Morphology
;;  Copyright (C) 2001 Kenneth Haase, All Rights Reserved

(in-module 'morph/fi)
(use-module 'morph)
(use-module 'fdtext)

(define known-names (make-hashtable))

(define all-words
  (choices->hashset
   (read-dtype-from-file (get-component "data/suomi.dtype"))))

(define vowel {"a" "o" "u" "y" "e" "i" "ä" "ö"})
(define illative-vowel-substs
  (choice (for-choices (v vowel) (cons (string-append v v "n") v))
	  (for-choices (v vowel) (cons (string-append v "h" v "n") v))))
(define double-vowel-substs
  (choice (for-choices (v vowel) (cons v (string-append v v)))))
(define split-double-vowel-substs
  (choice (for-choices (v vowel) `(subst ,(string-append v v) ,v))))
(define double-vowel-s-substs ;; used in nominal stems
  (choice (for-choices (v vowel)
	    (cons (string-append v "s") (string-append v v)))))

(define weak-to-strong
  (choice
   '{(subst "k" "kk")
     (subst "p" "pp")
     (subst "t" "tt")
     (subst "p" "v")}
   `#(,vowel (subst "d" "t"))
   '{(subst "hd" "ht")
     (subst "" "k")
     (subst "nk" "ng")
     (subst "mm" "mp")
     (subst "nn" "nt")
     (subst "ng" "nk")
     (subst "ll" "lt")
     (subst "rr" "rt")}))
(define strong-to-weak
  (choice
   '{(subst "kk" "k")
     (subst "pp" "p")
     (subst "tt" "t")
     (subst "v" "p")}
   `#(,vowel (subst "t" "d"))
   '{(subst "ht" "hd")
     (subst "k" "")
     (subst "ng" "nk")
     (subst "mp" "mm")
     (subst "nt" "nn")
     (subst "nk" "ng")
     (subst "lt" "ll")
     (subst "rt" "rr")}))

;;; All words

(defrule any-word 'set all-words)
(defrule any-name 'rule #((isupper) (islower+)))
(defrule any-root 'sequence (list any-name any-word))
(defrule finnish-stem 'choice
  (qc any-word
      (make-rule 'finnish-stem 'rewrite
		 `#((isalpha+) ,weak-to-strong ,vowel {"" (isalpha+)})
		 any-word)
      (make-rule 'finnish-stem 'rewrite
		 `#((isalpha+) ,strong-to-weak ,vowel {"" (isalpha+)})
		 any-word)))

;;; Special i-stems for verbs

(defrule i-past-stem 'choice
  (qc (make-rule 'stripped-stem 'suffix-test
		 (qc "o" "ö" "u" "y")
		 finnish-stem)
      (make-rule 'stripped-stem 'suffix-subst
		 (qc double-vowel-substs)
		 finnish-stem)
      (make-rule 'stripped-stem 'suffix-subst
		 (qc '{("e" . "ie")
		       ("o" . "uo")
		       ("ö" . "yö")
		       ("" . "e")
		       ("" . "i")
		       ("" . "ä")})
		 finnish-stem)
      ;; This one is over-generative
      (make-rule 'stripped-stem 'suffix-subst
		 (qc '{("" . "a") ("o" . "a")})
		 finnish-stem)))

(defrule i-conditional-stem 'choice
  (qc (make-rule 'stripped-stem 'suffix-test
		      (qc "o" "ö" "u" "y")
		      finnish-stem)
	   (make-rule 'stripped-stem 'suffix-subst
		      (qc double-vowel-substs)
		      finnish-stem)
	   (make-rule 'stripped-stem 'suffix-subst
		      (qc '{("e" . "ie")
			    ("o" . "uo")
			    ("ö" . "yö")
			    ("" . "e")
			    ("" . "i")})
		      finnish-stem)))

(defrule i-superlative-stem 'choice
  (qc (make-rule 'stripped-stem 'suffix-test
		      (qc "o" "ö" "u" "y")
		      finnish-stem)
	   (make-rule 'stripped-stem 'suffix-subst
		      (qc double-vowel-substs)
		      finnish-stem)
	   (make-rule 'stripped-stem 'suffix-subst
		      (qc '{("e" . "ie")
			    ("o" . "uo")
			    ("ö" . "yö")
			    ("" . "e")
			    ("" . "i")
			    ("e" . "i")
			    ("" . "ä")
			    ("" . "a")})
		      finnish-stem)))

;;; Verbs

(defrule known-word 'set all-words)
(define infinitive-stem finnish-stem)
(defrule known-word+grade 'choice
  (qc known-word
      (make-rule 'finnish-stem 'rewrite
		 `#((isalpha+) ,weak-to-strong ,vowel {"" (isalpha+)})
		 known-word)
      (make-rule 'finnish-stem 'rewrite
		 `#((isalpha+) ,strong-to-weak ,vowel {"" (isalpha+)})
		 known-word)))

(define inflectional-stem
  (make-rule 'inflectional-stem 'suffix-subst
	     (qc '{("" . {"a" "ä" "da" "dä" "ta" "tä"
			  "la" "lä" "ra" "rä" "na" "nä"})
		   ("aa" . "ata")
		   ("ää" . "ätä")
		   ("e" . {"ta" "la" "tä" "lä"})
		   ("tse" . {"ta" "tä"})
		   ("ne" . {"ta" "tä"})})
	     known-word+grade))
(define active-verb inflectional-stem)

;;; Passive verbs

(defrule passive-verb 'suffix
  (qc "tta" "ttä" "ta" "tä")
  active-verb)
(defrule passive-verb-stem 'suffix
    ;; taking the a or a off here avoids having to do the    
    ;; i-past-stem logic again, since it's the only case which
    ;; might apply
  (qc "tta" "ttä" "ta" "tä" "t" "tt")
  active-verb)

;;; Tenses and moods

(defrule past-verb-stem 'suffix "i" 
  (qc passive-verb-stem i-past-stem))
(defrule conditional-verb-stem 'suffix "isi" 
  (qc passive-verb-stem i-conditional-stem))
(defrule potential-verb-stem 'suffix "ne" 
  (qc passive-verb-stem active-verb))

;;; We actually handle the imperative lower down because it interacts
;;; so much with person.

;;;; Person 

(defrule finite-verb-stem 'choice
  (qc active-verb passive-verb-stem
      past-verb-stem conditional-verb-stem
      potential-verb-stem)
  #f)

;;; The various personal tenses

(defrule first-singular-finite 'suffix "n" finite-verb-stem)
(defrule second-singular-finite 'suffix "t" finite-verb-stem)
(defrule third-singular-finite 'rewrite
  `#((isalpha+) ,split-double-vowel-substs)
  finite-verb-stem)
(defrule first-plural-finite 'suffix "mme" finite-verb-stem)
(defrule second-plural-finite 'suffix "tte" finite-verb-stem)
(defrule third-plural-finite 'suffix "vat" finite-verb-stem)

;;; Imperative modifications

(defrule second-singular-imperative 'suffix ""
  (qc active-verb passive-verb-stem))
(defrule third-singular-imperative 'suffix
  (qc "koon" "köön")
  (qc active-verb passive-verb-stem))
(defrule first-plural-imperative 'suffix
  (qc "kaamme" "käämme")
  (qc active-verb passive-verb-stem))
(defrule second-plural-imperative 'suffix
  (qc "kaa" "kää")
  (qc active-verb passive-verb-stem))
(defrule third-plural-imperative 'suffix
  (qc "koot" "kööt")
  (qc active-verb passive-verb-stem))

;;;; Adding particles

(defrule finite-verb-stem 'sequence
  (list third-singular-imperative
	first-plural-imperative second-plural-imperative
	third-plural-imperative
	first-singular-finite second-singular-finite
	third-singular-finite
	first-plural-finite second-plural-finite
	third-plural-finite
	second-singular-imperative))
(defrule finite-verb+particle 'suffix
  (qc "kin" "kaan" "kään" "ko" "kö"
	   "han" "hän" "pa" "pä")
  finite-verb-stem)

(defrule finite-verb 'choice
  (qc finite-verb+particle finite-verb-stem)
  finite-verb-stem)

;;;; non-finite verbs

(defrule first-infinitive 'suffix
  (qc "a" "a" "ta" "tä" "da" "dä"
	   "la" "lä" "ra" "rä" "na" "nä")
  infinitive-stem)
(defrule second-infinitive 'suffix
  (qc "e" "de" "te")
  infinitive-stem)
(defrule third-infinitive 'suffix
  (qc "ma" "mä")
  infinitive-stem)

(defrule present-participle 'suffix (qc "va" "vä")
	 active-verb)
(defrule past-participle 'suffix (qc "nut" "nyt")
	 active-verb)

(defrule non-finite-verb 'sequence
  (list past-participle present-participle
	first-infinitive second-infinitive third-infinitive))

(defrule verb 'sequence
  (list finite-verb non-finite-verb))

;;;; Nominals

(defrule singular-stem 'suffix-subst
  (qc '("e" . "i") '("ee" . "e");; The easy ones
	   '("se" . "nen") '("kse" . "s")
	   '({"te" "de"} . "s") '("ks" . "s") '("t" . "s")
	   '({"in" "ime"} . "in")
	   '("ttoma" . "ton") '("ttömä" . "tön")
	   '("ele" . "el") '("ene" . "en")
	   '("ye" . "yt") '("ue" . "ut") '("" . "")
	   double-vowel-s-substs)
  finnish-stem)
(defrule nominative-plural 'suffix "t" singular-stem)

(defrule i-plural-stem 'choice
  (qc (make-rule 'stripped-stem 'suffix-test
		      (qc "o" "ö" "u" "y")
		      finnish-stem)
	   (make-rule 'stripped-stem 'suffix-subst
		      (qc double-vowel-substs)
		      finnish-stem)
		      (make-rule 'stripped-stem 'suffix-subst
				 (qc '{("e" . "ie")
				       ("o" . "uo")
				       ("ö" . "yö")
				       ("" . "e")
				       ("" . "i")
				       ("e" . "i")
				       ("" . "ä")})
				 singular-stem)
		      ;; This one is over-generative
		      (make-rule 'stripped-stem 'suffix-subst
				 (qc '{("" . "a") ("o" . "a")})
				 singular-stem)))

(defrule plural-stem 'suffix (qc {"i" "j"}) i-plural-stem)
(defrule proper-name 'rule #((isupper) (islower+)))
(defrule nominal-stem 'choice
  (make-rule 'nominal-stem 'sequence
	     (list plural-stem singular-stem proper-name)))

(defrule nominative-case 'sequence
  (list nominal-stem nominative-plural))
(defrule genitive-case 'suffix
  (qc "n" "den" "tten")
  nominal-stem)
(defrule accusative-case 'suffix
  (qc "n" "t" "")
  nominal-stem)
(defrule partitive-case 'suffix
  (qc "a" "ä" "ta" "tä" "tta" "ttä")
  nominal-stem)
(defrule inessive-case 'suffix (qc "ssa" "ssä")
  nominal-stem)
(defrule elative-case 'suffix (qc "sta" "stä")
  nominal-stem)
(defrule illative-case 'suffix-subst
  (qc illative-vowel-substs)
  nominal-stem)
(defrule adessive-case 'suffix (qc "lla" "llä")
  nominal-stem)
(defrule ablative-case 'suffix (qc "lta" "ltä")
  nominal-stem)
(defrule allative-case 'suffix "lle"
  nominal-stem)
(defrule essive-case 'suffix (qc "na" "nä")
  nominal-stem)
(defrule translative-case 'suffix "ksi"
  nominal-stem)
(defrule comitative-case-stem 'suffix "ine" nominal-stem)
(defrule instructive-case 'suffix "n" nominal-stem)

;(defrule nominal+case 'choice
;  (qc genitive-case
;	   accusative-case
;	   partitive-case
;	   inessive-case
;	   elative-case
;	   illative-case
;	   adessive-case
;	   ablative-case
;	   allative-case
;	   essive-case
;	   translative-case
;	   instructive-case
;	   nominative-case)
;  #f)
;(defrule case-marked-stem 'choice
;  (qc genitive-case
;	   accusative-case
;	   partitive-case
;	   inessive-case
;	   elative-case
;	   illative-case
;	   adessive-case
;	   ablative-case
;	   allative-case
;	   essive-case
;	   translative-case
;	   instructive-case
;	   comitative-case-stem
;	   nominative-case))
(defrule nominal+case 'suffix
  (qc  "n" "den" "tten"
	    "n" "t" "" "a" "ä" "ta" "tä" "tta" "ttä"
	    "ssa" "ssä"
	    "sta" "stä"
	    "lla" "llä"
	    "lta" "ltä"
	    "lle"
	    "na" "nä"
	    "ksi"
	    "n")
  nominal-stem)
(defrule case-marked-stem 'suffix
  (qc  "n" "den" "tten"
       "n" "t" "" "a" "ä" "ta" "tä" "tta" "ttä"
       "ssa" "ssä"
       "sta" "stä"
       "lla" "llä"
       "lta" "ltä"
       "lle"
       "na" "nä"
       "ksi"
       "ine"
       "n")
  nominal-stem)

(defrule first-singular-possessive 'suffix "ni"
  case-marked-stem)
(defrule second-singular-possessive 'suffix "si"
  case-marked-stem)
(defrule third-singular-possessive 'suffix "nsa"
  case-marked-stem)
(defrule first-plural-possessive 'suffix "mme"
  case-marked-stem)
(defrule second-plural-possessive 'suffix "nne"
  case-marked-stem)
(defrule third-plural-possessive 'suffix "nsa"
  case-marked-stem)

(defrule possessive 'sequence
  (list first-singular-possessive
	second-singular-possessive
	third-singular-possessive
	first-plural-possessive
	second-plural-possessive
	third-plural-possessive))

(defrule particle-form 'suffix
  (qc "kin" "kaan" "kään" "ko" "kö"
      "han" "hän" "pa" "pä")
  (qc possessive case-marked-stem nominal-stem))

(defrule declined-nominal 'choice
  (qc particle-form possessive nominal+case))
(define noun declined-nominal)

(define base-words (make-hashset))
(define (base-word? word)
  (let ((bases (difference (morph-apply (choice noun verb) word)
			   word)))
    (fail? bases)))
(define (get-base-words)
  (let ((i 0))
    (do-choices (word (hashset-elts all-words))
      (let ((isbase (base-word? word)))
	(if isbase  (hashset-add! base-words word))
	(set! i (+ 1 i))
	(lineout i "  " isbase "  " word)))))

(define (read-finnish.dict)
  (let* ((in (open-input-file (get-component "data/finnish.dict")))
	 (words (make-hashset))
	 (entry (readline in)))
    (until (eof-object? entry)
      (unless (capitalized? entry)
	(let ((pos (position #\/ entry)))
	  (if pos
	      (hashset-add! words (subseq entry 0 pos))
	      (hashset-add! words entry))))
      (when (zero? (random 1000)) (lineout entry))
      (set! entry (readline in)))
    words))

(define adjective {})
(define adverb {})

(define compound-noun
  (make-rule 'compound-noun 'compound (list noun noun)))

(define noun-phrase-pattern (vector compound-noun))

(define name noun)

(module-export! '{noun verb adjective adverb name})
(module-export! '{compound-noun noun-phrase-pattern known-names})
