[comment]: # ( -*- Mode: markdown; -*- )
knox(1) -- run a non-interactive Kno script
=========================================

## SYNOPSIS

`knox` [config=val]... <source> [config=val|arg]...

## DESCRIPTION

This invokes the Kno interpreter to load and run a program (indicated
by *source*) after processing any provided config entries. Config
entries have the form **setting**=*value* and may trigger the
execution of procedural *config handlers*.

If *source* is a filename, the file is opened and expressions are read
and evaluated; if *source* is the string '-', expressions are read and
evaluated from the standard input. If those expressions define a
function `main`, `main` is called on the command line *args*
(excluding config entries).

**exec modules**: if *source* starts with a colon (`:`), it refers to
a Scheme module which will be loaded into the `knox` session using the
normal search paths as modified by the config entries. If the loaded
module exports a `main` procedure, that procedure is applied to the
command line *args* (excluding config entries).

Some config entries may generate useful side-effects defined by either
the Kno core or loaded modules. Some useful built-in config
settings are:

* `CONFIG=`*config file*:
  loads a config file and processes it's entries.

* `MODULES=`*module name*:
  loads a Kno module into the image and the default 
  environment.

* `LOGLEVEL=`*level*:
  specifies the default loglevel for notifications
  where level is either a positive integer or symbolic name (like
  `NOTICE` or `DEBUG` or `INFO`).

* `LOADFILE=`*path*:
  loads the file *path* during startup.

* `LOADPATH=`*path*:
  specifies a search path for modules, as a colon
  separated list of patterns where the '%' character is replaced by
  the module name. For example `/opt/mods/%/module.scm:/opt/mods/%:`
  causes the system to look for a module `foo/x` in
  `/opt/mods/foo/x/module.scm` and `/opt/mods/foo/x.scm`. Paths can be
  relative to the current directory by starting with '.' and can also
  include ~home directory references.

## DIAGNOSTICS

Returns 0 when exiting normally, 1 otherwise. It also displays a short
preamble on starting and reports its time and memory usage on exit.

## IMPLEMENTING SCRIPTS

On Unix systems, `knox` can be used with a *shebang* in executable
script files, so that Kno source file is executable and starts with:

`#!/usr/bin/knox LOGLEVEL=5`

or

`#!/usr/bin/env knox LOGLEVEL=5`

knox will read the file after processing the arguments in the
initial line (such as loglevel).


## FILES

Unlike `knoc`, the interactive Kno console, `knox` does not read the
user's `.knoconfig` file, though this can be specified by the
**CONFIG** config setting.

## ENVIRONMENT

As with most Kno programs, config variables for `knox` can be
set through environment variables prefixed with `KNO`, so `KNO_LOGLEVEL`
will set the default loglevel.

# AUTHOR

Ken Haase <kh@beingmeta.com>

## SEE ALSO

knoc(1), kno_config(8)

