;;; Init stuff

(gset! %debug #t)

(define displayed-node-types '{primitive special-form variable})

(define docdb-dir "/src/framerd/docs/db/")
(define framerd-logo "/images/framerd-logo")
(define autodoc.css "autodoc.css")

(define dbdocs-pool (use-pool (stringout docdb-dir "docdb")))
(define dbdocs-index (use-index (stringout docdb-dir "docdb")))
(define all-keywords
  (read-dtype-from-file (stringout docdb-dir "keywords.dtype")))

(define (main)
  (cgi-var lookup) (cgi-init query_string script_name)
  (use-browse-script! script_name)
  (cond ((fail? lookup)
	 (if (and (exists? query_string) (string? query_string)
		  (> (length query_string) 0)
		  (eqv? (elt query_string 0) #\@))
	     (browse-responder)
	     (main-page)))
	((eq? lookup 'keyword) (keyword-search-responder))
	((eq? lookup 'text) (text-search-responder))
	((eq? lookup 'symbol) (symbol-search-responder))))

;;; Responders

(define (keyword-search-responder)
  (cgi-var keywords)
  (generate-page "Symbols under topic keywords " keywords
		 (pick (find-frames dbdocs-index 'keywords keywords)
		   'type displayed-node-types)))
								
(define (symbol-search-responder)
  (cgi-var symbol approximate)
  (if (exists? approximate)
      (generate-page "Symbols containing " symbol
		     (pick (find-frames dbdocs-index '{symbol aliases} (elts (apropos symbol)))
		       'type displayed-node-types))
      (generate-page "The symbol " symbol
		     (pick (find-frames dbdocs-index '{symbol aliases} symbol)
		       'type displayed-node-types))))

(define (text-search-responder)
  (cgi-init textquery)
  (let ((scores (make-hashtable)))
    (do-choices (key (elts (segment textquery)))
      (hashtable-increment!
       scores (pick (find-frames dbdocs-index 'textkeys
				 (choice key (string-downcase key)
					 (english-stem (string-downcase key))))
		'type displayed-node-types)))
    (generate-page "Search on text string" textquery (hashtable-max scores))))

(define (browse-responder)
  (cgi-init query_string)
  (let ((oid (read-from-string query_string)))
    (generate-page "Documentation of" (get oid 'symbol)
	       oid)))

;;; Main page

(define (main-page)
  (cgi-init script_name)
  (httpdoc
    (stylesheet! autodoc.css)
    (TITLE "AutoDoc")
    (TABLE* (ALIGN 'CENTER WIDTH "100%")
	    (TR (TH* (ALIGN 'RIGHT VALIGN 'TOP) (image framerd-logo))
		(TH* (ALIGN 'LEFT VALIGN 'TOP)
		     (SPAN (CLASS "autodoc") "AutoDOC") (br)
		     "Automatic FDScript Documentation")
		(FORM (ACTION script_name)
		      (TH* (ALIGN 'LEFT COLSPAN 3 VALIGN 'TOP)
			   (span (class "widgethead") "Find Symbol")
			   (br)
			   (cgipass 'lookup 'symbol)
			   (INPUT TYPE 'TEXT NAME 'symbol SIZE 24) (br)
			   (INPUT TYPE 'CHECKBOX NAME 'APPROXIMATE)
			   "&nbsp;&nbsp; Also try similar symbols"))
		(FORM (ACTION script_name)
		      (TH* (ALIGN 'LEFT COLSPAN 3 VALIGN 'TOP)
			   (span (class "widgethead") "Search Text")
			   (BR)
			   (cgipass 'lookup 'text)
			   (INPUT TYPE 'TEXT NAME 'TEXTQUERY SIZE 32) (br)
			   "Enter English Keywords"))))
    (BR CLEAR 'LEFT)
    (TABLE* (ALIGN 'CENTER WIDTH "100%")
	    (TR )
	    (FORM (ACTION script_name)
		  (cgipass 'lookup 'keyword)
		  (TR (TD* (ALIGN 'CENTER COLSPAN 6) (HR)))
		  (TR (TD* (ALIGN 'CENTER COLSPAN 2)
			   (INPUT TYPE 'SUBMIT VALUE "Find Relevant"))
		      (TH* (ALIGN 'CENTER COLSPAN 2)
			   (span (class "widgethead") "Category Search"))
		      (TD* (ALIGN 'CENTER COLSPAN 2)
			   (INPUT TYPE 'RESET VALUE "Reset Selections")))
		  (TR (TH* (ALIGN 'CENTER COLSPAN 6)
			   (doseq (kword (sorted all-keywords))
			     (html (input type 'checkbox name 'keywords value kword)
				   "&nbsp;&nbsp;" (TT kword) " "))))))))

;;; Page generation

(define (generate-page type . page-args)
  (let ((name (car page-args)) (nodes (cadr page-args)))
    (httpdoc
      (title (stringout "Documentation " type " " name))
      (stylesheet! autodoc.css)
      (table* (WIDTH "100%")
	(TR
	 (TH* (ALIGN 'LEFT VALIGN 'TOP) (image framerd-logo))
	 (TH* (ALIGN 'LEFT VALIGN 'TOP)
	      type (br) (SPAN (CLASS "autodoc") name)
	      (if (> (set-size nodes) 1)
		  (html (BR) (set-size nodes) " findings")
		  (html (BR) "One result")))))
      (HR)
      (table* (WIDTH "100%")
	(doseq (fcn (sorted nodes (lambda (x) (get x 'symbol))))
	  (if (generate-fcn-doc fcn)
	      (TR (TD* (COLSPAN 3) (HR)))))))))

(define (arg-cdr l)
  (if (pair? l)
      (let ((tl (cdr l)))
	(if (pair? tl)
	    (if (symbol? (car tl)) tl (arg-cdr tl))
	  tl))
    l))
(define (args-length l)
  (if (null? l) 0
      (if (pair? l)
	  (do ((i 0 (+ i 1))
	       (l l (arg-cdr l)))
	      ((not (pair? l)) (if (null? l) i (+ i 1))))
	  1)))

;; Generating documentation pages

(define reference-slots
  (amb (cons "R<sup>4</sup>RS" 'r4rs-ref)))

(define (implementation-field node)
  (when (and (exists? (get node 'implemented-in))
	     (exists? (get node 'implemented-by)))
    (tr (th* (ALIGN 'RIGHT VALIGN 'TOP) "Implemented by")
	(TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
	(td (strong (tt (get node 'implemented-by)))
	    " in the file \"" (em (tt (get node 'implemented-in))) "\""))))

(define (documentation-field node)
  (tr (TH* (ALIGN 'RIGHT VALIGN 'TOP) "Documentation")
      (TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
      (TD (try (get node 'documentation) "None"))))

(define (keyword-field node script_name)
  (tr (th* (ALIGN 'RIGHT VALIGN 'TOP) "Keywords")
      (TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
      (td (do-results (keywd (get node 'keywords))
	    (html
	     (ANCHOR (scripturl script_name 'lookup 'keyword 'keywords keywd)
		     (strong keywd)) " &nbsp;&nbsp;&nbsp; ")))))

(define (reference-field node)
  (tr (th* (ALIGN 'RIGHT VALIGN 'TOP) "References")
      (TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
      (td (do-results (slot reference-slots)
	    (unless (empty? (get node (cdr slot)))
	      (anchor (stringout "/docs/" (get node (cdr slot)))
		      (car slot)))))))

(define (generate-cproc-doc node)
  (cgi-init script_name)
  (let ((symbol  (get node 'symbol)))
    (if (> (length (symbol->string symbol)) 15)
	(TR (TH* (COLSPAN 3 ALIGN 'LEFT)
		 (anchor node  (font (size "+2") symbol)))))
    (tr (TH* (ALIGN 'LEFT VALIGN 'TOP)
	     (if (<= (length (symbol->string symbol)) 15)
		 (anchor node (font (size "+2") symbol))
		 ""))
	(TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
	(TD (table* (CELLPADDING 3)
	      (TR (TD "") (TH "Procedure")
		  (TD " with ")
		  (TH* (COLSPAN (args-length (get node 'arglist)))
		       "parameters"))
	      (TR (TD (TT "("))
		  (TH* (ALIGN 'LEFT) (TT (get node 'symbol)))
		  (TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
		  (do ((args (get node 'arglist) (arg-cdr args))
		       (types (get node 'argtypes) (arg-cdr types)))
		      ((not (pair? args))
		       (unless (null? args)
			 (td* (align 'right) "...&nbsp;" args)))
		    (td* (align 'left) (strong (car args))))
		  (TD (TT ")")))
	      (TR (TD "")
		  (TD* (ALIGN 'LEFT VALIGN 'TOP)
		       "returns" (br) (em (get node 'value-type)))
		  (TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
		  (do ((args (get node 'arglist) (arg-cdr args))
		       (types (get node 'argtypes) (arg-cdr types)))
		      ((not (pair? args))
		       (unless (null? args)
			 (if (symbol? types)
			     (td* (ALIGN 'RIGHT)
				  "indefinite args of type" (br)
				  (em types))
			     (td* (ALIGN 'RIGHT)
				  "indefinite args"))))
		    (td* (ALIGN 'LEFT VALIGN 'TOP)
			 "must be" (br) (em (car types))))
		  (td ""))))))
  (documentation-field node)
  (keyword-field node script_name)
  (implementation-field node)
  (reference-field node))
				      
(define (generate-special-form-doc node)
  (cgi-init script_name)
  (let ((symbol  (get node 'symbol)))
    (if (> (length (symbol->string symbol)) 15)
	(TR (TH* (COLSPAN 3 ALIGN 'LEFT)
		 (anchor node (font (size "+2") symbol)))))
    (tr (TH* (ALIGN 'LEFT VALIGN 'TOP)
	     (if (<= (length (symbol->string symbol)) 15)
		 (anchor node (font (size "+2") symbol))
		 ""))
	(TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
	(TH "is a special form"))
    (documentation-field node)
    (keyword-field node script_name)
    (implementation-field node)
    (reference-field node)))
  
(define (generate-variable-form-doc node)
  (cgi-init script_name)
  (let ((symbol  (get node 'symbol)))
    (if (> (length (symbol->string symbol)) 15)
	(TR (TH* (COLSPAN 3 ALIGN 'LEFT)
		 (anchor node (font (size "+2") symbol)))))
    (tr (TH* (ALIGN 'LEFT VALIGN 'TOP)
	     (if (<= (length (symbol->string symbol)) 15)
		 (anchor node (font (size "+2") symbol))
		 ""))
	(TD "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
	(TH "is a variable"))
    (documentation-field node)
    (keyword-field node script_name)
    (reference-field node)))

(define (generate-fcn-doc node)
  (let ((type (get node 'type)))
    (case type
      (primitive (generate-cproc-doc node) #t)
      (special-form (generate-special-form-doc node) #t)
      (variable (generate-variable-form-doc node) #t)
      (else #f))))



