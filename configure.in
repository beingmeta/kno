AC_INIT(include/fdb/dtype.h)
threads_default="yes"
shared_default="yes"
shared_suffix="so"
tls_default="no"
global_ipeval_default="no"
enable_fdweb_default="no"
enable_texttools_default="no"
install_dir_opts="-d -m 0775"
install_file_opts="-m 0664"
install_exe_opts="-m 0775"
libc_pthreads="no"
libc_dlopen="no"
curlo=""
curlconfig=""
curl_default="no"
exifo=""
doi18n="no"
exif_default="no"
dynamic_cflag="-rdynamic"
xstatic_exe_libs=""
xstatic_scheme_libs=""
xdynamic_scheme_libs=""
scheme_builtins_init="fd_init_fdscheme()"
suffix=""
DREENTRANT="-D_REENTRANT"
MKSTATIC="ld -r -o"
TESTLDFLAGS=
EXELDFLAGS=
SHARED_LIB_TARGET=shared-libs
VERSION=3
I18N=""
INSTALLI18N=""
apache_modules_dir="/usr/lib/apache2/modules"
apache_conf_dir="/etc/apache2"
A2EN="none"

AC_CONFIG_AUX_DIR(etc)
AC_CONFIG_HEADER(include/fdb/config.h)
AC_PREFIX_DEFAULT(/usr/local)

AC_SUBST(install_dir_opts)
AC_SUBST(install_file_opts)
AC_SUBST(install_exe_opts)
AC_SUBST(shared_suffix)
AC_SUBST(dynamic_cflag)
AC_SUBST(curlconfig)
AC_SUBST(curlo)
AC_SUBST(exifo)
AC_SUBST(suffix)
AC_SUBST(xstatic_exe_libs)
AC_SUBST(xstatic_scheme_libs)
AC_SUBST(xdynamic_scheme_libs)
AC_SUBST(scheme_builtins_init)
AC_SUBST(data_dir)
AC_SUBST(module_dir)
AC_SUBST(safe_module_dir)
AC_SUBST(config_dir)
AC_SUBST(apache_modules_dir)
AC_SUBST(apache_conf_dir)

AC_SUBST(DREENTRANT)
AC_SUBST(SHARED_LIB_TARGET)
AC_SUBST(SHARED_LIB)
AC_SUBST(SHARED_LIBV)
AC_SUBST(TESTLDFLAGS)
AC_SUBST(EXELDFLAGS)
AC_SUBST(VERSION)
AC_SUBST(PROFILING)
AC_SUBST(MKSTATIC)
AC_SUBST(I18N)
AC_SUBST(INSTALLI18N)

AC_CANONICAL_HOST
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROG(VALGRIND,valgrind)
AC_CHECK_PROGS(APXS,apxs apxs2)
AC_AIX

apache_conf_dir=`$APXS -q SYSCONFDIR`
apache_modules_dir=`$APXS -q LIBEXECDIR`

if test $doi18n = "yes"; then
  I18N="i18n"
  INSTALLI18N="install-i18n"
fi

gcc_version=`gcc -dumpversion`

case $gcc_version in
  4*)
   CFLAGS="-Wno-pointer-sign $CFLAGS"
  ;;
esac

case $host_os in
  darwin*)
   MKSTATIC="libtool -static -o "
   LIBS="$LIBS -lgcc"
   dynamic_cflag="-dynamic"
   shared_suffix="dylib"
   ifmacosx=""
   ;;
esac  

AC_DEFINE(FD_WORDS_ARE_ALIGNED,1)
AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_C_INLINE
AC_C_BIGENDIAN
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(long,4)
AC_CHECK_SIZEOF(long long,8)
AC_CHECK_SIZEOF(void *,4)

AC_HEADER_STDC
AC_HEADER_STAT

dnl Various directory/path configuration options

AC_ARG_WITH(suffix,--with-suffix string,,with_suffix="")
suffix=$with_suffix

AC_ARG_WITH(data_dir,--with-data-dir location,,with_data_dir=$prefix/share/framerd)
AC_DEFINE_UNQUOTED(FD_DATA_DIR,"$with_data_dir")
data_dir=$with_data_dir

AC_ARG_WITH(config_dir,--with-config-dir location,,with_config_dir=$with_data_dir/config)
AC_DEFINE_UNQUOTED(FD_CONFIG_FILE_PATH,"$with_config_dir/%")
config_dir=$with_config_dir

AC_ARG_WITH(module_dir,--with-module-dir location,,with_module_dir=$with_data_dir/scm)
module_dir=$with_module_dir
AC_DEFINE_UNQUOTED(FD_DEFAULT_LOADPATH,"$with_module_dir/%/module.scm:$with_module_dir/%.scm")

AC_ARG_WITH(safe_module_dir,--with-safe-module-dir location,,with_safe_module_dir=$with_data_dir/scm/safe)
safe_module_dir=$with_safe_module_dir
AC_DEFINE_UNQUOTED(FD_DEFAULT_SAFE_LOADPATH,"$with_safe_module_dir/%/module.scm:$with_safe_module_dir/%.scm")

AC_ARG_WITH(dload_path,--with-dload-path location,,with_dload_path=$with_data_dir/lib/%.$shared_suffix:$with_data_dir/lib/lib%.$shared_suffix:$prefix/lib/%.$shared_suffix:$prefix/lib/lib%.$shared_suffix:/lib/%.$shared_suffix:/lib/lib%.$shared_suffix:)
AC_DEFINE_UNQUOTED(FD_DEFAULT_DLLOADPATH,"$with_dload_path")

AC_ARG_WITH(boot_config,--with-boot-config configstring,,with_boot_config="")
AC_DEFINE_UNQUOTED(FD_BOOT_CONFIG,"$with_boot_config")

if test $exec_prefix = "NONE"; then
  AC_DEFINE_UNQUOTED(FD_EXEC,"$prefix/bin/fdexec")
  AC_DEFINE_UNQUOTED(FD_DBSERVER,"$prefix/bin/fdbserver")
else
  AC_DEFINE_UNQUOTED(FD_EXEC,"$exec_prefix/bin/fdexec")
  AC_DEFINE_UNQUOTED(FD_DBSERVER,"$prefix/bin/fdbserver")
fi

AC_ARG_WITH(i18n,--with[out]-i18n built and install message catalogs,,with_i18n="no")
if test $with_i18n = "yes"; then
  AC_CHECK_FUNCS(gettext,[doi18n="yes"])
fi
if test $doi18n = "yes"; then
  I18N="i18n"
  INSTALLI18N="install-i18n"
fi

AC_CHECK_FUNCS(sigprocmask)
AC_CHECK_FUNCS(sigsetmask)
AC_CHECK_FUNCS(strdup strndup)
AC_CHECK_FUNCS(flock)
AC_CHECK_FUNCS(sleep)
AC_CHECK_FUNCS(nanosleep)
AC_CHECK_FUNCS(fseeko)
AC_CHECK_FUNCS(mmap)

dnl Build the shared libraries.  
AC_ARG_ENABLE(shared,--en[able]-shared Build with/without shared libraries,,enable_shared=$shared_default)
if test $enable_shared = "yes"; then
  CFLAGS="-fPIC $CFLAGS"
  SHARED_LIB_TARGET=shared-libs
else
  SHARED_LIB=
  SHARED_LIBV=
  SHARED_LIB_TARGET=
fi

dnl When available, use the thread-optimized tcmalloc functions from
dnl   Google perftools
AC_ARG_WITH(tcmalloc,--with[out]-tcmalloc Use the Google malloc library,,with_tcmalloc="no")
if test $with_tcmalloc = "yes"; then
  AC_CHECK_LIB(tcmalloc,malloc)
fi

AC_CHECK_FUNCS(dlopen,libc_dlopen="yes")
if test $libc_dlopen != "yes"; then
   AC_CHECK_LIB(dl,dlopen)
fi

AC_CHECK_FUNCS(pthread_create,libc_pthreads="yes")
if test $libc_pthreads != "yes"; then
   AC_CHECK_LIB(pthread,pthread_create)
   AC_CHECK_LIB(c_r,pthread_create)
   AC_CHECK_LIB(pthreads,pthread_create)
   AC_CHECK_HEADERS(pthread.h)
else
   AC_CHECK_HEADERS(pthread.h)
   threads_default="yes";
fi

dnl If possible, compile for multi-threaded execution.  This both makes
dnl  the library threadsafe and enables Scheme primitives for spawning threads
dnl  and parallel execution
AC_ARG_ENABLE(threads,--en/disable-threads Enable multi-threading,,enable_threads=$threads_default)
if test $enable_threads = "yes"; then
  REENTRANT=-D_REENTRANT	
  AC_DEFINE(FD_THREADS_ENABLED,1)
else
  AC_DEFINE(FD_THREADS_ENABLED,0)
fi


dnl Compile for access to large files, essentially defining off_t as 64 bits.
dnl  Note that the basic FramerD/fdb data files are still limited to 4GB, but
dnl  this lets you use all 4GB.
AC_ARG_ENABLE(largefiles,--en/disable-largefiles Enable use of large (> 2GB) file support,,enable_largefiles=yes)
if test $enable_largefiles = "yes"; then
  AC_DEFINE(FD_LARGEFILES_ENABLED,1)
else
  AC_DEFINE(FD_LARGEFILES_ENABLED,0)
fi

AC_CHECK_LIB(u8,_u8_sgetc)

dnl This compiles a version to be used with the GNU profiling tools
AC_ARG_ENABLE(profiling,--en/disable-profiling compile to generate profile information,,enable_profiling="no")
if test $enable_profiling = "yes"; then
  AC_DEFINE(FD_PROFILING_ENABLED,1)
  PROFILING="-O0 -pg -fno-inline -fprofile-arcs -ftest-coverage"
else 
  PROFILING=""
fi

dnl This is used to disable the simplest automatic database prefetches.
dnl This is almost only used to configure for benchmarking prefetch mechanisms
dnl against the base case of no prefetches at all.
AC_ARG_ENABLE(prefetching,--en/disable-prefetching make frame operations prefetch when they can,,enable_prefetching="yes")
if test $enable_prefetching = "yes"; then
  AC_DEFINE(FD_PREFETCHING_ENABLED,1)
else
  AC_DEFINE(FD_PREFETCHING_ENABLED,0)
fi

dnl This builds in Scheme level profiling for the interpreter.  When not used,
dnl  the cost is negligible.
AC_ARG_ENABLE(calltrack,--en/disable-calltrack enable internal scheme profiling,,enable_calltrack="yes")
if test $enable_calltrack = "yes"; then
  AC_DEFINE(FD_CALLTRACK_ENABLED,1)
else
  AC_DEFINE(FD_CALLTRACK_ENABLED,0)
fi

dnl This makes all executables have stdio-based schemeio builtin.  Disabling
dnl  this might make sense for handheld and some embedded contexts,  but
dnl  you'll probably need to replace some things
AC_ARG_ENABLE(schemeio,--en/disable-schemeio compiled-in schemeio,,enable_schemeio="yes")
if test $enable_schemeio = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_schemeio()"
  xdynamic_scheme_libs="$xdynamic_scheme_libs -lfdschemeio${suffix}"
  xstatic_exe_libs="lib/libfdschemeio${suffix}.a $xstatic_exe_libs"
  xstatic_scheme_libs="../../lib/libfdschemeio${suffix}.a $xstatic_scheme_libs"
fi

dnl This integrates the fdweb module into executables by default; otherwise
dnl  it is built and installed as a plugin library
AC_ARG_ENABLE(fdweb,--en/disable-fdweb compiled-in fdweb,,enable_fdweb=$enable_fdweb_default)
if test $enable_fdweb = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_fdweb()"
  xdynamic_scheme_libs="$xdynamic_scheme_libs -lfdweb${suffix}"
  xstatic_exe_libs="lib/libfdweb${suffix}.a $xstatic_exe_libs"
  xstatic_scheme_libs=" ../../lib/libfdweb${suffix}.a $xstatic_scheme_libs"
fi

dnl This integrates the texttools module into executables by default; otherwise
dnl  it is built and installed as a plugin library
AC_ARG_ENABLE(texttools,--en/disable-texttools compiled-in texttools,,enable_texttools=$enable_texttools_default)
if test $enable_texttools = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_texttools()"
  xdynamic_scheme_libs="-ltexttools $xdynamic_scheme_libs"
  xstatic_exe_libs="lib/libtexttools.a $xstatic_exe_libs"
  xstatic_scheme_libs=" ../../lib/libtexttools.a $xstatic_scheme_libs"
fi

dnl ***********************************
dnl *** Checks for working __thread ***
dnl ***********************************
AC_MSG_CHECKING(for working __thread)
AC_TRY_COMPILE([
            #include <pthread.h>
            __thread int i;
	    static int res1, res2;
	],[
	     void thread_main (void *arg)
	     {
		i = arg;
		sleep (1);
		if (arg == 1) res1 = (i == arg);
		else res2 = (i == arg);
	     }

	     int main () {
		pthread_t t1, t2;
 		i = 5;
		pthread_create (&t1, NULL, thread_main, 1);
		pthread_create (&t2, NULL, thread_main, 2);

		pthread_join (t1, NULL);
		pthread_join (t2, NULL);
		return !(res1 + res2 == 2);
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_THREAD_STORAGE_CLASS)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working __builtin_expect ***
dnl ***********************************
AC_MSG_CHECKING(for working __builtin_expect)
AC_TRY_COMPILE([],[
	     int main (int argc,char *argv[]) {
                if (__builtin_expect((argc>2),1)) return 0;
                else return 1;
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BUILTIN_EXPECT)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working __builtin_prefetch ***
dnl ***********************************
AC_MSG_CHECKING(for working __builtin_prefetch)
AC_TRY_COMPILE([],[
	     static int data[]={0,1,2,3};

	     int main (int argc,char *argv[]) {
                __builtin_prefetch(&data[2],0,3);
		return 0;
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BUILTIN_PREFETCH)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working constructor attributes ***
dnl ***********************************
AC_MSG_CHECKING(for working __constructor_attributes)
AC_TRY_COMPILE([],[
             int tmpinit(void) __attribute__ ((constructor));

	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CONSTRUCTOR_ATTRIBUTES)],
	       [AC_MSG_RESULT(no)])

dnl This forces the use of the threadlocal storage functions from the pthreads
dnl  library.  Otherwise, the executable will use __thread storage declarations
dnl  when available
AC_ARG_WITH(tls,--with[out]-tls Force use of threadlocal storage,,with_tls=$tls_default)
if test $with_tls = "yes"; then
  AC_DEFINE(FD_FORCE_TLS,1)
else
  AC_DEFINE(FD_FORCE_TLS,0)
fi

dnl This forces the use of a global lock for ipeval, which can reduce
dnl  parallellism  but may help track down subtle bugs
AC_ARG_WITH(global_ipeval,--with[out]-global-ipeval Use global lock and variables for ipeval,,with_global_ipeval=$global_ipeval_default)
if test $with_global_ipeval = "yes"; then
  AC_DEFINE(FD_GLOBAL_IPEVAL,1)
else
  AC_DEFINE(FD_GLOBAL_IPEVAL,0)
fi

dnl Build with primitives accessing libcurl, if it is available
AC_CHECK_LIB(curl,curl_easy_init,curl_default="yes")
AC_ARG_WITH(curl,--with[out]-curl Use libcurl in fdweb,,with_curl=$curl_default)
if test $with_curl = "yes"; then
  AC_CHECK_LIB(curl,curl_easy_init)
  AC_CHECK_HEADERS(curl/curl.h)
  AC_DEFINE(FD_WITH_CURL,1)
  curlo="src/fdweb/curl.o"
  curlconfig="\`curl-config --libs\`"
else
  AC_DEFINE(FD_WITH_CURL,0)
fi

dnl Build with primitives accessing libexif, if it is available
AC_CHECK_LIB(exif,exif_data_new_from_data,exif_default="yes")
AC_ARG_WITH(exif,--with[out]-exif Use libexif in fdweb,,with_exif=$exif_default)
if test $with_exif = "yes"; then
  AC_CHECK_LIB(exif,exif_data_new_from_data)
  AC_CHECK_HEADERS(libexif/exif-data.h)
  AC_DEFINE(FD_WITH_EXIF,1)
  exifo="src/fdweb/exif.o"
else
  AC_DEFINE(FD_WITH_EXIF,0)
fi

dnl Specifies a framerd group; files written by installation scripts will
dnl owned by this group and the group will have full rwX access.
AC_ARG_WITH(framerd_group,--with[out]-framerd-group Install files with framerd group and group write permissions,,with_framerd_group="none")
if test $with_framerd_group != "none"; then
  install_dir_opts="-g $with_framerd_group $install_dir_opts"
  install_file_opts="-g $with_framerd_group $install_file_opts"
  install_exe_opts="-g $with_framerd_group $install_exe_opts"
fi

dnl Enables the retrieval of config information from the filesystem.
dnl  In particular, a config directory contains files whose names are
dnl  config parameter names and whose contents are the values of those
dnl  same parameters
AC_ARG_ENABLE(fileconfig,--en/disable-file-based configuration,,enable_fileconfig="yes")
if test $enable_fileconfig = "yes"; then
  LIBS="$LIBS -lu8io"
  AC_DEFINE(FD_FILECONFIG_ENABLED,1)
else
  AC_DEFINE(FD_FILECONFIG_ENABLED,0)
fi

dnl Compiles with full unicode data, especially character info etc.
dnl   Compiling without this may reduce the memory footprint a little
dnl   or (when linking statically) decrease the executable size
AC_ARG_WITH(u8data,--with[out]-u8data Use full Unicode data libraries,,with_u8data="yes")
if test $with_u8data = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; u8_init_chardata_c()"
  LIBS="$LIBS -lu8data"
fi

AC_DEFINE_UNQUOTED(FD_SCHEME_BUILTINS,$scheme_builtins_init)

AC_OUTPUT(makefile 
          tests/dtype/makefile tests/db/makefile tests/scheme/makefile
	  etc/fdsetconfig etc/fdgetconfig etc/framerd-rc.d
	  etc/OSXStartupItem/FramerD
	  etc/fdserv.conf etc/fdserv.load
	  src/scripts/repack-index)

chmod a+x etc/fdsetconfig etc/fdgetconfig etc/framerd-rc.d src/scripts/repack-index


