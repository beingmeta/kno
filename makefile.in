# -*- Mode: Makefile; -*-
# Copyright Â© 2004-2020 beingmeta, inc
# This file is a part of beingmeta's Kno implementation

CC		  = @CC@
SYSROOT		  = @SYSROOT@
XCFLAGS		  =
OPTFLAGS	  = "@OPTFLAGS@"
XOPTFLAGS	  = "@XOPTFLAGS@"
ARCHFLAGS	  = @archflags@
WARNFLAGS	  = -Wno-unused-label -Wno-multichar
EXECFLAGS	  = @CFLAGS@ ${WARNFLAGS} ${OPTFLAGS} @MALLOC_FLAGS@ @DREENTRANT@ \
		    @PROFILING@ @GCOV_CFLAGS@ \
		    -I./include -I./DIY/include $(XCFLAGS) $(ARCHFLAGS)
DYNAMIC_CFLAG	  = @dynamic_cflag@
CFLAGS		  = -I./include @CFLAGS@ ${WARNFLAGS} ${OPTFLAGS} -Ikno_root/DIY/include \
		    @MALLOC_FLAGS@ @PROFILING@ @GCOV_CFLAGS@ @DREENTRANT@ \
		    @PTHREAD_LIBS@ $(DYNAMIC_CFLAG) \
		    -I./include -I./DIY/include $(XCFLAGS)  $(ARCHFLAGS)
RPATH		  = @rpath@
RPATHFLAGS	  = @RPATHFLAGS@
LDFLAGS		  = -L./ -L./lib -L./DIY/lib @LDFLAGS@ @PTHREAD_LIBS@ @GCOV_LDFLAGS@ \
		    $(XLDFLAGS)
KNOVERSION	 := $(shell cat ./etc/base_version)
DYLIB_FLAGS	  = -compatibility_version @KNO_MAJOR@.@KNO_MINOR@ -current_version ${KNOVERSION}
EXEFLAGS	  = @EXEFLAGS@
EXELIBS		  = @EXELIBS@
STATIC_CFLAGS	  = -I./include @CFLAGS@ @PROFILING@ @DREENTRANT@ -DKNO_STATIC \
		    $(DYNAMIC_CFLAG) -I./include $(XCFLAGS) -I./DIY/include
DEBUG_CFLAGS	  = -DKNO_TESTCONFIG=1 -DKNO_DEFAULT_LIBSCM="\"@abs_top_srcdir@/src/libscm\"" ${STATIC_CFLAGS}
STATIC_LDFLAGS	  = -L./lib -I./DIY/lib @LDFLAGS@ $(EFENCE) @GCOV_LDFLAGS@ \
		    @STATICLDFLAGS@ -L./lib
TEST_LDFLAGS	  = ${STATIC_LDFLAGS} @TESTLDFLAGS@
TEST_EXEFLAGS	  = @EXEFLAGS@
LIBSOURCE	  = @LIBSOURCE@
SHAREDEXE	  = @SHAREDEXE@
STATICEXE	  = @STATICEXE@
XLIBS		  =
LIBS		  = $(XLIBS) @LIBS@
PATH		  = @BINPATH@
DEBBUILD	  = -b
INDENTOPTS	  = -br -ce -psl -Tknodtype -Tu8_string \
		    -Tkno_stream -Tkno_inbuf -Tkno_outbuf \
		    -Tkno_rawbuf -Tkno_function -Tkno_pair \
		    -Tkno_choice
GCOVR_FLAGS	  = -e "./src/cmodules/" -e "./src/exe/" -e "./tests/libtests/"
PYLIBS		  = -lknowebtools -lknotexttools -lkno ${LIBS}

DESTDIR		  =
PACKAGE		  = kno
prefix		  = @prefix@
exec_prefix	  = @exec_prefix@
datarootdir	  = @datarootdir@
datadir		  = @datadir@
INCINSTALLDIR	  = $(DESTDIR)@prefix@/include/kno@suffix@
LIBINSTALLDIR	  = $(DESTDIR)@libdir@
BININSTALLDIR	  = $(DESTDIR)@exec_prefix@/bin
LOCALEDIR	  = $(DESTDIR)@exec_prefix@/share/locale
DATADIR		  = $(DESTDIR)@datadir@/kno@suffix@/data
MANDIR		  = $(DESTDIR)@mandir@
DOCDIR		  = $(DESTDIR)@docdir@
CMODULES	  = ${LIBINSTALLDIR}/kno@suffix@
APXS		  = @APXS@ -S LIBEXECDIR=$(DESTDIR)@apache_modules_dir@
PPROF_PATH	  = @GOOGLE_PPROF@
CLEAN		  = @CLEAN@
ECHO		  = @ECHO@
GZIP		  = @GZIP@
MSG		  = @MSG@
SUINSTALL	  = @SUINSTALL@
SYSINSTALL	  = ${SUINSTALL} @INSTALL@ @install_file_opts@
SYSINSTALLDIR	  = ${SUINSTALL} @INSTALL@ @install_exe_opts@ -d
SYSINSTALLEXE	  = ${SUINSTALL} @INSTALL@ @install_exe_opts@
DOSETUP	          = @setup_target@
SUDO		  = @SUDO@
INSTALL		  = @INSTALL@
GZINSTALL	  = ${SUINSTALL} ${GZIP} -cf
MKSTATIC	  = @MKSTATIC@ -o 
CODENAME	  = @CODENAME@
REL_BRANCH	:= $(shell ./etc/getbuildopt REL_BRANCH current)
REL_STATUS	:= $(shell ./etc/getbuildopt REL_STATUS stable)
REL_PRIORITY	:= $(shell ./etc/getbuildopt REL_PRIORITY medium)
MKSO		  = $(CC) -shared @GCOV_CFLAGS@ $(LDFLAGS)
MACLIBTOOL	  = $(CC) -dynamiclib -single_module -undefined dynamic_lookup \
			$(LDFLAGS)

LIBSCM		  = @LIBSCM@
BUILD		  = `pwd`
RPMFLAGS	  = @RPMFLAGS@
RPMDIR		  = @RPMDIR@
GPG		  = @GPG@
GPGID		  = ${OVERRIDE_GPGID:-@GPGID@}
RPMGPG		  = %__gpg gpg --force-v3-sigs --digest-algo=sha1 -u \"%{_gpg_name}\" --no-armor --no-secmem-warning -sbo %{__signature_filename} %{__plaintext_filename}
APT_INCOMING	  = dev.beingmeta.com:/srv/repo/@REPONAME@/apt/incoming/@CODENAME@/

BUILDMODE	:= $(shell if test -f ./buildmode; then cat ./buildmode; else echo none; fi)
LINKEDWITH	:= $(shell cat .malloc 2> /dev/null || echo standard libraries)
APKREPO		:= $(shell ./etc/getbuildopt APKREPO /srv/repo/kno/apk)
APTVERSION	:= $(shell @U8BIN@u8_gitversion etc/base_version)
GITBRANCH	:= $(shell @U8BIN@u8_gitbranch)
ARCH		:= $(shell ./etc/getbuildopt BUILD_ARCH || uname -m || echo x86_64)
APK_ARCH_DIR	:= ${APKREPO}/staging/${ARCH}

LISP_HEADERS=\
 include/kno/knosource.h			\
 include/kno/config.h				\
 include/kno/configs.h				\
 include/kno/common.h				\
 include/kno/errobjs.h				\
 include/kno/errors.h				\
 include/kno/defines.h				\
 include/kno/support.h				\
 include/kno/numbers.h				\
 include/kno/bigints.h				\
 include/kno/malloc.h				\
 include/kno/lisp.h				\
 include/kno/pprint.h				\
 include/kno/ptr.h				\
 include/kno/cons.h				\
 include/kno/typeinfo.h				\
 include/kno/compounds.h			\
 include/kno/choices.h				\
 include/kno/tables.h				\
 include/kno/sequences.h			\
 include/kno/knoregex.h				\
 include/kno/bufio.h				\
 include/kno/xtypes.h				\
 include/kno/dtypeio.h				\
 include/kno/getsource.h
APPLY_HEADERS=\
 include/kno/apply.h   \
 include/kno/futures.h   \
 include/kno/cprims.h	\
 include/kno/stacks.h  \
 include/kno/lexenv.h  \
 include/kno/ffi.h
STORAGE_HEADERS=\
 include/kno/components/storage_layer.h \
 include/kno/streams.h			\
 include/kno/storage.h			\
 include/kno/pools.h			\
 include/kno/indexes.h			\
 include/kno/bloom.h			\
 include/kno/dtproc.h			\
 include/kno/dtcall.h			\
 include/kno/frames.h			\
 include/kno/sql.h			\
 include/kno/methods.h

DRIVERS_H=include/kno/drivers.h
SCHEME_HEADERS=include/kno/eval.h include/kno/threads.h \
	include/kno/opcodes.h include/kno/seqprims.h \
	include/kno/procprims.h include/kno/ports.h
LIB_HEADERS=include/kno/texttools.h include/kno/webtools.h

# Headers which don't live in include/kno
SRC_HEADERS=src/lisp/biginternals.h		\
	src/eval/eval_internals.h		\
	src/apply/apply_internals.h		\
	src/exe/webcommon.h			\
	src/drivers/headers/zcompress.h		\
	src/drivers/headers/filepool.h		\
	src/drivers/headers/fileindex.h		\
	src/drivers/headers/hashindex.h		\
	src/drivers/headers/bigpool.h		\
	src/drivers/headers/logindex.h		\
	src/drivers/headers/kpool.h		\
	src/drivers/headers/kindex.h		\
	src/drivers/headers/netindex.h		\
	src/drivers/headers/netpool.h

LISP_OBJS=\
	src/lisp/oids.o						\
	src/lisp/symbols.o src/lisp/cons.o src/lisp/typeinfo.o	\
	src/lisp/recycle.o src/lisp/copy.o			\
	src/lisp/compare.o src/lisp/walk.o			\
	src/lisp/tables.o src/lisp/sequences.o			\
	src/lisp/choices.o src/lisp/numbers.o			\
	src/lisp/compounds.o src/lisp/misctypes.o		\
	src/lisp/parse.o src/lisp/unparse.o			\
	src/lisp/bufio.o src/lisp/pprint.o			\
	src/lisp/listing.o src/lisp/consblocks.o		\
	src/lisp/dtread.o src/lisp/dtwrite.o src/lisp/xtypes.o	\
	src/lisp/lisp.o

SYS_OBJS=						\
	src/sys/buildinfo.o src/sys/support.o		\
	src/sys/configs.o src/sys/errobjs.o		\
	src/sys/logging.o src/sys/getopt.o		\
	src/sys/startup.o src/sys/fluid.o		\
	src/sys/signals.o src/sys/posix.o		\
	src/sys/sourcebase.o src/sys/getsource.o	\
	src/sys/history.o

APPLY_OBJS=\
	src/apply/apply.o src/apply/stacks.o			\
	src/apply/ffi.o src/apply/cprims.o			\
	src/apply/lexenv.o src/apply/exec.o			\
	src/apply/dispatch.o src/apply/sql.o 			\
	src/apply/services.o src/apply/futures.o

VERSION_H   =include/kno/kno_version.h
CONFIG_H     =include/kno/config.h
CONFIG_HDRS  =${VERSION_H} ${CONFIG_H}

STORAGE_OBJS=\
	src/storage/storage.o src/storage/streams.o		\
	src/storage/hashdtype.o src/storage/compress.o	\
	src/storage/pools.o src/storage/indexes.o		\
	src/storage/aggregates.o				\
	src/storage/bloom.o src/storage/alcor.o			\
	src/storage/methods.o src/storage/oidstore.o		\
	src/storage/cachecall.o src/storage/threadcache.o	\
	src/storage/extindex.o src/storage/extpool.o		\
	src/storage/procpool.o src/storage/procindex.o		\
	src/storage/mempool.o src/storage/tempindex.o		\
	src/storage/frames.o src/storage/slotindexes.o		\
	src/storage/drivers.o src/storage/dbserv.o		\
	@ipevalo@ 

DRIVER_OBJS=\
	src/drivers/builtin_drivers.o src/drivers/knosocks.o	\
	src/drivers/kpool.o src/drivers/kindex.o		\
	src/drivers/netpool.o src/drivers/netindex.o		\
	src/drivers/filepool.o src/drivers/fileindex.o		\
	src/drivers/logindex.o src/drivers/zipsource.o		\
	src/drivers/hashindex.o src/drivers/bigpool.o		\
	src/drivers/zip.o

CORE_SCHEME_OBJS=		\
	src/eval/eval.o		\
	src/eval/vm.o		\
	src/eval/qonsts.o	\
	src/eval/debug.o	\
	src/eval/options.o	\
	src/eval/testops.o	\
	src/eval/appenv.o	\
	src/eval/binders.o	\
	src/eval/lambda.o	\
	src/eval/macros.o	\
	src/eval/threads.o	\
	src/eval/quasiquote.o	\
	src/eval/struct_eval.o	\
	src/eval/errfns.o	\
	src/eval/conditionals.o \
	src/eval/iterators.o	\
	src/eval/repl.o

SCHEME_OBJS=\
	$(CORE_SCHEME_OBJS)	\
	src/eval/modules.o	\
	src/eval/load.o		\
	src/eval/reflection.o	\
	src/eval/typeops.o	\
	src/eval/choiceops.o	\
	src/eval/evalops.o	\
	src/eval/coreops.o	\
	src/eval/tableops.o	\
	src/eval/configops.o	\
	src/eval/srvcall.o	\
	src/eval/arith.o	\
	src/eval/regex.o	\
	src/eval/promises.o	\
	src/eval/requests.o	\
	src/eval/knosockd.o	\
	src/prims/dbprims.o	\
	src/prims/tableprims.o	\
	src/prims/seqprims.o	\
	src/prims/stringprims.o \
	src/prims/portprims.o	\
	src/prims/logprims.o	\
	src/prims/streamprims.o \
	src/prims/dtypeprims.o	\
	src/prims/xtypeprims.o	\
	src/prims/timeprims.o	\
	src/prims/sysprims.o	\
	src/prims/procprims.o	\
	@ipevalopso@		\
	src/prims/sqlprims.o	\
	src/prims/fileprims.o	\
	src/prims/driverprims.o \
	src/eval/loadmods.o

WEB_OBJS=			\
	src/web/webtools.o	\
	src/web/xmloutput.o	\
	src/web/htmlout.o	\
	src/web/xmlinput.o	\
	src/web/xmldata.o	\
	src/web/mime.o		\
	src/web/email.o		\
	src/web/uriprims.o	\
	src/web/xmleval.o	\
	src/web/cgiexec.o	\
	src/web/json.o		\
	@ldnso@			\
	@curlo@

TEXT_OBJS=			\
	src/text/texttools.o	\
	src/text/match.o	\
	src/text/porter.o	\
	src/text/phonetic.o

PYTHON_OBJS=				\
	src/python/parseltongue.o	\
	src/python/parseltongue2.o

CMODULE_OBJS=src/cmodules/crypto.o	\
	     src/cmodules/sqlite.o	\
	     src/cmodules/testcapi.o

EXECUTABLES=${SHAREDEXE}/knox@suffix@ ${SHAREDEXE}/knoc@suffix@ ${SHAREDEXE}/knocgi@suffix@
STATIC_EXECUTABLES=${STATICEXE}/kno@suffix@ ${STATICEXE}/knoc@suffix@ ${STATICEXE}/knocgi@suffix@
DEBUG_EXECUTABLES=dbg/knox dbg/knoc dbg/knocgi
SHELL_SCRIPTS=src/shell/knosetconfig src/shell/knogetconfig src/shell/knoconfig src/shell/knolaunch \
	      src/shell/knostart src/shell/knostop src/shell/knostartall src/shell/knostopall \
	      src/shell/kno_start_daemons src/shell/kno_start_servlets src/shell/kno_stop_jobs \
	      src/shell/knosignal src/shell/knoinject src/shell/knostatus src/shell/knolog  \
	      src/shell/knorestart src/shell/knoctl src/shell/knogdb src/shell/knodbgexec \
	      src/shell/knocleanup src/shell/knojob src/shell/knobuild \
	      src/shell/flexsplit
SCHEME_SCRIPTS=exe/scripts/knodb exe/scripts/knocall exe/scripts/knoserver \
	       exe/scripts/pack-pool exe/scripts/pack-index exe/scripts/split-index \
	       exe/scripts/merge-indexes exe/scripts/merge-index \
	       exe/scripts/knopkg

CONFDIRS=$(DESTDIR)@config_dir@ $(DESTDIR)@config_dir@/config \
	 $(DESTDIR)@share_dir@ \
	 $(DESTDIR)@local_module_dir@

CLEANDIRS=include/kno src/drivers/headers		\
	src/lisp src/apply src/sys			\
	src/storage src/drivers				\
	src/eval src/prims				\
	src/text src/textmods				\
	src/web src/webmods				\
	src/cmodules src/stdmods			\
	etc

KNO_HEADERS= \
	$(LISP_HEADERS) $(STORAGE_HEADERS) \
	$(APPLY_HEADERS) $(SCHEME_HEADERS) \
	$(DRIVERS_H) $(SRC_HEADERS)

KNO_SOURCES=									\
	src/lisp/cons.c src/lisp/typeinfo.c src/lisp/oids.c src/lisp/symbols.c	\
	src/lisp/copy.c src/lisp/recycle.c src/lisp/misctypes.c			\
	src/lisp/compare.c src/lisp/walk.c					\
	src/lisp/choices.c src/lisp/sequences.c					\
	src/lisp/tables.c src/lisp/compounds.c src/lisp/consblocks.c		\
	src/lisp/bufio.c src/lisp/dtread.c src/lisp/dtread.c src/lisp/xtypes.c	\
	src/lisp/parse.c src/lisp/unparse.c src/lisp/lisp.c			\
	src/sys/buildinfo.c src/sys/sourcebase.c				\
	src/sys/support.c src/sys/configs.c src/sys/posix.c			\
	src/sys/errobjs.c src/sys/logging.c src/sys/getopt.c			\
	src/sys/startup.c src/sys/fluid.c src/sys/signals.c			\
	src/apply/apply.c src/apply/stacks.c src/apply/lexenv.c			\
	src/apply/ffi.c src/apply/sql.c src/apply/exec.c src/apply/dispatch.c 	\
	src/apply/apply_internals.h src/apply/futures.c				\
	src/storage/storage.c src/storage/streams.c src/storage/hashdtype.c	\
	src/storage/drivers.c src/storage/indexes.c src/storage/pools.c		\
	src/storage/oidstore.c	src/storage/frames.c src/storage/slotindexes.c	\
	src/storage/aggregates.c src/storage/cachecall.c src/storage/methods.c	\
	src/storage/alcor.c src/storage/compress.c src/storage/threadcache.c	\
	src/storage/bloom.c src/storage/ipeval.c				\
	src/drivers/builtin_drivers.c						\
	src/drivers/filepool.c src/drivers/kpool.c src/drivers/zipsource.c	\
	src/drivers/fileindex.c src/drivers/kindex.c				\
	src/storage/extindex.c src/storage/tempindex.c				\
	src/storage/mempool.c src/storage/extpool.c				\
	src/drivers/netpool.c src/drivers/netindex.c				\
	src/storage/procpool.c src/storage/procindex.c				\
	src/drivers/hashindex.c src/drivers/bigpool.c				\
	src/drivers/logindex.c							\
	src/eval/eval.c src/eval/vm.c src/eval/opcode_info.h			\
	src/eval/options.c src/eval/appenv.c src/eval/qonsts.c			\
	src/eval/testops.c src/eval/debug.c					\
	src/eval/binders.c src/eval/lambda.c					\
	src/eval/macros.c src/eval/errfns.c					\
	src/eval/conditionals.c src/eval/iterators.c				\
	src/eval/threads.c src/eval/quasiquote.c src/eval/struct_eval.c		\
	src/eval/modules.c src/eval/load.c src/eval/reflection.c		\
	src/eval/typeops.c src/eval/repl.c					\
	src/eval/evalops.c							\
	src/eval/tableops.c							\
	src/eval/coreops.c							\
	src/eval/arith.c							\
	src/eval/regex.c							\
	src/eval/promises.c							\
	src/prims/dbprims.c							\
	src/prims/logprims.c							\
	src/prims/portprims.c							\
	src/prims/streamprims.c src/prims/dtypeprims.c src/prims/xtypeprims.c	\
	src/prims/tableprims.c src/eval/choiceops.c				\
	src/prims/seqprims.c src/prims/stringprims.c				\
	src/prims/fileprims.c src/prims/driverprims.c				\
	src/eval/loadmods.c							\
	src/prims/timeprims.c src/prims/sysprims.c				\
	src/prims/sqlprims.c							\
	src/eval/requests.c src/eval/dteval.c src/eval/configops.c		\
	src/web/webtools.c src/web/json.c src/web/ldns.c			\
	src/web/xmloutput.c src/web/xmlinput.c src/web/xmldata.c		\
	src/web/xmleval.c src/web/cgiexec.c src/web/htmlout.c			\
	src/web/uriprims.c src/web/mime.c src/web/email.c src/web/curl.c	\
	src/text/texttools.c src/text/match.c					\
	src/text/porter.c src/text/phonetic.c					\
	src/exe/knoc.c src/exe/knox.c src/exe/knocgi.c

CMODULE_SOURCES=			\
	src/cmodules/sqlite.c		\
	src/cmodules/gperftools.c	\
	src/cmodules/crypto.c

STATIC_LIBS=lib/libkno@suffix@.a	\
	lib/libknowebtools@suffix@.a	\
	lib/libknotexttools@suffix@.a

LINK_STATIC_LIBS=lib/libkno@suffix@.a	\
	lib/libknowebtools@suffix@.a	\
	lib/libknotexttools@suffix@.a

INSTALL_STATIC=${LIBSOURCE}/libkno@suffix@.a	\
	${LIBSOURCE}/libknowebtools@suffix@.	\
	${LIBSOURCE}/libknotexttools@suffix@.a

SHARED_LIBS=lib/libkno@suffix@.@shared_suffix@			\
	lib/libknowebtools@suffix@.@shared_suffix@		\
	lib/libknotexttools@suffix@.@shared_suffix@		\
	lib/libknowebtools@suffix@.@mshared_suffix@		\
	lib/libknotexttools@suffix@.@mshared_suffix@

INSTALL_SHARED=${LIBSOURCE}/libkno@suffix@.@shared_suffix@		\
	${LIBSOURCE}/libknowebtools@suffix@.@shared_suffix@		\
	${LIBSOURCE}/libknotexttools@suffix@.@shared_suffix@		\
	${LIBSOURCE}/libknowebtools@suffix@.@mshared_suffix@		\
	${LIBSOURCE}/libknotexttools@suffix@.@mshared_suffix@

STRIPPED_LIBS=lib/stripped/libkno@suffix@.a			\
	lib/stripped/libknowebtools@suffix@.a			\
	lib/stripped/libknotexttools@suffix@.a			\
	lib/stripped/libkno@suffix@.@shared_suffix@		\
	lib/stripped/libknowebtools@suffix@.@shared_suffix@	\
	lib/stripped/libknotexttools@suffix@.@shared_suffix@	\
	lib/stripped/libkno@suffix@.@mshared_suffix@		\
	lib/stripped/libknowebtools@suffix@.@mshared_suffix@	\
	lib/stripped/libknotexttools@suffix@.@mshared_suffix@

SCHEME_MODULES=src/stdmods/*.scm \
	src/webmods/aws/*.scm src/webmods/google/*.scm \
	src/webmods/apis/facebook/*.scm src/webmods/apis/twitter/*.scm \
	src/webmods/apis/paypal/*.scm  src/webmods/apis/twilio/*.scm \
	src/webmods/apis/dropbox/*.scm \
	src/stdmods/misc/*.scm src/stdmods/tests/*.scm \
	src/webmods/domutils/*.scm src/stdmods/knodules/*.scm \
	src/textmods/textindex/*.scm src/webmods/json/*.scm src/stdmods/crypto/*.scm \
	src/stdmods/bench/*.scm src/textmods/booktools/*.scm \
	src/brico/*.scm src/brico/build/index/*.scm \
	src/brico/build/*.scm

# These might be neccessary on MacOS
CMODULE_DEPENDS=lib/libkno@suffix@.@shared_suffix@

ALL=testbin exe cmodules @TAGS_TARGET@

# Makefile targets

default: @DEFAULTMAKETARGET@

update: .buildmode
	@if test -f .malloc && test -f .buildmode; then \
	  echo "Updating" $(shell cat .buildmode) "build linked with" \
		$(shell cat .malloc); \
	fi;
	@make TAGS
	@+make -s `cat .buildmode`

normal:
	@echo Building NORMAL configuration
	@make TAGS
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s testbin exe cmodules etc @TAGS_TARGET@

debugging:
	@echo Building DEBUGGING configuration
	@make TAGS
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s XCFLAGS="@debugcflags@ -O0 $(XCFLAGS)		\
		  -Wall ${WARNFLAGS} -Wno-unknown-pragmas	\
		  -DKNO_DEBUGGING_BUILD=1"			\
		  XLDFLAGS="@debugldflags@ $(XLDFLAGS)"		\
		  XOPTFLAGS="-O0" OPTFLAGS="-O0"		\
		  XLIBS="@debuglibs@ $(XLIBS)"			\
	  testbin exe cmodules etc @TAGS_TARGET@

profiling:
	@echo Building PROFILING configuration
	@make TAGS
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s XCFLAGS="@profilecflags@ -O0 -Wall -Wno-unknown-pragmas $(XCFLAGS) -DKNO_PROFILING_BUILD=1 @profiledefines@"	\
		  XLDFLAGS="@profileldflags@ $(XLDFLAGS)"		\
		  XOPTFLAGS="-O0" OPTFLAGS="-O0"		\
		  XLIBS="@debuglibs@ $(XLIBS)"			\
		testbin libs exe cmodules etc @TAGS_TARGET@

optimizing:
	@echo Building OPTIMIZING configuration
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s XCFLAGS="-O3 -DKNO_OPTIMIZING_BUILD=1" testbin exe cmodules etc @TAGS_TARGET@
zooming:
	@echo Building Zooming configuration
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s XCFLAGS="-O3 -g0" testbin exe cmodules etc @TAGS_TARGET@
nitpicking:
	@echo Building NITPICKING configuration
	@if test -f .malloc; then \
	  echo With $(shell cat .malloc) malloc; fi;
	@+make -s XCFLAGS="-Wall -Wno-unknown-pragmas ${XCFLAGS}" testbin exe cmodules etc @TAGS_TARGET@
distribution:
	@echo Building DISTRIBUTION configuration
	@+make -s XCFLAGS="$(XCFLAGS) KNO_DISTRIBUTION_BUILD=1" \
		exe cmodules etc scripts @TAGS_TARGET@

all: testbin debug-exe exe cmodules etc i18n @TAGS_TARGET@
packaged: exe cmodules etc i18n

fresh: clean
	make update
freshdebug dbgfresh freshbug: clean
	make TAGS
	make -s debugging

# Handy targets

debug:
	@if test "${BUILDMODE}" != "debugging"; then echo debugging > .buildmode; fi
	@make -s `cat .buildmode`
nodebug standard usable working:
	@if test "${BUILDMODE}" != "normal"; then echo normal > .buildmode; fi
	@make -s `cat .buildmode`
nitpick:
	@if test "${BUILDMODE}" != "nitpicking"; then echo nitpicking > .buildmode; fi
	@make -s `cat .buildmode`
optimized fast:
	@if test "${BUILDMODE}" != "optimizing"; then echo optimizing > .buildmode; fi
	@make -s `cat .buildmode`
faster:
	@if test "${BUILDMODE}" != "zooming"; then echo zooming > .buildmode; fi
	@make -s `cat .buildmode`
.buildmode:
	@echo normal > .buildmode
showbuildmode showmode showbuild: .buildmode
	@cat .buildmode
cleandebug: clean
	make debug

knocore:    lib/libknocore@suffix@.a
knostorage: lib/libknostorage@suffix@.a
knodrivers: lib/libknodrivers@suffix@.a
knoscheme:  lib/libknoscheme@suffix@.a
knoweb:	    lib/libknowebtools@suffix@.a
knotext:    lib/libknotexttools@suffix@.a
knodb:
	make knocore
	make knostorage
	make knodrivers

# Versioning

VERSION: etc/base_version
	if test -d .git; then				\
	  @U8BIN@u8_gitversion etc/base_version > $@;	\
	elif test -f $@; then				\
	  touch VERSION;				\
	else 						\
	 BASE_VERSION=$$(cat etc/base_version); 		\
	 echo $${BASE_VERSION}.0 > $@;			\
	fi;
FULL_VERSION: etc/base_version VERSION
	if test -d .git; then				\
	  @U8BIN@u8_gitversion etc/base_version -full > $@;	\
	elif test -f $@; then				\
	  touch $@;					\
	else 						\
	 VERSION=$$(cat VERSION); 			\
	 echo $${VERSION}-noinfo > $@;			\
	fi;

include/kno/kno_version.h: VERSION etc/base_version makefile.in
	@BASE_VERSION=$$(cat etc/base_version);						\
	 VERSION=$$(cat VERSION 2>/dev/null || u8_gitversion etc/base_version);		\
	 GIT_VERSION=$$(cat FULL_VERSION 2>/dev/null || 				\
				u8_gitversion etc/base_version -full || 		\
				echo $$VERSION);					\
	 MAJOR_VERSION=$$(echo $${VERSION} | cut - -d '.' -f 1);			\
	 MINOR_VERSION=$$(echo $${VERSION} | cut - -d '.' -f 2);			\
	 PATCHLEVEL=$$(echo $${VERSION} | cut - -d '.' -f 3);				\
	 BRANCH=$$(cat BRANCH 2>/dev/null || u8_gitbranch 2>/dev/null || echo none);	\
	 if [ -z "$${PATCHLEVEL}" ]; then PATCHLEVEL=0; VERSION="$${VERSION}.0"; fi;	\
	 echo "#define KNO_VERSION \"$$VERSION\"" > $@;					\
	 echo "#define KNO_MAJOR_VERSION $$MAJOR_VERSION" >> $@;			\
	 echo "#define KNO_MINOR_VERSION $$MINOR_VERSION" >> $@;			\
	 echo "#define KNO_PATCHLEVEL $$PATCHLEVEL" >> $@;				\
	 echo "#define KNO_SOURCE_BRANCH \"$${BRANCH}\"" >> $@;				\
	 echo "#define KNO_BASE_VERSION \"$${BASE_VERSION}\"" >> $@; 			\
	 echo "#define KNO_BRANCH_VERSION \"kno-$${VERSION}-$${BRANCH}\"" >> $@;	\
	 echo "#define KNO_GIT_VERSION \"$$GIT_VERSION\"" >> $@;

# configure/autoconf stuff

makefile: makefile.in config.status
	if test -x ./config.status; then ./config.status; fi
./config.status: configure
	if test -x ./config.status; then ./config.status --recheck; fi
configure: configure.ac VERSION
	@if test -f .staticautoconf; then \
	    echo "WARNING: configure may be out of date"; \
	else echo "REBUILDING configure"; autoconf; fi
include/kno/config.h: include/kno/config.h.in
	if test -x ./config.status; then ./config.status; fi
	touch $@
include/kno/knosource.h: include/kno/knosource.h.in
	if test -x ./config.status; then ./config.status; fi
	touch $@

tests/libtests/makefile: tests/libtests/makefile.in ./config.status
	./config.status
tests/makefile: tests/makefile.in ./config.status
	./config.status
dbg/.gdbinit: dbg/.gdbinit.in ./config.status
	./config.status
exe/.gdbinit: exe/.gdbinit.in ./config.status
	./config.status

etc: etc/logrotate etc/install-script etc/sysv/kno-rc.d etc/logrotate	\
	dbg/.gdbinit exe/.gdbinit

# Implicit make rules

%.o: %.c ${CONFIG_HDRS}
	@$(CC) $(CFLAGS) -D_FILEINFO="\"$(shell u8_fileinfo ./$< .)\"" -o $@ -c $<
	@$(MSG) CC $@ $<

exe/scripts/%: src/scripts/%.scm
	@$(ECHO) "#!"@prefix@/bin/knox" QUIET=yes" | cat - $< > $@
	@chmod a+x $@
	@$(MSG) MAKESCRIPT $@ $<

exe/%@suffix@: src/exe/%.c ${CONFIG_HDRS}
	$(CC) $(CFLAGS) $(EXEFLAGS) $(LDFLAGS)				\
		-o $@ $<						\
		@xdynamic_scheme_libs@					\
		-lkno@suffix@						\
		-lu8stdio $(LIBS) $(EXELIBS)
	@$(MSG) MKEXE $@ $<

exe/knocgi@suffix@: src/exe/knocgi.c ${CONFIG_HDRS}
	$(CC) $(CFLAGS) $(LDFLAGS) $(EXEFLAGS)				\
		-o $@ $<						\
		@xdynamic_scheme_libs@					\
		-lknotexttools 						\
		-lknowebtools 						\
		-lkno@suffix@						\
		-lu8stdio $(LIBS) $(EXELIBS)
	@$(MSG) MKEXE $@ $<

src/cmodules/%.o: src/cmodules/%.c ${CONFIG_HDRS}
	@$(CC) $(CFLAGS) -o $@ -c $<
	@$(MSG) CC_MODULE  $@ $<
lib/kno/%.so: src/cmodules/%.o # ${CMODULE_DEPENDS}
	@$(MKSO) -L./lib -L./ -o $@ $< ${MODLIBS}
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@$(MSG) MKSO  $@ $<
lib/kno/%.dylib: src/cmodules/%.o ${CMODULE_DEPENDS}
	@$(MACLIBTOOL) -install_name \
		`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) ${MODLIBS} -o $@ $< 
	@$(MSG) MACLIBTOOL  $@ $<l
lib/kno/%.@KNO_MAJOR@.dylib: lib/kno/%.dylib
	@ln -sf $(*F).dylib $@

dbg/%: src/exe/%.c $(LINK_STATIC_LIBS)
	@echo MKEXE_DEBUG $@
	$(CC) $(DEBUG_CFLAGS) -o $@ $< $(LINK_STATIC_LIBS) 	\
	      @STATICLDFLAGS@ $(TEST_LDFLAGS) $(TEST_EXEFLAGS)	\
	      -lu8 -lu8stdio -lu8syslog				\
	      $(LIBS) $(EXELIBS)
dbg/%: ${VERSION_H} ${CONFIG_H} src/exe/main.h src/exe/webcommon.h

etc/%: etc/%.in ./config.status
	@echo "Configuring $@"
	@./config.status

src/%.zip: src/%
	cd $<; zip ../$(@F) -r . -x "*~" -x "#*" -x "*.attic/*" -x ".git*"

# docs/man/%: docs/ronn/%.ronn
#	ronn --roff < $< > $@
# docs/man.html/%.html: docs/ronn/%.ronn
#	ronn --html < $< > $@
# docs/man.html.include/%.html: docs/ronn/%.ronn
#	ronn --fragment < $< > $@

# We can selectively link some executables statically to avoid 
# library dependencies with programs which will typically run as daemons
static/%@suffix@: src/exe/%.c $(LINK_STATIC_LIBS) ${VERSION_H} ${CONFIG_H}
	@echo MKEXE_STATIC $@
	$(CC) $(STATIC_CFLAGS) -o $@ $^ $(STATIC_LDFLAGS) -lu8stdio -lu8syslog $(LIBS) $(EXELIBS)
	@$(MSG) MKEXE_STATIC $@

lib/%@suffix@.a:
	@$(MKSTATIC) $@ $^
	@$(MSG) MKSTATIC $@
lib/lib%@suffix@.so.@KNO_MAJOR@: lib/lib%@suffix@.so
	@ln -sf lib$(*F).so $@
lib/lib%@suffix@.so:
	$(MKSO) -Wl,-soname=$(@F).@KNO_MAJOR@ -Wl,--as-needed -L./lib -L./ \
		-o $@ $^ -lu8 $(MODLIBS) $(XLIBS) $(LIBS)
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@echo MKSO $@ $<
lib/lib%@suffix@.@KNO_MAJOR@.dylib: lib/lib%@suffix@.dylib
	@ln -sf lib$(*F).dylib $@
lib/lib%@suffix@.dylib:
	@$(MACLIBTOOL) -install_name \
		@rpath/lib/`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) -o $@ $^
	@ln -sf lib$(@F) $(@D)/`basename $(@F) .dylib`.@KNO_MAJOR@.dylib
	@$(MSG) MACLIBTOOL $@

lib/stripped/%: lib/%
	@cp $< $@
	@strip $@

exe/stripped/%: exe/%
	@cp $< $@
	@strip $@

static/stripped/%: static/%
	@cp $< $@
	@strip $@

stripped: ${STRIPPED_LIBS}
.PHONY: stripped

$(LIBINSTALLDIR)/%.a: ${LIBSOURCE}/%.a
	@$(SYSINSTALLDIR) $(LIBINSTALLDIR)
	@$(SYSINSTALL) @install_file_opts@ $< $(LIBINSTALLDIR)
	@$(MSG) INSTALL $@

$(LIBINSTALLDIR)/%@suffix@.@vshared_suffix@: ${LIBSOURCE}/%@suffix@.@shared_suffix@
	@echo Installing $@ from $<
	@$(SYSINSTALLDIR) $(@D)
	@$(SYSINSTALLEXE) $< $@
$(LIBINSTALLDIR)/%@suffix@.@mshared_suffix@: $(LIBINSTALLDIR)/%@suffix@.@vshared_suffix@
	@$(SUINSTALL) ln -sf $(*F)@suffix@.@vshared_suffix@ $@
	@$(MSG)	 Linking $@ to $(*F)@suffix@.@vshared_suffix@
$(LIBINSTALLDIR)/%@suffix@.@mmshared_suffix@: $(LIBINSTALLDIR)/%@suffix@.@vshared_suffix@
	@$(SUINSTALL) ln -sf $(*F)@suffix@.@vshared_suffix@ $@
	@$(MSG)	 Linking $@ to $(*F)@suffix@.@vshared_suffix@
$(LIBINSTALLDIR)/%@suffix@.@shared_suffix@: $(LIBINSTALLDIR)/%@suffix@.@vshared_suffix@
	@$(SUINSTALL) ln -sf $(*F)@suffix@.@vshared_suffix@ $@
	@$(MSG)	 Linking $@ to $(*F)@suffix@.@vshared_suffix@

${CMODULES}/%.@vshared_suffix@: ${LIBSOURCE}/kno/%@suffix@.@shared_suffix@
	@echo Installing $@
	@$(SYSINSTALLDIR) $(@D)
	@$(SYSINSTALLEXE) $< $@
${CMODULES}/%@suffix@.@mmshared_suffix@: ${CMODULES}/%@suffix@.@vshared_suffix@ 
	@$(SUINSTALL) ln -sf $(*F).@vshared_suffix@ $@
	@$(MSG)	 Linking $@ to $(*F).@vshared_suffix@
${CMODULES}/%@suffix@.@mshared_suffix@: ${CMODULES}/%@suffix@.@vshared_suffix@ 
	@$(SUINSTALL) ln -sf $(*F).@vshared_suffix@ $@
	@$(MSG)	 Linking $@ to $(*F).@vshared_suffix@
${CMODULES}/%.@shared_suffix@: ${CMODULES}/%.@vshared_suffix@ 
	@make -s ${CMODULES}/$(*F).@mshared_suffix@
	@$(SUINSTALL) ln -sf $(*F).@vshared_suffix@ $@
	@$(MSG) Linking $@ to $(*F).@vshared_suffix@

$(BININSTALLDIR)/%: src/scripts/%
	@$(MSG) Installing script $@ from $<
	@${SYSINSTALLEXE} $@ $<

$(BININSTALLDIR)/%: ${EXECSOURCE}/%
	@$(MSG) Installing executable $@ from $<
	@etc/install-script $<

$(DESTDIR)@config_dir@/boot/%: etc/% $(DESTDIR)@config_dir@/boot
	@$(SYSINSTALL) @install_file_opts@ $< $(DESTDIR)@config_dir@/boot
$(DESTDIR)@config_dir@/boot/%.service: etc/systemd/%.service $(DESTDIR)@config_dir@/boot
	@$(SYSINSTALL) @install_file_opts@ $< $@
$(DESTDIR)@config_dir@/boot/%.target: etc/systemd/%.target $(DESTDIR)@config_dir@/boot
	@$(SYSINSTALL) @install_file_opts@ $< $@
$(DESTDIR)@config_dir@/boot/%.conf: etc/upstart/%.conf $(DESTDIR)@config_dir@/boot
	@$(SYSINSTALL) @install_file_opts@ $< $@
$(DESTDIR)@config_dir@/boot/%.d: etc/sysv/%.d $(DESTDIR)@config_dir@/boot
	@$(SYSINSTALL) @install_file_opts@ $< $@

$(DESTDIR)@share_dir@/% $(DESTDIR)@share_dir@/modules/% $(DESTDIR)@share_dir@/%:
	@$(SYSINSTALLDIR) $@

dist/%.changelog: dist/equivs.changelog
	etc/make-equivs-changelog `basename $@ .changelog` dist/equivs.changelog > $@

exe/knox@suffix@ exe/knotask@suffix@ exe/knoc@suffix@: \
	$(STATIC_LIBS) $(SHARED_LIBS)
exe/knocgi@suffix@ exe/knod@suffix@: \
	$(STATIC_LIBS) $(SHARED_LIBS)
exe/knocgi@suffix@ exe/knocgi@suffix@: src/exe/webcommon.h

# Custom rules for making include files with CSS headers
src/web/htmlout.o: src/web/backtrace_css.h src/web/backtrace_js.h src/web/backtrace.css src/web/backtrace.js
src/web/backtrace_css.h: src/web/backtrace.css etc/text2include
	@echo Generating $@ from text in $<
	@./etc/text2include KNO_BACKTRACE_CSS $< $@
src/web/backtrace_js.h: src/web/backtrace.js etc/text2include
	@echo Generating $@ from text in $<
	@./etc/text2include KNO_BACKTRACE_JS $< $@

# This can be helpful for some debugging 
etc/usememory: etc/usememory.c

# Library targets

libs: static-libs @SHARED_LIB_TARGET@ zips
static-libs: $(STATIC_LIBS)
shared-libs: $(SHARED_LIBS)

exe: $(EXECUTABLES) exe/.gdbinit
static static-exe: $(STATIC_EXECUTABLES)
debug-exe: $(DEBUG_EXECUTABLES) dbg/.gdbinit
shell-scripts: $(SHELL_SCRIPTS)
scheme-scripts: $(SCHEME_SCRIPTS)
scripts: shell-scripts scheme-scripts
zips: src/libscm.zip src/stdlib.zip

.PHONY: static

testbin: libtestbin debug-exe etc/usememory
libtestbin: libs tests/libtests/makefile
	@make -s XCFLAGS="$(XCFLAGS)" XLDFLAGS="$(XLDFLAGS)" XLIBS="$(XLIBS)" \
		-C tests/libtests
cmodules: @CMODULES@

dbg/knocgi.webuser: dbg/knocgi
	@echo "Making" $@
	@cp dbg/knocgi dbg/knocgi.webuser
	@sudo chown @webuser@:@install_group@ dbg/knocgi.webuser
	@sudo chmod ug+s dbg/knocgi.webuser



# Utility targets

NOTAGS:
	@echo "# (kno)" No TAGS file

TAGS: makefile configure.ac include/kno/config.h.in			\
		tests/libtests/*.c					\
		src/exe/*.c src/exe/*.h include/kno/*.h			\
		src/lisp/*.c src/sys/*.c				\
		src/apply/*.c src/apply/*.h				\
		src/storage/*.c src/drivers/*.c				\
		src/eval/*.c src/eval/*.h				\
		src/prims/*.c						\
		src/text/*.c src/web/*.c				\
		src/cmodules/*.c					\
		src/python/*.c						\
		src/libscm/*.scm src/libscm/*/*.scm			\
		src/libscm/*/*/*.scm					\
		src/scripts/*.scm src/shell/*.in			\
		src/shell/knoctl					\
		include/kno/components/*.h				\
		etc/*.in contrib/*.in					\
		dbg/.gdbinit.in tests/*.scm				\
		${SRC_HEADERS}
	@echo "# (kno)" Building TAGS file
	@etags -o $@					\
		makefile.in configure.ac		\
		include/kno/config.h.in			\
		include/kno/knosource.h.in		\
		tests/*/*.in tests/*.in dbg/*.in	\
		etc/*.in etc/*/*.in include/kno/*.h	\
		include/kno/components/*.h		\
		contrib/*.in 				\
		${SRC_HEADERS};
	@etags -o $@ -a src/exe/*.c src/exe/*.h
	@etags -o $@ -a src/lisp/*.c src/sys/*.c src/apply/*.c	src/apply/*.h 
	@etags -o $@ -a src/storage/*.c
	@etags -o $@ -a src/drivers/*.c src/drivers/headers/*.h
	@etags -o $@ -a src/eval/*.c src/eval/*.h src/prims/*.c
	@etags -o $@ -a src/web/*.c src/text/*.c;
	@etags -o $@ -a tests/libtests/*.c tests/*.scm;
	@etags -o $@ -a src/cmodules/*.c;
	@etags -o $@ -a src/python/*.c;
	@etags -o $@ -a src/scripts/*.scm;
	@etags -o $@ -a contrib/*/makefile contrib/*/*.c contrib/*/*.h 
	@find src/libscm/ -name "*.scm" -type f | xargs etags -a -o $@;
	@find src/stdmods/ -name "*.scm" -type f | xargs etags -a -o $@;
	@find src/webmods/ -name "*.scm" -type f | xargs etags -a -o $@;
	@find src/textmods/ -name "*.scm" -type f | xargs etags -a -o $@;
	@find src/brico/ -name "*.scm" -type f | xargs etags -a -o $@;

CORETAGS: makefile configure.ac include/kno/config.h.in			\
		tests/libtests/*.c					\
		src/exe/*.c src/exe/*.h include/kno/*.h			\
		src/lisp/*.c src/sys/*.c				\
		src/apply/*.c src/apply/*.h				\
		src/storage/*.c src/drivers/*.c				\
		src/eval/*.c src/eval/*.h				\
		src/prims/*.c						\
		src/text/*.c src/web/*.c				\
		src/cmodules/*.c					\
		src/python/*.c						\
		src/libscm/*.scm src/libscm/*/*.scm			\
		src/scripts/*.scm src/shell/*.in			\
		src/shell/knoctl					\
		include/kno/components/*.h				\
		etc/*.in contrib/*.in					\
		dbg/.gdbinit.in tests/*.scm				\
		${SRC_HEADERS}
	@echo "# (kno)" Building TAGS file
	@etags -o $@ makefile.in configure.ac		\
		include/kno/config.h.in			\
		include/kno/knosource.h.in		\
		tests/*/*.in tests/*.in dbg/*.in	\
		etc/*.in etc/*/*.in include/kno/*.h	\
		include/kno/components/*.h		\
		contrib/*.in				\
		${SRC_HEADERS};
	@etags -o $@ -a src/exe/*.c src/exe/*.h
	@etags -o $@ -a src/lisp/*.c src/sys/*.c src/apply/*.c	src/apply/*.h 
	@etags -o $@ -a src/storage/*.c src/drivers/*.c src/drivers/headers/*.h
	@etags -o $@ -a src/eval/*.c src/eval/*.h src/prims/*.c
	@etags -o $@ -a src/web/*.c src/text/*.c;
	@etags -o $@ -a tests/libtests/*.c tests/*.scm;
	@etags -o $@ -a src/cmodules/*.c;
	@etags -o $@ -a src/python/*.c;
	@etags -o $@ -a src/scripts/*.scm;
	@find src/libscm/ -name "*.scm" -type f | xargs etags -a -o $@;

CTAGS: makefile configure.ac include/kno/config.h.in	\
		tests/libtests/*.c					\
		src/exe/*.c src/exe/*.h include/kno/*.h			\
		src/lisp/*.c src/sys/*.c				\
		src/apply/*.c src/apply/*.h				\
		src/storage/*.c src/drivers/*.c				\
		src/eval/*.c src/eval/*.h				\
		src/prims/*.c						\
		src/text/*.c src/web/*.c				\
		src/cmodules/*.c					\
		src/python/*.c						\
		include/kno/components/*.h				\
		contrib/*.in contrib/*/*.c contrib/*/*.h		\
		dbg/.gdbinit.in						\
		${SRC_HEADERS}
	@echo Building KNO_SOURCE TAGS file
	@echo "# (kno)" Building TAGS file
	@etags -o $@ makefile.in configure.ac		\
		include/kno/config.h.in			\
		include/kno/knosource.h.in		\
		tests/*/*.in tests/*.in dbg/*.in	\
		etc/*.in etc/*/*.in include/kno/*.h	\
		include/kno/components/*.h		\
		contrib/*.in 				\
		${SRC_HEADERS};
	@etags -o $@ -a src/exe/*.c src/exe/*.h
	@etags -o $@ -a src/lisp/*.c src/sys/*.c src/apply/*.c	src/apply/*.h 
	@etags -o $@ -a src/storage/*.c src/drivers/*.c src/drivers/headers/*.h
	@etags -o $@ -a src/eval/*.c src/eval/*.h src/prims/*.c
	@etags -o $@ -a src/web/*.c src/text/*.c;
	@etags -o $@ -a tests/libtests/*.c
	@etags -o $@ -a src/cmodules/*.c;
	@etags -o $@ -a src/python/*.c;

SCHEMETAGS: ${SCHEME_MODULES} makefile
	@echo Building SCHEMETAGS file
	@rm -f SCHEMETAGS
	@# We skip module.scm files because they are always links
	@#  to other files (with more distinctive names)
	@find src/libscm -name "*.scm" -type f | xargs etags -o $@ -a
	@find src/stdmods -name "*.scm" -type f | xargs etags -o $@ -a
	@find src/textmods -name "*.scm" -type f | xargs etags -o $@ -a
	@find src/webmods -name "*.scm" -type f | xargs etags -o $@ -a
	@find src/scripts -name "*.scm" -type f | xargs etags -o $@ -a
	@find src/brico -name "*.scm" -type f | xargs etags -o $@ -a
	@find tests -name "*.scm" -type f | xargs etags -o $@ -a

LIBSCMTAGS: src/libscm/*.scm src/libscm/*/*.scm makefile
	@echo Building LIBSCMTAGS file
	@rm -f LIBSCMTAGS
	@# We skip module.scm files because they are always links
	@#  to other files (with more distinctive names)
	@find src/libscm -name "*.scm" -type f | xargs etags -o $@ -a

KNODBTAGS: src/libscm/knodb/*.scm src/libscm/knodb/*/*.scm makefile
	@echo Building KNODBTAGS file
	@rm -f KNODBTAGS
	@# We skip module.scm files because they are always links
	@#  to other files (with more distinctive names)
	@find src/libscm/knodb -name "*.scm" -type f | xargs etags -o $@ -a

alltags: TAGS CORETAGS CTAGS SCHEMETAGS
freshtags:
	rm -f TAGS CORETAGS CTAGS SCHEMETAGS
	make alltags

profile-clean:
	@find . -name "*.gcda" -type f | xargs rm -f
	@find . -name "*.gcno" -type f | xargs rm -f
	@find . -name "*.gcov" -type f | xargs rm -f
	@find . -name "*.bb" -type f | xargs rm -f
	@find . -name "*.bbg" -type f | xargs rm -f
	@find . -name "*.da" -type f | xargs rm -f
	@find . -name "gmon.out" | xargs rm -f
tidy: profile-clean
	@for dir in ${CLEANDIRS}; do \
	  rm -f $${dir}/*~ $${dir}/*.o; \
	done
	make testclean
	rm -f config.log
clean: tidy
	@for dir in ${CLEANDIRS}; do rm -f ${dir}/*.o; done
	rm -rf etc/*.o etc/.libs
	rm -f lib/*.a lib/*.so lib/*.dylib
	rm -f lib/*.so lib/*.so.* lib/*.dylib lib/*.dylib.*
	rm -f lib/kno/*.so lib/kno/*.so.* lib/kno/*.dylib lib/kno/*.dylib.*
	rm -rf exe/kno* dbg/kno* static/kno* static/stripped/kno*
	rm -f TAGS
	cd tests/libtests; make -s clean
	cd tests; make -s clean
	find . -name "*.dSYM" -writable | xargs rm -rf
distclean: clean
	rm -f .buildmode VERSION
	rm -f makefile config.log config.status config.cache
	rm -f tests/libtests/makefile tests/makefile tests/lisp/.gdbinit
	rm -f dbg/gdbinit
	rm -f etc/knogetconfig etc/knosetconfig
	rm -f etc/sysv/kno-rc.d etc/sysv/ex_servlet-init.d etc/sysv/ex_daemon-init.d
	rm -f exe/.gdbinit include/kno/config.h include/kno/kno_version.h

commit:
	git commit
	touch makefile
pull:
	git pull
	touch makefile

# Custom dependencies

src/apply/apply.o: src/apply/apply_internals.h
src/apply/futures.o: include/kno/futures.h
src/eval/binders.o src/eval/conditionals.o src/eval/iterators.o: \
	src/eval/eval_internals.h
src/eval/eval.o src/eval/vm.o: src/eval/eval_internals.h src/eval/opcode_info.h

# Custom rules

src/lisp/dtread.o src/lisp/dtwrite.o src/lisp/bufio.o : XCFLAGS="${XOPTFLAGS}"
src/lisp/choices.o : XCFLAGS="${XOPTFLAGS}"
src/lisp/tables.o src/storage/bloom.o src/lisp/sequences.o : XCFLAGS="${XOPTFLAGS}"
src/lisp/numbers.o src/lisp/compare.o : XCFLAGS="${XOPTFLAGS}"
src/storage/streams.o src/storage/pools.o src/storage/indexes.o : XCFLAGS="${XOPTFLAGS}"
src/apply/apply.o src/apply/exec.o : XCFLAGS="${XOPTFLAGS}"
src/eval/eval.o src/eval/vm.o src/eval/choiceops.o : XCFLAGS="${XOPTFLAGS}"
src/eval/conditionals.o src/eval/iterators.o : XCFLAGS="${XOPTFLAGS}"
src/eval/lambda.o : XCFLAGS="${XOPTFLAGS}"
src/text/matcher.o src/text/texttools.o : XCFLAGS="${XOPTFLAGS}"

# Library targets

lib/libkno@suffix@.a: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS)	\
	$(STORAGE_OBJS) $(DRIVER_OBJS) $(SCHEME_OBJS)
lib/libkno@suffix@.so: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS)	\
	$(STORAGE_OBJS) $(DRIVER_OBJS) $(SCHEME_OBJS)
lib/libkno@suffix@.dylib: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS) \
	$(STORAGE_OBJS) $(DRIVER_OBJS) $(SCHEME_OBJS)

lib/libknocore@suffix@.a: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS)
lib/libknocore@suffix@.so: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS)
lib/libknocore@suffix@.dylib: $(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS)

lib/libknostorage@suffix@.a: $(STORAGE_OBJS)
lib/libknostorage@suffix@.so: $(STORAGE_OBJS) lib/libknocore@suffix@.so
lib/libknostorage@suffix@.dylib: $(STORAGE_OBJS) lib/libknocore@suffix@.dylib

lib/libknodrivers@suffix@.a: $(DRIVER_OBJS)
lib/libknodrivers@suffix@.so: $(DRIVER_OBJS) \
	lib/libknocore@suffix@.so lib/libknostorage@suffix@.so
lib/libknodrivers@suffix@.dylib: $(DRIVER_OBJS) \
	lib/libknostorage@suffix@.dylib lib/libknocore@suffix@.dylib

lib/libknoscheme@suffix@.a: $(SCHEME_OBJS)
lib/libknoscheme@suffix@.so: $(SCHEME_OBJS)			\
	lib/libknocore@suffix@.so lib/libknostorage@suffix@.so	\
	lib/libknodrivers@suffix@.so
lib/libknoscheme@suffix@.dylib: $(SCHEME_OBJS)				\
	lib/libknocore@suffix@.dylib  lib/libknostorage@suffix@.dylib	\
	lib/libknodrivers@suffix@.dylib

lib/libknowebtools@suffix@.a: $(WEB_OBJS)
lib/libknowebtools@suffix@.so: $(WEB_OBJS) lib/libkno@suffix@.so
lib/libknowebtools@suffix@.dylib: $(WEB_OBJS) lib/libkno@suffix@.dylib
	@$(MACLIBTOOL) -install_name 					\
		@rpath/lib/`basename $(@F) .dylib`.@KNO_MAJOR@.dylib 	\
		$(DYLIB_FLAGS) \
		-o $@ $(WEB_OBJS)
	@$(MSG) MACLIBTOOL $@

lib/libknotexttools@suffix@.a: $(TEXT_OBJS)
lib/libknotexttools@suffix@.so: $(TEXT_OBJS) lib/libkno@suffix@.so
lib/libknotexttools@suffix@.dylib: $(TEXT_OBJS) lib/libkno@suffix@.dylib
	@$(MACLIBTOOL) -install_name \
		@rpath/lib/`basename $(@F) .dylib`.@KNO_MAJOR@.dylib	\
		$(DYLIB_FLAGS) 						\
		-o $@ $(TEXT_OBJS)
	@$(MSG) MACLIBTOOL $@

src/cmodules/crypto.o: src/cmodules/crypto.c
lib/kno/crypto.so: src/cmodules/crypto.o
lib/kno/crypto.dylib: src/cmodules/crypto.o ${CMODULE_DEPENDS}

src/cmodules/testcapi.o: src/cmodules/testcapi.c
lib/kno/testcapi.so: src/cmodules/testcapi.o
lib/kno/testcapi.dylib: src/cmodules/testcapi.o ${CMODULE_DEPENDS}

lib/kno/sqlite.so lib/kno/sqlite.dylib : MODLIBS=-lsqlite3
lib/kno/sqlite.so: src/cmodules/sqlite.o
lib/kno/sqlite.dylib: src/cmodules/sqlite.o ${CMODULE_DEPENDS}

lib/kno/gperftools.so : MODLIBS="-lprofiler"
lib/kno/gperftools.o: src/cmodules/gperftools.c
lib/kno/gperftools.so: src/cmodules/gperftools.o
lib/kno/gperftools.dylib: src/cmodules/gperftools.o ${CMODULE_DEPENDS}

# Parseltongue (default: v3)
src/python/parseltongue.o: src/python/parseltongue.c
	$(CC) @PYTHON3_CFLAGS@ $(CFLAGS) -o $@ -c $< ${MODLIBS}
	@$(MSG) CC_PYTHON $@ $<

lib/kno/parseltongue.so: src/python/parseltongue.o
	@$(MKSO) -L./lib -L./ -o $@ $< ${MODLIBS} @PYTHON3_LDFLAGS@
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@$(MSG) MKSO  $@ $<
lib/kno/parseltongue.dylib: src/python/parseltongue.o ${CMODULE_DEPENDS}
	@$(MACLIBTOOL) -install_name \
		`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) ${MODLIBS} @PYTHON3_LDFLAGS@ -o $@ $< 
	@$(MSG) MACLIBTOOL  $@ $<
lib/kno/parseltongue.@KNO_MAJOR@.dylib: lib/kno/parseltongue.dylib
	@ln -sf $(*F).dylib $@

lib/python3/kno.so: src/python/parseltongue.o
	@$(MKSO) -L./lib -L./ -o $@ $< ${MODLIBS} @PYTHON3_LDFLAGS@ ${EXELIBS} ${PYLIBS}
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@$(MSG) MKSO  $@ $<
lib/python3/kno.dylib: src/python/parseltongue.o ${CMODULE_DEPENDS}
	@$(MACLIBTOOL) -install_name \
		`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) ${PYLIBS} ${MODLIBS} @PYTHON3_LDFLAGS@ \
		-o $@ $< 
	@$(MSG) MACLIBTOOL  $@ $<

parseltongue: lib/kno/parseltongue.@shared_suffix@

install-parseltongue: ${CMODULES}/parseltongue.@shared_suffix@ \
	${CMODULES}/parseltongue.@mshared_suffix@ \
	${CMODULES}/parseltongue.@mmshared_suffix@ \
	${CMODULES}/parseltongue.@vshared_suffix@

# Parseltongue (v2)
src/python/parseltongue2.o: src/python/parseltongue.c
	$(CC) @PYTHON2_CFLAGS@ $(CFLAGS) -o $@ -c $< ${MODLIBS}
	@$(MSG) CC_PYTHON $@ $<

lib/kno/parseltongue2.so: src/python/parseltongue2.o
	@$(MKSO) -L./lib -L./ -o $@ $< ${MODLIBS} @PYTHON2_LDFLAGS@
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@$(MSG) MKSO  $@ $<
lib/kno/parseltongue2.dylib: src/python/parseltongue2.o ${CMODULE_DEPENDS}
	@$(MACLIBTOOL) -install_name \
		`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) ${MODLIBS} @PYTHON2_LDFLAGS@ -o $@ $< 
	@$(MSG) MACLIBTOOL  $@ $<
lib/kno/parseltongue2.@KNO_MAJOR@.dylib: lib/kno/parseltongue2.dylib
	@ln -sf $(*F).dylib $@

lib/python2/kno.so: src/python/parseltongue.o
	@$(MKSO) -L./lib -L./ -o $@ $< ${MODLIBS} @PYTHON2_LDFLAGS@ ${EXELIBS} ${PYLIBS}
	@ln -sf $(@F) $(@D)/$(@F).@KNO_MAJOR@
	@$(MSG) MKSO  $@ $<
lib/python2/kno.dylib: src/python/parseltongue2.o ${CMODULE_DEPENDS}
	@$(MACLIBTOOL) -install_name \
		`basename $(@F) .dylib`.@KNO_MAJOR@.dylib \
		$(DYLIB_FLAGS) ${MODLIBS} $(PYLIBS} \
		@PYTHON2_LDFLAGS@ -o $@ $< 
	@$(MSG) MACLIBTOOL  $@ $<

parseltongue2: lib/kno/parseltongue2.@shared_suffix@

install-parseltongue2: ${CMODULES}/parseltongue2.@shared_suffix@ \
	${CMODULES}/parseltongue2.@vshared_suffix@

# Internationalization stuff

$(LOCALEDIR)/%/LC_MESSAGES/kno.mo: etc/intl/%.gmo
	@$(SUINSTALL) install -D $^ $@

etc/intl/kno.pot:
	@XGETTEXT@ --from-code=utf-8 -dfdstorage -oetc/intl/kno.pot -k_ \
		$(KNO_SOURCES) $(CMODULE_SOURCES) $(KNO_HEADERS)
etc/intl/%.po: etc/intl/kno.pot
	@MSGMERGE@ -U $@ $<
etc/intl/%.gmo: etc/intl/%.po
	@MSGFMT@ $^ -o $@ 

install-i18n: $(LOCALEDIR)/fr/LC_MESSAGES/kno.mo   \
		$(LOCALEDIR)/es/LC_MESSAGES/kno.mo \
		$(LOCALEDIR)/nl/LC_MESSAGES/kno.mo
i18n: etc/intl/fr.gmo etc/intl/nl.gmo etc/intl/es.gmo

# Contribs

contribs contrib:
	cd contrib; ./submake; make symlinks;
install-contrib install-contribs: contribs
	cd contrib; ./submake install;

# Documentation

docs: docs/built

docs/built: docs/ronn/knox.1.ronn docs/ronn/knoc.1.ronn docs/ronn/kno_config.8.ronn
	cd docs; make && touch built

$(MANDIR)/man1 $(MANDIR)/man8 $(DOCDIR)/html:
	@$(SYSINSTALLDIR) $@

install-docs: $(MANDIR)/man1 $(MANDIR)/man8 $(DOCDIR)/html docs
	for file in docs/man/*.1; do \
	  if test -f "$${file}"; then \
	    ${GZINSTALL} $${file} > $(MANDIR)/man1/$$(basename $${file}).gz; fi; done;
	for file in docs/man/*.8; do \
	  if test -f "$${file}"; then \
	    ${GZINSTALL} $${file} > $(MANDIR)/man8/$$(basename $${file}).gz; fi; done
	for file in docs/man.html/*.html; do \
	   $(SYSINSTALL) $${file} $(DOCDIR)/html; done

# Installation targets

install-status:
	@if test -f .malloc && test -f .buildmode; then \
	  echo "Installing" $(shell cat .buildmode) "build linked with" $(shell cat .malloc); \
	fi;
install: install-status install-core		\
		install-static-libs		\
		install-cmodules		\
		@install_libscm@ install-stdlib \
		install-dev 			\
		${DOSETUP}
	@if [ ! -z "${SYSROOT}" ]; then make setup-bundle; fi;
	@if test -f .malloc && test -f .buildmode; then \
	  echo "Installed" $(shell cat .buildmode) "build linked with" $(shell cat .malloc); \
	fi;
setup: install
	make unix-setup

install-bin: install-shared-libs install-exe
install-stripped:
	make LIBSOURCE=lib/stripped EXECSOURCE=exe/stripped install-bin
install-text: @install_libscm@ install-scripts install-support
install-dirs: install-confdirs install-moddirs install-workdirs
install-core: install-dirs install-bin @INSTALLI18N@ install-text install-data
install-dev:  install-headers install-pkgconfig

install-all install-full: install install-dev

$(INCINSTALLDIR):
	@$(SYSINSTALLDIR) $(INCINSTALLDIR)
$(BININSTALLDIR):
	@$(SYSINSTALLDIR) $(BININSTALLDIR)
$(LIBINSTALLDIR):
	@$(SYSINSTALLDIR) $(LIBINSTALLDIR)
${CMODULES}:
	@$(SYSINSTALLDIR) ${CMODULES}
$(DESTDIR)@config_dir@ $(DESTDIR)@share_dir@ $(DATADIR):
	@$(SYSINSTALLDIR) $@
$(DESTDIR)@local_config@ $(DESTDIR)@shared_config@:
	@$(SYSINSTALLDIR) $@
$(DESTDIR)@config_dir@/daemons \
		$(DESTDIR)@config_dir@/servlets \
		$(DESTDIR)@config_dir@/config_files: $(DESTDIR)@config_dir@
	@$(SYSINSTALLDIR) $@
$(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@:
	@$(SYSINSTALLDIR) $@
	@$(SUINSTALL) ln -sf kno-@KNO_PATCHVERSION@ $(DESTDIR)@share_dir@/libscm/kno-@KNO_VERSION@
	@$(SUINSTALL) ln -sf kno-@KNO_VERSION@ $(DESTDIR)@share_dir@/libscm/kno-@KNO_MAJOR@

install-static-libs: static-libs $(LIBINSTALLDIR)
	make $(LIBINSTALLDIR)/libkno@suffix@.a			\
		$(LIBINSTALLDIR)/libknowebtools@suffix@.a	\
		$(LIBINSTALLDIR)/libknotexttools@suffix@.a
install-shared-libs: install-status shared-libs $(LIBINSTALLDIR)	\
    $(LIBINSTALLDIR)/libkno@suffix@.@vshared_suffix@			\
    $(LIBINSTALLDIR)/libkno@suffix@.@mmshared_suffix@			\
    $(LIBINSTALLDIR)/libkno@suffix@.@mshared_suffix@			\
    $(LIBINSTALLDIR)/libkno@suffix@.@shared_suffix@			\
    $(LIBINSTALLDIR)/libknowebtools@suffix@.@vshared_suffix@		\
    $(LIBINSTALLDIR)/libknowebtools@suffix@.@mmshared_suffix@		\
    $(LIBINSTALLDIR)/libknowebtools@suffix@.@mshared_suffix@		\
    $(LIBINSTALLDIR)/libknowebtools@suffix@.@shared_suffix@		\
    $(LIBINSTALLDIR)/libknotexttools@suffix@.@vshared_suffix@		\
    $(LIBINSTALLDIR)/libknotexttools@suffix@.@mmshared_suffix@		\
    $(LIBINSTALLDIR)/libknotexttools@suffix@.@mshared_suffix@		\
    $(LIBINSTALLDIR)/libknotexttools@suffix@.@shared_suffix@

install-headers: $(INCINSTALLDIR)
	@$(SYSINSTALL) -p @install_file_opts@		\
		   $(LISP_HEADERS) $(APPLY_HEADERS)	\
		   $(STORAGE_HEADERS) $(DRIVERS_H)	\
		   $(SCHEME_HEADERS) $(LIB_HEADERS)	\
		   $(VERSION_H)			\
		$(INCINSTALLDIR)

install-pkgconfig: $(DESTDIR)@PKGCONFIG_DIR@
	@echo "# (kno) Installing kno pkgconfig file in $(DESTDIR)@PKGCONFIG_DIR@"
	@$(SYSINSTALL) etc/kno.pc $(DESTDIR)@PKGCONFIG_DIR@
$(DESTDIR)@PKGCONFIG_DIR@:
	$(SYSINSTALLDIR) $(DESTDIR)@PKGCONFIG_DIR@

install-data: $(DATADIR)
	@$(SYSINSTALL) @install_file_opts@ docs/misc/data.README \
		$(DATADIR)/README
	@$(SYSINSTALL) @install_file_opts@ @DATAFILES@ $(DATADIR)

install-exe: $(BININSTALLDIR) $(EXECUTABLES)
	@$(SYSINSTALL) -p @install_exe_opts@ $(EXECUTABLES) $(BININSTALLDIR)
	@$(SUINSTALL) ln -sf knox@suffix@ $(BININSTALLDIR)/knapp@suffix@
install-static-exe: $(BININSTALLDIR) $(EXECUTABLES)
	@$(SYSINSTALL) -p @install_exe_opts@ $(EXECUTABLES) $(BININSTALLDIR)
	@$(SUINSTALL) ln -sf knox@suffix@ $(BININSTALLDIR)/knapp@suffix@

install-scripts: install-shell-scripts install-scheme-scripts
install-shell-scripts:
	@$(SYSINSTALLEXE) $(SHELL_SCRIPTS) $(BININSTALLDIR)
install-scheme-scripts: $(BININSTALLDIR) $(SCHEME_SCRIPTS)
	@$(SYSINSTALL) @install_exe_opts@ $(SCHEME_SCRIPTS) $(BININSTALLDIR)

setup-bundle:
	@$(SYSINSTALL) docs/bundle.README $(DESTDIR)@SYSROOT@/README.md
	@$(SYSINSTALL) src/shell/usebundle.sh $(DESTDIR)@SYSROOT@
	@$(SYSINSTALL) src/shell/getbundleinit.sh $(DESTDIR)@SYSROOT@/getinit

install-data: \
	$(DESTDIR)@config_dir@/boot/ex_daemon.service	\
	$(DESTDIR)@config_dir@/boot/ex_servlet.service	\
	$(DESTDIR)@config_dir@/boot/kno.target		\
	$(DESTDIR)@config_dir@/boot/kno-daemons.service \
	$(DESTDIR)@config_dir@/boot/kno-servlets.service	\
	$(DESTDIR)@config_dir@/boot/kno-rc.d		\
	$(DESTDIR)@config_dir@/boot/ex_servlet-init.d		\
	$(DESTDIR)@config_dir@/boot/ex_daemon-init.d		\
	$(DESTDIR)@config_dir@/boot/kno.conf		\
	$(DESTDIR)@config_dir@/boot/logrotate

# Setup targets

install-workdirs: $(DESTDIR)@kno_rundir@ $(DESTDIR)@kno_logdir@ \
	$(DESTDIR)@daemon_rundir@ $(DESTDIR)@daemon_logdir@ \
	$(DESTDIR)@servlet_rundir@ $(DESTDIR)@servlet_logdir@ \
	$(DESTDIR)@bugjar@

install-moddirs: $(DESTDIR)@installed_module_dir@ \
	  $(DESTDIR)@source_module_dir@ $(DESTDIR)@local_module_dir@ \
	  $(DESTDIR)@conf_module_dir@ $(DESTDIR)@unpackage_dir@

install-confdirs: $(DESTDIR)@installed_module_dir@ \
	  $(DESTDIR)@source_module_dir@ $(DESTDIR)@local_module_dir@ \
	  $(DESTDIR)@conf_module_dir@ $(DESTDIR)@unpackage_dir@ \
	  $(DESTDIR)@local_config@ $(DESTDIR)@shared_config@ \
	  $(DESTDIR)@config_dir@  $(DESTDIR)@config_dir@/config_files \
	  $(DESTDIR)@config_dir@/daemons $(DESTDIR)@config_dir@/servlets \
	  $(DESTDIR)@config_dir@/config
	@$(MSG) Setting up configuration directories
	@if test ! -f $(DESTDIR)@config_dir@/servers; then \
		$(SYSINSTALL) @install_file_opts@ /dev/null \
			$(DESTDIR)@config_dir@/servers; fi

$(DESTDIR)@unpackage_dir@:
	@$(SYSINSTALLDIR) $@

$(BININSTALLDIR)/knocgi@suffix@:
	@$(SYSINSTALL) -p @install_exe_opts@ knocgi@suffix@ $(BININSTALLDIR)

install-cmodules: @INSTALL_CMODULES@

install-testcapi: ${CMODULES}/testcapi.@shared_suffix@ ${CMODULES}/testcapi.@vshared_suffix@
install-crypto: ${CMODULES}/crypto.@shared_suffix@ ${CMODULES}/crypto.@vshared_suffix@
install-sqlite: ${CMODULES}/sqlite.@shared_suffix@ ${CMODULES}/sqlite.@vshared_suffix@
install-gperftools: ${CMODULES}/gperftools.@shared_suffix@ ${CMODULES}/gperftools.@vshared_suffix@

# Install variants

# Makes everything and then sudoes the install, keeping build files
# non-root

suinstall:
	make all
	@$(SUDO) make install
dbginstall:
	make XCFLAGS="-O0" all
	@$(SUDO) make install

# Uninstall

LIBBASE=libkno libknocore libknostorage libknodrivers libknoscheme \
	libknowebtools libknotexttools

uninstall-core:
	./etc/uninstall $(DESTDIR)$(BININSTALLDIR) "" $(EXECUTABLES) knocgi
	./etc/uninstall $(DESTDIR)$(BININSTALLDIR) "" $(SHELL_SCRIPTS)
	./etc/uninstall $(DESTDIR)$(BININSTALLDIR) "" $(SCHEME_SCRIPTS)
	./etc/uninstall $(DESTDIR)$(LIBINSTALLDIR) "@suffix@.a" $(LIBBASE)
	./etc/uninstall $(DESTDIR)$(LIBINSTALLDIR) "@suffix@.@KNO_VERSION@.@shared_suffix@" $(LIBBASE)
	./etc/uninstall $(DESTDIR)$(LIBINSTALLDIR) "@suffix@.@KNO_MAJOR@.@shared_suffix@" $(LIBBASE)
	./etc/uninstall $(DESTDIR)$(LIBINSTALLDIR) "@suffix@.@KNO_MAJOR@.@KNO_MINOR@.@shared_suffix@" $(LIBBASE)
	./etc/uninstall $(DESTDIR)$(LIBINSTALLDIR) "@suffix@.@shared_suffix@" $(LIBBASE)
	rm -rf $(DESTDIR)${CMODULES}
uninstall-all: uninstall-core
	rm -rf $(DESTDIR)@share_dir@ $(DESTDIR)@config_dir@ \
		$(DESTDIR)@local_config@ $(DESTDIR)@shared_config@
uninstall: uninstall-core
	@if (test -d $(DESTDIR)@share_dir@); then \
	  $(MSG) $(DESTDIR)@share_dir@ "still exists"; fi
	@if (test -d $(DESTDIR)@config_dir@); then \
	  $(MSG) $(DESTDIR)@config_dir@ "still exists"; fi
	@if (test -d $(DESTDIR)@local_config@); then \
	  $(MSG) $(DESTDIR)@local_config@ "still exists"; fi
	@if (test -d $(DESTDIR)@shared_config@); then \
	  $(MSG) $(DESTDIR)@shared_config@ "still exists"; fi
	@if (test -d $(DESTDIR)@module_dir@); then \
	  $(MSG) $(DESTDIR)@module_dir@ "still exists"; fi

FIND_FLAGS="-exclude ".attic" -exclude "*~" -exclude "#*""

src/stdlib.zip: src/stdmods src/textmods src/webmods src/brico makefile
	rm -rf src/stdlib.zip
	cd src/stdmods; zip -u ../stdlib.zip -r . -x "*~" -x "#*" -x "*.attic/*" -x ".git*"
	cd src/webmods; zip -u ../stdlib.zip -r . -x "*~" -x "#*" -x "*.attic/*" -x ".git*"
	cd src/textmods; zip -u ../stdlib.zip -r . -x "*~" -x "#*" -x "*.attic/*" -x ".git*"
	cd src; zip -u stdlib.zip -r brico -x "*~" -x "#*" -x "*.attic/*" -x ".git*"

src/libscm.zip: src/libscm/*.scm src/libscm/*/*.scm

src/stdmods/hashfs.scm:
	git submodule init && \
	git submodule update --remote --merge src/stdmods;
src/webmods/hostinfo.scm:
	git submodule init && \
	git submodule update --remote --merge src/webmods;
src/textmods/text/ellipsize.scm:
	git submodule init && \
	git submodule update --remote --merge src/textmods;
src/brico/brico.scm:
	git submodule init && \
	git submodule update --remote --merge src/brico;

install-support: $(DESTDIR)@share_dir@
	$(SYSINSTALL) @install_file_opts@ 		\
	   etc/gdbinit etc/makefile.include etc/knoc.el	\
	   $(DESTDIR)@share_dir@
	$(SYSINSTALL) @install_file_opts@ src/web/webinfo.knocgi $(DESTDIR)@share_dir@

install-libscm: src/libscm.zip \
		$(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@ \
		$(DESTDIR)@share_dir@/libscm
	@$(SYSINSTALL) src/libscm.zip $(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@.zip;
	@$(SYSINSTALL) src/libscm.zip $(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@;
	@cd $(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@; unzip -f ../kno-@KNO_PATCHVERSION@.zip;
install-libscm.zip: src/libscm.zip $(DESTDIR)@share_dir@/libscm
	@$(SYSINSTALL) src/libscm.zip $(DESTDIR)@share_dir@/libscm/kno-@KNO_PATCHVERSION@.zip
install-libscm.skip: src/libscm.zip
	@echo "Skipping libscm install, using runtime specified ${LIBSCM}"

install-stdlib: src/stdlib.zip $(DESTDIR)@share_dir@/stdlib
	@$(SYSINSTALL) src/stdlib.zip $(DESTDIR)@share_dir@/stdlib/stdlib-@KNO_VERSION@.zip
	@$(SUINSTALL) ln -sf stdlib-@KNO_VERSION@.zip $(DESTDIR)@share_dir@/stdlib/stdlib-@KNO_MAJOR@.@KNO_MINOR@.zip
	@$(SUINSTALL) ln -sf stdlib-@KNO_VERSION@.zip $(DESTDIR)@share_dir@/stdlib/stdlib-@KNO_MAJOR@.zip

logdirs: $(DESTDIR)@kno_logdir@ $(DESTDIR)@servlet_logdir@ $(DESTDIR)@daemon_logdir@

statedirs: $(DESTDIR)@rundir@/kno $(DESTDIR)@daemon_rundir@ $(DESTDIR)@servlet_rundir@ \
	logdirs
$(DESTDIR)/etc/init.d:
	@$(SYSINSTALL) -m 0755 -d $(DESTDIR)/etc/init.d
$(DESTDIR)/etc/init.d/kno: etc/sysv/kno-rc.d $(DESTDIR)/etc/init.d
	@$(MSG) Installing Kno init.d
	@$(SYSINSTALL) etc/sysv/kno-rc.d $(DESTDIR)/etc/init.d/kno
$(DESTDIR)@kno_rundir@:
	@$(MSG) Installing Kno run directory
	@$(SYSINSTALLDIR) $(DESTDIR)@kno_rundir@
$(DESTDIR)@daemon_rundir@: $(DESTDIR)@kno_rundir@
	@$(MSG) Installing Kno daemon run directory
	@$(SYSINSTALLDIR) $(DESTDIR)@daemon_rundir@
$(DESTDIR)@servlet_rundir@: $(DESTDIR)@kno_rundir@
	@$(MSG) Installing Kno servlet run directory
	@$(SYSINSTALLDIR) $(DESTDIR)@servlet_rundir@
$(DESTDIR)@kno_logdir@:
	@$(MSG) Installing Kno log directory
	@$(SYSINSTALLDIR) $(DESTDIR)@kno_logdir@
$(DESTDIR)@bugjar@: $(DESTDIR)@kno_logdir@
	@$(MSG) Installing Kno bugjar directory
	@$(SYSINSTALLDIR) $(DESTDIR)@bugjar@
$(DESTDIR)@daemon_logdir@:  $(DESTDIR)@kno_logdir@
	@$(SYSINSTALLDIR) $(DESTDIR)@daemon_logdir@
$(DESTDIR)@servlet_logdir@: $(DESTDIR)@kno_logdir@
	@$(SYSINSTALLDIR) $(DESTDIR)@servlet_logdir@

$(DESTDIR)@config_dir@/boot $(DESTDIR)@config_dir@/modules:
	@$(SYSINSTALLDIR) $@

setup-sysv: $(DESTDIR)/etc/init.d/kno statedirs
enable-sysv: setup-sysv
	@if which update-rc.d; then \
		$(MSG) Updating rc.d; \
		$(SUINSTALL) update-rc.d kno defaults; \
	 fi

info:
	@echo PREFIX= ${PREFIX}
	@echo LIBSCM= ${LIBSCM}

startupdirs: $(DESTDIR)@config_dir@/daemons $(DESTDIR)@config_dir@/servlets

setup-upstart: $(DESTDIR)/etc/init/kno.conf startupdirs

$(DESTDIR)/etc/init:
	@$(SYSINSTALLDIR) $(DESTDIR)/etc/init
$(DESTDIR)/etc/init/kno.conf: etc/upstart/kno.conf $(DESTDIR)/etc/init
	@$(MSG) Installing kno Upstart config to $(DESTDIR)/etc/init/kno.conf
	@$(SYSINSTALL) etc/upstart/kno.conf $(DESTDIR)/etc/init/kno.conf

$(DESTDIR)@systemd_loc@:
	@$(SYSINSTALLDIR) $(DESTDIR)@systemd_loc@
setup-systemd: $(DESTDIR)@systemd_loc@/kno.target \
		$(DESTDIR)@systemd_loc@/kno-daemons.service \
		$(DESTDIR)@systemd_loc@/kno-servlets.service \
		startupdirs
$(DESTDIR)@systemd_loc@/%: etc/systemd/% $(DESTDIR)@systemd_loc@
	@$(MSG) Installing systemd config in $@
	@$(SYSINSTALL) $< $@
	@if test -z "${DESTDIR}" && test ! -z "${SUDO}"; then	\
	   ${MSG} systemctl daemon-reload;			\
	   ${SUDO} systemctl daemon-reload;			\
	fi

setup-logrotate: etc/logrotate $(DESTDIR)/etc/logrotate.d/kno logdirs
$(DESTDIR)/etc/logrotate.d:
	@$(SYSINSTALL) -m 0755 -d $@
$(DESTDIR)/etc/logrotate.d/kno: etc/logrotate $(DESTDIR)/etc/logrotate.d
	@$(MSG) Installing logrotate script
	@$(SYSINSTALL) -m 0644 etc/logrotate $(DESTDIR)/etc/logrotate.d/kno

setup-allboot: setup-sysv setup-systemd #  setup-upstart

setup-none:

setup-unix: @BOOTSETUP@ setup-logrotate
setup-linux: setup-unix

setup-osx: @share_dir@ startupdirs statedirs logdirs 
	@$(MSG) Setting up OSX system configuration
	@$(SUINSTALL) etc/macos/setup-osx "@share_dir@" \
		"${INSTALL} @install_dir_opts@" \
		"${INSTALL} @install_exe_opts@" \
		"${INSTALL} @install_exe_opts@" \
		/Library /etc

setup-none:
	@echo "Not setting up a boot system"

.PHONY: setup-none setup-osx setup-linux setup-unix setup-allboot setup-logrotate \
	setup-sysv setup-upstart setup-systemd

# Test targets

testclean:
	@make -s -C tests testclean 2>&1 > tests/testclean.log
tests: testclean
	@echo "#### Running test scripts, BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@if test ! -f tests/data/private.text; then \
	 echo "#### Can't test primitives on protected files, enable with 'make private_files'"; \
	 fi;
	@DATE=`date +%d%b%yT%T`; make -s -C tests -k -j && \
	 sort tests/state/timing.log -k 2 > tests/logs/timing-$${DATE}.log;
	@if test ! -f tests/data/private.text; then \
	 echo "#### Can't test primitives on protected files, enable with 'make private_files'"; \
	 fi;

tests.log: tests/knox tests/makefile.in makefile
	@echo "#### Running test scripts, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; make -s -C tests -k -j 2>&1 > tests.log && \
	 cp tests.log tests/logs/tests-$${DATE}.log; \
	 sort tests/state/timing.log -k 2 > tests/logs/timing-$${DATE}.log;

libtests.log: tests/knox tests/makefile.in
	@echo "#### Running libtests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; \
	 make -s -C tests -k -j libtests loadmods optmods 2>&1 > libtests.log && \
	 cp libtests.log tests/logs/libtests-$${DATE}.log;
libtests: libtests.log

tests/memtests.log: tests/knox tests/makefile.in
	@echo "#### Running memory tests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; \
	 make -s -C tests -k -j memtests 2>&1 > memtests.log && \
	 cp memtests.log tests/logs/memtests-`date +%d%b%yT%T`.log;
memtests: memtests.log

tests/leaktests.log: tests/knox tests/makefile.in
	@echo "#### Running leak tests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; make -s -C tests -k -j leaktests 2>&1 > leaktests.log && \
	cp tests/leaktests.log tests/logs/leaktests-`date +%d%b%yT%T`.log;
leaktests: leaktests.log

tests/schemetests.log: tests/knox tests/makefile.in
	@echo "#### Running scheme tests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; \
	 make -s -C tests -k -j schemetests 2>&1 > schemetests.log && \
	 cp schemtests.log tests/logs/schemetests-`date +%d%b%yT%T`.log;
schemetests: schemetests.log

tests/cmdtests.log: tests/knox tests/makefile.in
	@echo "#### Running command tests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; \
	 make -s -C tests -k -j cmdtests 2>&1 > tests/cmdtests.log && \
	 cp tests/cmdtests.log tests/logs/cmdtests-`date +%d%b%yT%T`.log;
cmdtests: tests/cmdtests.log

tests/dbtests.log: tests/knox tests/makefile.in
	@echo "#### Running database tests, output in" $@ "BUILD=${BUILDMODE} LINKED=${LINKEDWITH}"
	@make -s -C tests testclean 2>&1 > tests/testclean.log
	@DATE=`date +%d%b%yT%T`; \
	 make -s -C tests -k -j dbtests 2>&1 > dbtests.log && \
	 cp dbtests.log tests/logs/dbtests-`date +%d%b%yT%T`.log;
dbtests: tests/dbtests.log

private_files: tests/data/private.text tests/data/private.dtype tests/data/private

tests/data/private.text: tests/data/testobj.text
	@${SUDO} cp $< $@
	@${SUDO} chown nobody $@
	@${SUDO} chmod og-rwx $@
tests/data/private.dtype: tests/data/testobj.dtype
	@${SUDO} cp $< $@
	@${SUDO} chown nobody $@
	@${SUDO} chmod og-rwx $@
tests/data/private:
	@${SUDO} mkdir $@
	@${SUDO} chown nobody $@
	@${SUDO} chmod og-w $@

.PHONY: tests libtests schemetests dbtests cmtdtests memtests leaktests

# GCOV targets

lcov.info:
	lcov -c -o $@ -b . -d .
staging/lcov/index.html: lcov.info
	if test ! -d staging/lcov; then \
	  mkdir staging/lcov; \
	else rm -rf staging/lcov/*; fi
	genhtml -o staging/lcov/ lcov.info
lcov_html: staging/lcov/index.html

gcovr.text: src/lisp/cons.gcda
	gcovr ${GCOVR_FLAGS} -r . -o gcovr.text
gcovr.html: src/lisp/cons.gcda
	gcovr ${GCOVR_FLAGS} -r . --html -o gcovr.html

tests/gcovr:
	if test ! -d tests/gcovr; then mkdir tests/gcovr; fi

tests/gcovr/all.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . --html --html-details -o $@
tests/gcovr/core.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . \
		-f src/lisp -f src/sys -f src/apply -f src/eval -f include \
		--html --html-details -o $@
tests/gcovr/eval.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/eval \
		--html --html-details -o $@
tests/gcovr/lisp.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/lisp \
		--html --html-details -o $@
tests/gcovr/support.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/sys \
		--html --html-details -o $@
tests/gcovr/apply.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/apply \
		--html --html-details -o $@
tests/gcovr/storage.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . \
		-f src/storage -f src/drivers -f include \
		--html --html-details -o $@
tests/gcovr/prims.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/prims -f include \
		--html --html-details -o $@
tests/gcovr/cmodules.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/cmodules -f include \
		--html --html-details -o $@
tests/gcovr/text.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/text -f include \
		--html --html-details -o $@
tests/gcovr/web.html: src/lisp/cons.gcda tests/gcovr
	gcovr ${GCOVR_FLAGS} -r . -f src/text -f include \
		--html --html-details -o $@

src/lisp/cons.gcda: lib/libknocore.a lib/libkno.a
	find . -name "*.gcda" -exec rm '{}' \;
	find . -name ".*.gcda" -exec rm '{}' \;
	cd tests; make
fresh_coverage:
	rm -f src/lisp/cons.gcda
	make src/lisp/cons.gcda

gcovr_html: tests/gcovr/all.html tests/gcovr/core.html tests/gcovr/storage.html \
	tests/gcovr/prims.html tests/gcovr/text.html tests/gcovr/web.html \
	tests/gcovr/cmodules.html tests/gcovr/lisp.html tests/gcovr/support.html \
	tests/gcovr/apply.html tests/gcovr/eval.html

gcovr_fresh:
	rm -f tests/gcovr/*
	make gcovr_html

.PHONY: lcov_html gcovr_details

.PRECIOUS: %.gcda %.gcno

# Meta operations

submodules update-submodules update-git update-modules:
	if test -d .git; then					\
	  git pull; git submodule init;				\
	  git submodule update --remote --merge src/stdmods;	\
	  git submodule update --remote --merge src/textmods;	\
	  git submodule update --remote --merge src/webmods;	\
	  git submodule update --remote --merge src/brico;	\
	  if [ ! -f .git/hooks/pre-commit ]; then 		\
	   ln -s ../../etc/precommit.hook .git/hooks/pre-commit;\
	  fi;							\
	fi;
.PHONY: submodules update-modules update-git update-submodules

### Executables #including src/exe/main.c
$(EXECUTABLES) $(STATIC_EXECUTABLES) $(DEBUG_EXECUTABLES): $(VERSION_H) src/exe/main.c

# Build setups

staging/env.debian.core: makefile
	sudo apt-get install -ym libcurl4-openssl-dev libssl-dev libldns-dev \
		sqlite3 libzip-dev libzstd-dev libedit-dev \
		libarchive-dev libsasl2-dev libsqlite3-dev \
		dh-make devscripts dpkg-dev dh-systemd dh-elpa \
		debsigs && \
	touch $@

staging/env.debian.malloc: staging/env.debian.core makefile
	sudo apt install -ym libgoogle-perftools-dev libjemalloc-dev && \
	touch $@

staging/env.debian: staging/env.debian.core makefile
	touch $@

staging/env.redhat: makefile
	sudo rpm -Uvh libedit-devel && \
	touch $@

staging/env.alpine: makefile
	sudo apk add alpine-sdk autoconf zlib zlib-dev \
		     python2 python2-dev python3 python3-dev \
		     findutils findutils-doc libffi libffi-dev sqlite sqlite-dev \
		     snappy snappy-dev gettext gettext-dev libintl libintl-dev \
		     zlib zlib-dev zstd zstd-dev && \
	touch $@
staging/env.macports: makefile
	sudo port install  curl curl-ca-bundle exif libexif qrencode libpng imagemagick ldns \
		unixODBC sqlite3 snappy mongo-c-driver leveldb rocksdb \
		libarchive libzip zlib zmq-devel hyphen python37 && \
	touch $@

# Packaging targets

rpms: status/rpms.done

.PRECIOUS: status/%
.SECONDARY: status/%

pkgclean: 
	rm -f status/*.built status/*.signed status/*.done status/*.ready status/*.installed
	rm -rf staging/kno* staging/*.tar staging/*.gz dist/*.tar dist/*.gz
	rm -f dist/*.deb dist/*.dsc dist/*.changes dist/*.buildinfo
	find dist -name "*.rpm" -writable | xargs -r rm
	rm -rf staging/alpine*
cleandist cleanrpms cleandeb rpmclean debclean alpineclean: pkgclean

.PHONY: pkgclean cleandist cleanrpms cleandeb rpmclean debclean alpineclean

# Creating a source tree for packaging

staging/kno: VERSION FULL_VERSION $(KNO_SOURCES) $(CMODULE_SOURCES) $(KNO_HEADERS)
	git archive -o staging/knobase.tar HEAD
	cd src/stdmods; git archive -o ../../staging/stdmods.tar HEAD;
	cd src/textmods; git archive -o ../../staging/textmods.tar HEAD;
	cd src/webmods; git archive -o ../../staging/webmods.tar HEAD;
	cd src/brico; git archive -o ../../staging/brico.tar HEAD;
	if [ ! -d staging/kno ]; then mkdir staging/kno; fi;
	cd staging/kno; tar xf ../knobase.tar;
	cd staging/kno/src/stdmods; tar xf ../../../stdmods.tar;
	cd staging/kno/src/webmods; tar xf ../../../webmods.tar;
	cd staging/kno/src/textmods; tar xf ../../../textmods.tar;
	cd staging/kno/src/brico; tar xf ../../../brico.tar;
	@U8BIN@u8_gitversion etc/base_version > staging/kno/VERSION
	@U8BIN@u8_gitversion etc/base_version -full > staging/kno/FULL_VERSION
	@U8BIN@u8_gitbranch > staging/kno/BRANCH
	cd staging; rm -f knobase.tar stdlib.tar brico.tar

dist/kno.tar: staging/kno
	cd staging; tar -cf ../dist/kno.tar kno;
	cd dist; ln -sf kno.tar source.tar
	rm -rf staging/kno;
dist/source.tar: dist/kno.tar
	cd dist; ln -s kno.tar source.tar

.PRECIOUS: dist/kno.tar

# Creating staging areas from GIT

staging/kno-@KNO_VERSION@: VERSION FULL_VERSION staging/kno dist/kno.spec.base
	cd staging; cp -r kno/dist/debian kno/debian;
	cp dist/kno.spec.base staging/kno/dist/kno-@KNO_VERSION@.spec;
	@U8BIN@u8_debchangelog kno ${CODENAME} $(shell cat ./VERSION) \
			${REL_BRANCH} ${REL_STATUS} ${REL_PRIORITY} \
			< dist/debian/changelog \
			> staging/kno/debian/changelog;
	cd staging/kno/debian; \
	  for file in kno-core.dirs kno-postgres.install; do \
	    u8_xsubst $${file} inplace KNO_VERSION @KNO_VERSION@ KNO_MAJOR @KNO_MAJOR@  KNO_PATCHVERSION @KNO_PATCHVERSION@; done;
	if [ -d staging/kno-@KNO_VERSION@ ]; then rm -rf staging/kno-@KNO_VERSION@; fi
	cd staging; mv kno kno-@KNO_VERSION@;
staging/kno-@KNO_VERSION@.tar.gz: staging/kno-@KNO_VERSION@
	cd staging; tar -czf kno-@KNO_VERSION@.tar.gz kno-@KNO_VERSION@

dist/kno.spec.base: dist/kno.spec.base.in
	config.status

# RPM targets

staging/kno_@KNO_VERSION@.orig.tar.gz: staging/kno_@KNO_VERSION@
	tar -czf staging/kno_@KNO_VERSION@.tar.gz -C staging kno_@KNO_VERSION@
	cd staging; ln -s kno.tar.gz kno_@KNO_VERSION@.tar.gz

status/rpms.ready:
	@make staging/kno-@KNO_VERSION@ staging/kno-@KNO_VERSION@.tar.gz

status/rpms.built: status/rpms.ready
	@buildrpm@ $(RPMFLAGS)				\
	   --define="_rpmdir $(RPMDIR)"			\
	   --define="_srcrpmdir $(RPMDIR)"		\
	   --nodeps -ta					\
	    staging/kno-@KNO_VERSION@.tar.gz &&		\
	touch status/rpms.ready

status/rpms.signed: status/rpms.built
     echo "Enter passphrase for '$(GPGID)':";		\
     @@rpm@ --addsign --define="_gpg_name $(GPGID)"	\
	--define="__gpg_sign_cmd $(RPMGPG)"		\
	$(RPMDIR)/kno-@KNO_VERSION@*.src.rpm		\
	$(RPMDIR)/*/kno*-@KNO_VERSION@-*.rpm;	&& 	\
      touch $@

status/rpms.done: status/rpms.ready
	@(if (test "$(GPGID)" = "none" || test "$(GPGID)" = "" ); then	\
	    echo "Skipping RPM signing";				\
	  else make status/rpms.signed; fi) &&				\
	 touch $@;
	@ls -l $(RPMDIR)/kno-@KNO_VERSION@-*.src.rpm \
		$(RPMDIR)/*/kno*-@KNO_VERSION@-*.rpm;

rpmupdate update-rpms freshrpms: cleanrpms
	rm -f status/rpms.done status/rpms.ready
	make -s status/rpms.done
dist/rpms.zip: status/rpms.done
	@rm -f dist/rpms.zip
	@zip dist/rpms.zip \
		$(RPMDIR)/kno*-@KNO_VERSION@-*.src.rpm \
		$(RPMDIR)/*/kno-*-@KNO_VERSION@-*.rpm

redhat rpms rpm: status/rpms.done

unsigned-rpms usrpms:
	make GPGID=none status/rpms.done

status/rpms.installed: status/rpms.done
	@( $(SUDO) rpm -Uvh dist/@target_cpu@/kno*@KNO_VERSION@*.rpm ) && \
	 ( $(SUDO) rpm -Uvh dist/kno-*@KNO_VERSION@*.src.rpm ) && \
	 touch $@
install-rpms rpminstall installrpms: status/rpms.installed

# Alpine packaging

ALPINE_PKGS=kno kno-dev kno-doc kno-static

dist/alpine/APKBUILD: dist/alpine/APKBUILD.in
	./config.status

staging/alpine:
	@@INSTALL@ -d $@

staging/alpine/APKBUILD: dist/alpine/APKBUILD staging/alpine
	cp dist/alpine/APKBUILD staging/alpine

staging/alpine/kno_@KNO_VERSION@.tar: dist/kno.tar staging/alpine
	cp dist/kno.tar $@

status/alpine.ready: dist/alpine/APKBUILD include/kno/kno_version.h makefile
        # We use `make` here rather than a dependency because otherwise
	# the dependent tar might be auto-deleted
	make staging/alpine/kno_@KNO_VERSION@.tar staging/alpine/APKBUILD && \
	if test ! -d ${APK_ARCH_DIR}; then mkdir -p ${APK_ARCH_DIR}; fi && \
	(cd staging/alpine; abuild -P ${APKREPO} clean cleancache cleanpkg && abuild checksum ) && \
	touch $@

status/alpine.done: status/alpine.ready
	(cd staging/alpine; abuild -P ${APKREPO}) && touch $@

## Unlike debian and rpms, alpine writes into the repository itself, in APK_REPO
## So we don't call the installer on the package files but from the package manager
##  directly.
status/alpine.installed:
	cd staging/alpine; \
	  apk add --force-overwrite \
	          --repository=${APKREPO}/staging \
	      ${ALPINE_PKGS}

alpine: status/alpine.done
install-alpine: status/alpine.installed

.PHONY: alpine

### Depending on the .buildmode

$(LISP_OBJS): $(LISP_HEADERS) $(VERSION_H) .buildmode 
$(SYS_OBJS): $(LISP_HEADERS) $(VERSION_H) .buildmode 
$(APPLY_OBJS): $(LISP_HEADERS) $(APPLY_HEADERS) $(VERSION_H) .buildmode 
$(STORAGE_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(VERSION_H) .buildmode 
$(DRIVER_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(DRIVERS_H) $(VERSION_H) .buildmode 
$(SCHEME_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(DRIVERS_H) \
	$(APPLY_HEADERS) $(SCHEME_HEADERS) $(VERSION_H) .buildmode 
$(WEB_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(DRIVERS_H) \
	$(APPLY_HEADERS) $(SCHEME_HEADERS) $(VERSION_H) ./include/kno/webtools.h .buildmode 
$(TEXT_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(DRIVERS_H) \
	$(APPLY_HEADERS) $(VERSION_H) $(SCHEME_HEADERS) ./include/kno/texttools.h .buildmode 
$(LISP_OBJS) $(SYS_OBJS) $(APPLY_OBJS): .buildmode
$(STORAGE_OBJS) $(DRIVER_OBJS): .buildmode
$(SCHEME_OBJS): .buildmode
$(WEB_OBJS) $(TEXT_OBJS): .buildmode
$(PYTHON_OBJS) $(TEXT_OBJS): $(LISP_HEADERS) $(APPLY_HEADERS) $(SCHEME_HEADERS) $(VERSION_H) .buildmode
$(CMODULE_OBJS): $(LISP_HEADERS) $(STORAGE_HEADERS) $(DRIVERS_H) \
	$(APPLY_HEADERS) $(SCHEME_HEADERS) $(VERSION_H) .buildmode

### Other dependencies

src/eval/choiceops.o src/prims/seqprims.o: include/kno/sorting.h
src/prims/procprims.o: include/kno/procprims.h

### Driver dependencies

src/drivers/filepool.o: src/drivers/headers/filepool.h
src/drivers/fileindex.o: src/drivers/headers/fileindex.h
src/drivers/kpool.o: src/drivers/headers/kpool.h src/drivers/headers/zcompress.h
src/drivers/bigpool.o: src/drivers/headers/bigpool.h src/drivers/headers/zcompress.h
src/drivers/hashindex.o: src/drivers/headers/hashindex.h  src/drivers/headers/zcompress.h
src/drivers/kindex.o: src/drivers/headers/kindex.h  src/drivers/headers/zcompress.h
src/drivers/logindex.o: src/drivers/headers/logindex.h
src/drivers/zip.o: src/drivers/headers/zip.h src/drivers/headers/miniz.h
src/drivers/zipsource.o: src/drivers/headers/zip.h src/drivers/headers/miniz.h
