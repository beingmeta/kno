#!/bin/sh

CONFIG_ARGS=
MAKE_ARGS=
TEST_ARGS=
INSTALL_ARGS=
OFFLINE=
SUFFIX=
BUILD=$(pwd)
SRC=$(dirname $(pwd))
ECHO=$(which echo)
doclean=1;

if [ -f ./.offline ]; then
    OFFLINE=yes
fi;

usage () {
    echo "Usage: ./build *options*";
    echo "       standard(default) | debug | production | nitpcick | fast | optimized | faster"
    echo "           (buildmode configuration)"
    echo "       libc|tcmalloc|jemalloc|asan|asan_noleak|tcmalloc_debug|tcmalloc_minimal|gperftools|asan_thread"
    echo "           (malloc library)"
    echo "       dev | livesources";
    echo "            (uses current directory sources as default library (libscm, etc) sources)";
    echo "       install";
    echo "            (installs after build)";
    echo "       tests | memtests | leaktests | libtests | schemetests | dbtests | cmdtests"
    echo "            (runs tests after build (but before installs)";
    echo "       --make=X or -MX"
    echo "           (adds X to the command line arguments to make)"
    echo "       --config=X or -CX";
    echo "           (adds X to the command line arguments to configure)"
    echo "       --suffix=.X"
    echo "           (uses .X as a suffix for directories, executables, and libraries)"
    echo "       coverage | gcov | cprofiling | xcprofiling";
    echo "           (C build options, xcprofiling disables even more optimizations)"
    echo "       nopython|noparseltongue python|parseltongue (default)";
    echo "           (controls building of the parseltongue Python bridge)"
    echo "       offline"
    echo "           (don't update from remote repositories)"
}
status () {
    if [ -f ".buildmode" ]; then
	val=$(cat .buildmode);
	${ECHO} -n "buildmode=${val} ";
    fi;
    if [ -f ".malloc" ]; then
	val=$(cat .malloc);
	${ECHO} -n "malloc=${val} ";
    fi;
    if [ -f ".suffix" ]; then
	val=$(cat .suffix);
	${ECHO} -n "suffix=${val} ";
    fi;
    if [ -f ".offline" ]; then
	${ECHO} -n "offline=yes ";
    fi;
}


LOCAL_STDLIB=${BUILD}/src/stdmods,${BUILD}/src/textmods,${BUILD}/src/webmods
while [ $# -gt 0 ]; do
    arg=$1
    case ${arg} in
	help|usage)
	    usage;
	    exit;
	    ;;
	offline)
	    OFFLINE=yes;
	    ;;
	current|.)
	    BRANCH="use_current_branch";
	    ;;
	noclean|keep)
	    doclean=1;
	    ;;
	dev|livesource|livesources)
	    CONFIG_ARGS="--with-libscm=${BUILD}/src/libscm/ --with-stdlibs=${LOCAL_STDLIB} ${CONFIG_ARGS}";
	    ;;
	ipeval)
	    CONFIG_ARGS="--with-ipeval ${CONFIG_ARGS}";
	    ;;
	coverage|gcov)
	    CONFIG_ARGS="--enable-gcov ${CONFIG_ARGS}";
	    MAKE_ARGS="${MAKE_ARGS} debug";
	    ;;
	libc|tcmalloc|jemalloc|asan|asan_noleak|tcmalloc_debug|tcmalloc_minimal|gperftools|asan_thread)
	    CONFIG_ARGS="--with-malloc=${arg} ${CONFIG_ARGS}"; 
	    ;;
	debug|production|nitpick|fast|standard|usable|working|optimized|faster)
	    MAKE_ARGS="${MAKE_ARGS} ${arg}";
	    ;;
	install|install-bin|install-docs)
	    INSTALL_ARGS="${INSTALL_ARGS} ${arg}";
	    ;;
	cprofiling)
	    CONFIG_ARGS="--enable-cprofiling=deep"
	    ;;
	xcprofiling)
	    CONFIG_ARGS="--enable-cprofiling=extreme"
	    ;;
	tests|memtests|leaktests|libtests|schemetests|dbtests|cmdtests)
	    TEST_ARGS="${TEST_ARGS} ${arg}";
	    ;;
	python|parseltongue)
	    with_parseltongue = yes
	    ;;
	nopython|noparseltongue)
	    with_parseltongue = no
	    ;;
	-[a-zA-Z])
	    MAKE_ARGS="${arg} ${MAKE_ARGS}"; 
	    ;;
	-M*)
	    MAKE_ARGS="${arg#-M} ${MAKE_ARGS}"; 
	    ;;
	--suffix=.*)
	    SUFFIX=${arg#--suffix=}
	    ;;
	--suffix=*)
	    SUFFIX=".${arg#--suffix=}"
	    ;;
	--make=*)
	    MAKE_ARGS="${arg#--make=} ${MAKE_ARGS}"; 
	    ;;
	-C*)
	    CONFIG_ARGS="${arg#-C} ${CONFIG_ARGS}"; 
	    ;;
	--config=*)
	    CONFIG_ARGS="${arg#--config=} ${CONFIG_ARGS}"; 
	    ;;
	-*)
	    CONFIG_ARGS="${arg} ${CONFIG_ARGS}"; 
	    ;;
	*=*)
	    MAKE_ARGS="${arg} ${MAKE_ARGS}"; 
	    ;;
	*)
	    if git branch -a | egrep "(^|/)${arg}$" > /dev/null; then
		if [ -z "${BRANCH}" ]; then
		    BRANCH=${arg};
		elif [ "${BRANCH}" = ${arg} ]; then
		    echo "Duplicate branch spec ${arg}";
		else
		    echo "Passing second branch name (${arg}) to MAKE";
		fi;
	    else
		MAKE_ARGS="${arg} ${MAKE_ARGS}"; 
	    fi;
	    ;;
    esac;
    shift;
done;

if [ "${with_parseltongue}" = "yes" ]; then
    CONFIG_ARGS="--with-parseltongue ${CONFIG_ARGS}"
fi;

if [ ! -z "${SUFFIX}" ]; then
    CONFIG_ARGS="--with-suffix=${SUFFIX} ${CONFIG_ARGS}";
elif [ -f .suffix ]; then
    SUFFIX=$(cat .suffix)
    CONFIG_ARGS="--with-suffix=${SUFFIX} ${CONFIG_ARGS}";
fi;

# Check if the branch is current, if so make the value "use_current_branch"
# This simplifies the doclean/noclean logic below
if [ ! -z ${BRANCH} ] && [ ! ${BRANCH} = "use_current_branch" ]; then
    if git branch | egrep "^[*] ${BRANCH}"; then
	BRANCH="use_current_branch";
    fi;
fi;

if [ -z "${BRANCH}" ]; then BRANCH=use_current_branch; fi

if [ ! -z "${DRY_RUN}" ]; then
    echo BRANCH=${BRANCH}
    echo MAKE_ARGS=${MAKE_ARGS}
    echo CONFIG_ARGS=${CONFIG_ARGS}
    exit;
fi;

if [ ! ${BRANCH} = "use_current_branch" ]; then
   git checkout ${BRANCH};
   ./distclean;
elif [ ${doclean} ]; then
   ./distclean;
else echo "Not cleaning distribution";
fi;

if [ ! -z "${OFFLINE}" ]; then
    echo "Initializing GIT submodules";
    git submodule init;
    git submodule update --remote --merge src/stdmods;
    git submodule update --remote --merge src/webmods;
    git submodule update --remote --merge src/textmods;
    git submodule update --remote --merge src/brico;
    git submodule update --remote --merge tests;
fi;

./configure ${CONFIG_ARGS}

git submodule update
    
make -j ${MAKE_ARGS} $* && 
    if [ ! -z "${TEST_ARGS}" ]; then make -j ${TEST_ARGS}; fi &&
    if [ ! -z "${INSTALL_ARGS}" ]; then make ${INSTALL_ARGS}; fi &&
    ${ECHO} -n "All done: "; status; echo;
