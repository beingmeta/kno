# -*- Mode: Makefile; -*-
# Copyright (C) 2004-2017 beingmeta, inc.
# This file is a part of beingmeta's FramerD implementation

FD_INIT_DLOADPATH=../../lib/framerd/%..@shared_suffix@:../../../aikit/c/%..@shared_suffix@:@prefix@/lib/framerd/%.@shared_suffix@
export FD_INIT_LOADPATH
FD_INIT_LOADPATH=../../src/scheme/%.scm:../../src/scheme/%/module.scm:@default_module_path@
export FD_INIT_LOADPATH
FD_INIT_SAFELOADPATH=../../src/scheme/safe/%.scm:../../src/scheme/safe/%/module.scm:@default_safe_module_path@
export FD_INIT_SAFELOADPATH
FD_LOADPATH=../../src/scheme/%/module.scm:../../src/scheme/%.scm:
export FD_LOADPATH
FD_DLOADPATH=../../lib/framerd
export FD_DLOADPATH
LD_LIBRARY_PATH=../../lib
export LD_LIBRARY_PATH
DYLD_LIBRARY_PATH=../../lib
export DYLD_LIBRARY_PATH
PPROF_PATH      = @GOOGLE_PPROF@
export PPROF_PATH
FD_QUIET        = yes
export FD_QUIET

CC	= @CC@
XCFLAGS=  
CFLAGS=-I../../include @CFLAGS@ @PROFILING@ @DREENTRANT@ @dynamic_cflag@ \
       -DFD_TESTCONFIG=1 -I../../include $(XCFLAGS)
LDFLAGS=-L../../lib @LDFLAGS@ $(EFENCE) @TESTLDFLAGS@ -L../../lib
RPATH   = @rpath@
RPATHFLAGS = @RPATHFLAGS@
BASELIBS=@LIBS@ -lm -lz
BMLIBS=-lu8io -lu8data -lu8
XLIBS=
LIBS=$(XLIBS) $(BMLIBS) $(BASELIBS)
EXELDFLAGS = @EXELDFLAGS@
CORE_LIBS	= ../../lib/libfdscheme@suffix@.a       \
	  	  	../../lib/libfdkbserv@suffix@.a  \
	 		../../lib/libfdkbdrivers@suffix@.a \
			../../lib/libfdkbase@suffix@.a     \
			../../lib/libfdtype@suffix@.a
EXTRA_LIBS	= ../../lib/libtexttools@suffix@.a \
		  ../../lib/libfdweb@suffix@.a \
		  ../../lib/libfdschemeio@suffix@.a

DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
CLEAN		= @CLEAN@
INSTALL		= @INSTALL@
TESTPROG	= 
MEMTESTER	= @memtester@
LEAKTESTER	= @leaktester@
TEST_ENV	= @test_env@
MEMTEST_ENV	= @memtest_env@
LEAKTEST_ENV	= @leaktest_env@
TESTSIZE	= 512
SMALLTESTSIZE	= 64
BASETESTCONFIG	= LOADPATH=../../src/scheme/%/module.scm:../../src/scheme/%.scm
RUNCONF		= @test_config@
MEMCONF		= @memtest_config@
LEAKCONF	= @leaktest_config@
RUN		= ${TEST_ENV} ${TESTPROG}
MEMTEST		= ${TEST_ENV} ${MEMTEST_ENV} ${MEMTESTER:-${TESTPROG}}
LEAKTEST	= ${TEST_ENV} ${LEAKTEST_ENV} ${LEAKTESTER:-${TESTPROG}}
DBTEST_FILES	= r4rs.scm misctest.scm seqtest.scm choicetest.scm dbtest.scm
TESTBASE	= tmptest
TESTFILE	= ${TESTBASE}.file
FDX		= ./fdexec@suffix@
OIDPOOL		= POOLTYPE=oidpool
BIGPOOL		= POOLTYPE=bigpool
SNAPPY		= COMPRESSION=snappy
ZPOOL		= COMPRESSION=zlib
FILEPOOL	= POOLTYPE=filepool
FILEINDEX	= INDEXTYPE=fileindex
HASHINDEX	= INDEXTYPE=hashindex
MEMINDEX	= INDEXTYPE=memindex
OFFB40		= OFFTYPE=B40
OFFB64		= OFFTYPE=B64
OFFB32		= OFFTYPE=B32

TESTBIN=fdeval fdconsole fdexec fdbatch fdserver fdservlet fdcgiexec # fdsh

# Note that we don't add @suffix@ to these executables because they're
# never installed
%.o: %.c
	@$(CC) $(CFLAGS) -o $@ -c $<
	@echo CC $@ $<

# This is for making shared test programs, when there are associated problems
%.shared: %.c
	@echo MKTEST_SHARED $@
	@$(CC) $(CFLAGS) $(EXELDFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) \
		-lfdtype@suffix@ -lfdkbase@suffix@ -lfdkbdrivers@suffix@ \
		-lfdscheme@suffix@ -lfdschemeio@suffix@

%: %.c $(EXTRA_LIBS) $(CORE_LIBS)
	@echo MKTEST_STATIC $@
	$(CC) $(CFLAGS) $(LDFLAGS) $(EXELDFLAGS) -o $@ $< 	\
		$(EXTRA_LIBS) $(CORE_LIBS) $(LIBS) -lu8stdio

# Base targets

default: alltests

fresh: clean
	make alltests

testbin: $(TESTBIN) 

fdcgiexec fdconsole fdexec fdserver fdservlet: main.c main.h

fdcgiexec fdservlet: webcommon.h

# Linking targets

fdconsole.c: ../../src/exe/fdconsole.c
	ln -s $< $@

fdexec.c: ../../src/exe/fdexec.c
	ln -s $< $@

fdbatch.c: ../../src/exe/fdbatch.c
	ln -s $< $@

fdserver.c: ../../src/exe/fdserver.c
	ln -s $< $@

fdservlet.c: ../../src/exe/fdservlet.c
	ln -s $< $@

fdcgiexec.c: ../../src/exe/fdcgiexec.c
	ln -s $< $@

main.c: ../../src/exe/main.c
	ln -s $< $@

main.h: ../../src/exe/main.h
	ln -s $< $@

webcommon.h: ../../src/exe/webcommon.h
	ln -s $< $@

# Clean targets

clean: testclean
	rm -f $(TESTBIN)
	find . -name "vgcore.*" | xargs rm -f
	find . -name "*.pid" | xargs rm -f
	rm -rf mongodb/dbdata;

testclean:
	rm -f *.log *.err *.done *.finished *.pid *.died
	rm -f tmp* utf8-temp* memoization.index test.dtype
	rm -f logfile thirty2fifty thirtythree 

# Static lib targets

../../lib/libfdweb@suffix@.a:
	cd ../..; make lib/libfdweb@suffix@.a
../../lib/libfdschemeio@suffix@.a:
	cd ../..; make lib/libfdschemeio@suffix@.a
../../lib/libfdscheme@suffix@.a:
	cd ../..; make lib/libfdscheme@suffix@.a
../../lib/libfdtype@suffix@.a:
	cd ../..; make lib/libfdtype@suffix@.a
../../lib/libfdkbase@suffix@.a:
	cd ../..; make lib/libfdkbase@suffix@.a
../../lib/libfdkbdrivers@suffix@.a:
	cd ../..; make lib/libfdkbdrivers@suffix@.a
../../lib/libtexttools@suffix@.a:
	cd ../..; make lib/libtexttools@suffix@.a
../../lib/libfdkbserv@suffix@.a:
	cd ../..; make lib/libfdkbserv@suffix@.a

# Extra dependencies

$(TESTBIN): $(EXTRA_LIBS) \
            ../../lib/libfdscheme@suffix@.a \
	    ../../lib/libfdkbase@suffix@.a ../../lib/libfdtype@suffix@.a

fdservlet: ../../src/exe/webcommon.h
fdcgiexec: ../../src/exe/webcommon.h

# Test targets

all_tests alltests: libtests cmdtests optimize_modules
	@echo "■■■■■■■■ Done with alltests"

libtests: scheme optscheme slotmaps tables pools indexes db
cmdtests: execscripts chainscripts batchscripts chained_batchscripts

schemetest schemetests scheme: r4rs exceptions choices sequences numvecs \
	picktest cachecall texttools fdweb timefns threads i18n misc gctests \
	xml crypto
optscheme: scheme
	@echo "■■■■■■■■ Running optimized scheme tests ${RUNCONF}"
	@${RUN} ${FDX} TESTOPTIMIZED=yes r4rs.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes choicetest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes seqtest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes misctest.scm ${RUNCONF}
	@echo "■■■■■■■■ Completed optimized scheme tests ${RUNCONF}"

loadmods load_modules:
	@echo "■■■■■■■■ Testing default module loads ${RUNCONF}"
	@${RUN} ${FDX} loadmods.scm ${RUNCONF}
	@echo "■■■■■■■■ Finished testing default module loads ${RUNCONF}"
optmods optimize_modules: load_modules
	@echo "■■■■■■■■ Testing optimized module loads ${RUNCONF}"
	@${RUN} ${FDX} optmods.scm ${RUNCONF}
	@echo "■■■■■■■■ Finished testing optimized module loads ${RUNCONF}"

.PHONY: scheme schemetest schemetests optscheme loadmodes load_modules optmodes optimize_modules

# Individual scheme tests

r4rs:
	@${RUN} ${FDX} r4rs.scm ${RUNCONF}
	@echo "■■■■ Completed r4rs tests ${RUNCONF}"
exceptions:
	@${RUN} ${FDX} exceptions.scm ${RUNCONF}
	@echo "■■■■ Completed exceptions tests ${RUNCONF}"
choices:
	@${RUN} ${FDX} choicetest.scm ${RUNCONF}
	@echo "■■■■ Completed choices tests ${RUNCONF}"
sequences:
	@${RUN} ${FDX} seqtest.scm ${RUNCONF}
	@echo "■■■■ Completed sequences tests ${RUNCONF}"
numvecs:
	@${RUN} ${FDX} numvecs.scm ${RUNCONF}
	@echo "■■■■ Completed numvecs tests ${RUNCONF}"
picktest:
	@${RUN} ${FDX} picktest.scm ${RUNCONF}
	@echo "■■■■ Completed picktest tests ${RUNCONF}"
cachecall:
	@${RUN} ${FDX} cachecall.scm ${RUNCONF}
	@echo "■■■■ Completed cachecall tests ${RUNCONF}"
texttools:
	@${RUN} ${FDX} texttest.scm ${RUNCONF}
	@echo "■■■■ Completed texttools tests ${RUNCONF}"
fdweb:
	@${RUN} ${FDX} fdwebtest.scm ${RUNCONF}
	@echo "■■■■ Completed fdweb tests ${RUNCONF}"
timefns:
	@${RUN} ${FDX} timefns.scm ${RUNCONF}
	@echo "■■■■ Completed timefns tests ${RUNCONF}"
threads:
	@${RUN} ${FDX} threadtest.scm ${RUNCONF}
	@echo "■■■■ Completed threads tests ${RUNCONF}"
i18n:
	@${RUN} ${FDX} i18n.scm ${RUNCONF}
	@echo "■■■■ Completed i18n tests ${RUNCONF}"
misc:
	@${RUN} ${FDX} misctest.scm ${RUNCONF}
	@echo "■■■■ Completed misc tests ${RUNCONF}"
gctests:
	@${RUN} ${FDX} gctests.scm ${RUNCONF}
	@echo "■■■■ Completed GC tests ${RUNCONF}"
xml:
	@${RUN} ${FDX} xmltest.scm ${RUNCONF}
	@echo "■■■■ Completed xml tests ${RUNCONF}"
crypto:
	@${RUN} ${FDX} cryptotest.scm ${RUNCONF}
	@echo "■■■■ Completed crypto tests ${RUNCONF}"


# Table tests

tabletest:
	@${RUN} ${FDX} tabletest.scm ${TESTFILE} ${TESTSIZE} ${RUNCONF} && \
	 ${RUN} ${FDX} tabletest.scm ${TESTFILE} ${RUNCONF} && \
	 rm ${TESTFILE}

slotmaptests slotmaps:
	@make TESTFILE=${TESTBASE}.slotmap tabletest

tabletests hashtables:
	@make TESTFILE=${TESTBASE}.hashtable tabletest

.PHONY: slotmaptests slotmaps tabletests tables

# Pool tests

pooltest:
	@echo "■■■■■■■■ Running pool tests ${TESTBASE} ${RUNCONF}"
	@rm -f ${TESTBASE}.pool
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool ${RUNCONF}
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool CACHELEVEL=1 ${RUNCONF}
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool CACHELEVEL=2 ${RUNCONF}

filepooltest:
	@make TESTBASE=filepool RUNCONF="${FILEPOOL} ${RUNCONF}" pooltest

oidpooltest:
	@make TESTBASE=oidpool RUNCONF="${OIDPOOL} ${RUNCONF}" pooltest
oidpool32test:
	@make TESTBASE=oidpool32 RUNCONF="${OIDPOOL} ${OFFB32} ${RUNCONF}" pooltest
oidpool64test:
	@make TESTBASE=oidpool64 RUNCONF="${OIDPOOL} ${OFFB64} ${RUNCONF}" pooltest

bigpooltest:
	@make TESTBASE=bigpool RUNCONF="${BIGPOOL} ${RUNCONF}" pooltest
bigpool32test:
	@make TESTBASE=bigpool32 RUNCONF="${BIGPOOL} ${OFFB32} ${RUNCONF}" pooltest
bigpool64test:
	@make TESTBASE=bigpool64 RUNCONF="${BIGPOOL} ${OFFB64} ${RUNCONF}" pooltest
bigpoolsnappytest:
	@make TESTBASE=bigpoolsnappy RUNCONF="${BIGPOOL} ${SNAPPY} ${RUNCONF}" pooltest
bigpoolzlibtest:
	@make TESTBASE=bigpoolzlib RUNCONF="${BIGPOOL} ${ZPOOL} ${RUNCONF}" pooltest

bigpooltests: bigpooltest bigpool32test bigpool64test bigpoolsnappytest bigpoolzlibtest
oidpooltests: oidpooltest oidpool32test oidpool64test

pooltests pools: filepooltest oidpooltests bigpooltests

.PHONY: pooltests pool

# Index tests

indextest:
	@echo "■■■■■■■■ Running index tests ${TESTBASE} ${RUNCONF}"
	@rm -f *.edit.dtype ${TESTBASE}
	# Build with the offsets cache off
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF}             && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CONSINDEX=yes  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	rm ${TESTBASE}
	# Build with the offsets cache on
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	rm ${TESTBASE}
	# Build with both cache and consindices
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype \
		${RUNCONF} && \
	rm -f ${TESTBASE} *.edit.dtype
	@echo "■■■■■■■■ Finished index tests ${TESTBASE} ${RUNCONF}"

fileindexes fileindex:
	@make TESTBASE=tmpfile.index RUNCONF="INDEXTYPE=fileindex" indextest

memindexes memindex:
	@make TESTBASE=memfile.index RUNCONF="INDEXTYPE=memindex" indextest

hashindex32:
	@make TESTBASE=tmphash32.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B32" indextest
hashindex40:
	@make TESTBASE=tmphash40.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B40" indextest
hashindex64:
	@make TESTBASE=tmphash64.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B64" indextest

hashindexes hashindex: hashindex32 hashindex40 hashindex64

indextests indexes: fileindexes hashindexes memindexes

.PHONY: indexes indextests fileindexes hashindexes memindexes

# Database/frames test

dbtest:
	@echo "■■■■■■■■ Running frame/database tests, ${TESTBASE} ${TESTSIZE} ${RUNCONF}";
	rm -f ${TESTBASE}db.pool ${TESTBASE}db.index
	@${RUN} ${FDX} dbtest.scm ${TESTBASE}db init \
		COUNT=${TESTSIZE} ${DBTEST_FILES} \
		${RUNCONF};
	@${RUN} ${FDX} dbtest.scm ${TESTBASE}db COUNT=${TESTSIZE} ${RUNCONF};
	@${RUN} ${FDX} dbtest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=2;
	@echo "■■■■■■■■ Testing database creation with CACHELEVEL=2";
	@${RUN} ${FDX} dbtest.scm ${TESTBASE}db init COUNT=${TESTSIZE} 	\
		${DBTEST_FILES} ${RUNCONF} CACHELEVEL=2;
	@${RUN} ${FDX} dbtest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=2;
	@echo "■■■■■■■■ Finished frame/database tests, ${TESTBASE} ${TESTSIZE} ${RUNCONF} ■■■■■■■■■■■■■■■■";

dbtest_oidpool32:
	@make TESTBASE=tmpoidpool32 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB32}" dbtest
dbtest_oidpool40:
	@make TESTBASE=tmpoidpool40 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB40}" dbtest
dbtest_oidpool64:
	@make TESTBASE=tmpoidpool64 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB64}" dbtest
dbtest_bigpool32:
	@make TESTBASE=tmpbigpool32 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB32}" dbtest
dbtest_bigpool40:
	@make TESTBASE=tmpbigpool40 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40}" dbtest
dbtest_bigpool64:
	@make TESTBASE=tmpbigpool64 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB64}" dbtest
dbtest_fileindex:
	@make TESTBASE=tmpfileindex RUNCONF="${BIGPOOL} ${FILEINDEX} ${OFFB40}" dbtest
dbtest_memindex:
	@make TESTBASE=tmpmemindex RUNCONF="${BIGPOOL} ${MEMINDEX} ${OFFB40}" dbtest
dbtest_base:
	@make TESTBASE=testdb RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40}" dbtest

dbtests db: dbtest_base dbtest_oidpool32 dbtest_oidpool40 dbtest_oidpool64 \
	dbtest_bigpool32 dbtest_bigpool40 dbtest_bigpool64 \
	dbtest_fileindex dbtest_memindex

.PHONY: dbtests db dbtest

# Miscellanous module tests

randomtests:
	@echo "■■■■■■■■ Running alltests with a really random seed"
	make RUNCONF="RANDOMSEED=TIME ${RUNCONF}" alltests
	@echo "■■■■■■■■ Finished alltests with a really random seed"

.PHONY: randomtests xml xmltests crypto cryptotests

# Scripting tests

execscripts:
	@echo "■■■■■■■■ Running exec tests ■■■■■■■■"
	./fdexec ./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "■■■■■■■■ Running exec test as script ■■■■■■■■"
	./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "■■■■■■■■ Done with exec tests ■■■■■■■■"

chainscripts: execscripts
	@echo "■■■■■■■■ Testing scripts which call CHAIN"
	./fdexec chaintest.scm
	./fdexec chaintest.scm 0 30
	./fdexec chaintest.scm 10 50
	@echo "■■■■■■■■ Done testing scripts which call CHAIN"

batchscripts:
	@echo "■■■■■■■■ Testing fdbatch execution success and cleanliness"
	@rm -f _countup.log _countup.err _countup.done
	@rm -f  _countup.finished _countup.died _countup.pid
	./fdbatch countup.scm "_countup.finished" 10 1; sleep 3
	@if (test ! -f _countup.pid); then 	\
		echo error; 			\
           exit 1; 				\
	   fi; 					\
	 sleep 12;
	# This was written by fdbatch itself
	@if (test ! -s _countup.done); then	\
		echo _countup.done error; 	\
	  	exit 1;				\
         fi;
	# This was written by the script
	@if (test ! -s _countup.finished); then		\
	   echo fdbatch success _countup.finished error;	\
	   exit 1;  						\
	 fi;
	@if (test ! -f _countup.err); then		\
		echo fdbatch success _countup.err error;	\
		exit 1; 					\
         fi;
	@if (test ! -s _countup.log); then		\
		echo fdbatch success _countup.log error;	\
		exit 1; 					\
	 fi;
	# These should have been deleted on successful exit
	@if (test -f _countup.died); then			\
		echo fdbatch success _countup.died error;	\
		exit 1; 						\
	 fi;
	@if (test -f _countup.pid); then			\
		echo fdbatch success _countup.pid error; \
		exit 1; 					\
         fi;
	@rm -f _countup.pid _countup.log _countup.err
	@rm -f _countup.done _countup.finished _countup.died
	@echo "■■■■■■■■ "Done with fdbatch success test""
	@echo "■■■■■■■■ "Starting fdbatch failure test""
	./fdbatch countup.scm ERROR=yes "_countup.finished" 10 1;
	@sleep 12;
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error;	\
		exit 1; 					\
		fi;
	@if (test -f _countup.done); then			\
		echo fdbatch failure _countup.done error;	\
		exit 1; 						\
	 fi;
	# This should have been created at exit
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure countup.died error;	\
		exit 1; 					\
	 fi;
	@echo "■■■■■■■■ "Done with fdbatch failure test""
	@echo "■■■■■■■■ "Starting fdbatch kill test""
	./fdbatch countup.scm "_countup.killed" 10 1;
	@sleep 3;
	@kill -9 `cat _countup.pid`; sleep 12
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error; \
		exit 1; 					\
	 fi;
	@# This should have been deleted by the watch process
	@if (test -f _countup.done); then 		\
		echo fdbatch failure _countup.done error;\
		exit 1; 					\
	 fi;
	@# This should have been created at exit by the watch process
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure _countup.died error;\
		exit 1; 					\
	 fi;
	@echo "■■■■■■■■ "Done with fdbatch kill test""

chained_batchscripts:
	@echo "■■■■■■■■ Testing batch scripts which call CHAIN"
	@rm -f _chaintest.*
	./fdbatch chaintest.scm
	@echo "■■■■■■■■ Done testing batch scripts which call CHAIN"

.PHONY: chained_batchscripts batchscripts chainscripts execscripts

# SMP tests

smp smptests: smp_hashtables smp_slotmaps smp_indexes smp_pools

smp_hashtables:
	make RUNCONF="NTHREADS=5" hashtables

smp_slotmaps:
	make RUNCONF="NTHREADS=5" slotmaps

smp_indexes:
	make RUNCONF="NTHREADS=5" indexes

smp_pools:
	make RUNCONF="NTHREADS=5" pools

# Memory integrity tests

heaptest memtest memtests: all_memtests

all_memtests: scheme_memtests \
	slotmap_memtests table_memtests \
	pool_memtests index_memtests db_memtests \
	crypto_memtests load_modules_memtest

scheme_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on scheme/scripting layer"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" scheme
	@echo "■■■■■■■■ Finished heap integrity tests on scheme/scripting layer"

slotmap_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on tables"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" slotmaps
	@echo "■■■■■■■■ Finished heap integrity tests tables"

table_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on tables"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" tables
	@echo "■■■■■■■■ Finished heap integrity tests tables"

pool_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on pools"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" pools
	@echo "■■■■■■■■ Finished heap integrity tests on pools"

index_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on indexes and index drivers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "■■■■■■■■ Finished heap integrity tests on indexes and index drivers"

frames_memtests db_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on database layers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" db
	@echo "■■■■■■■■ Finished heap integrity tests on database layers"

crypto_memtests:
	@echo "■■■■■■■■ Running heap integrity tests on crypto functions"
	make TESTPROG="${VALGRINDHEAP}" crypto
	@echo "■■■■■■■■ Finished heap integrity tests on crypto functions"

load_modules_memtest:
	@echo "■■■■■■■■ Running heap integrity tests on builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" load_modules
	@echo "■■■■■■■■ Finished heap integrity tests on builtin modules"

optimize_modules_memtest:
	@echo "■■■■■■■■ Running heap integrity tests on optimized builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@echo "■■■■■■■■ Finished heap integrity tests on optimized builtin modules"

.PHONY: memtest memtest
.PHONY:	all_memtests scheme_memtests table_memtests
.PHONY:	pool_memtests index_memtests db_memtests
.PHONY:	crypto_memtests load_modules_memtest
.PHONY:	optimize_modules_memtest

# Leaktests

heaptests heaptest heap leak leaks leaktest leaktests: all_leaktests

all_leaktests: scheme_leaktests \
	slotmap_leaktests table_leaktests \
	pool_leaktests index_leaktests db_leaktests \
	crypto_leaktest load_modules_leaktest

scheme_leaktests:
	@echo "■■■■■■■■ Running leak tests on scheme/scripting layer"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" scheme
	@echo "■■■■■■■■ Finished leak tests on scheme/scripting layer"

slotmap_leaktests:
	@echo "■■■■■■■■ Running leak tests on slotmaps"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" slotmaps
	@echo "■■■■■■■■ Finished leak tests tables"

table_leaktests:
	@echo "■■■■■■■■ Running leak tests on hashtables"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" tables
	@echo "■■■■■■■■ Finished leak tests tables"

pool_leaktests:
	@echo "■■■■■■■■ Running leak tests on pools"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" pools
	@echo "■■■■■■■■ Finished leak tests on pools"

index_leaktests:
	@echo "■■■■■■■■ Running leak tests on indexes and index drivers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "■■■■■■■■ Finished leak tests on indexes and index drivers"

frames_leaktest db_leaktests:
	@echo "■■■■■■■■ Running leak tests on database layers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" db
	@echo "■■■■■■■■ Finished leak tests on database layers"

crypto_leaktest:
	@echo "■■■■■■■■ Running leak tests on crypto functions"
	make TESTPROG="${VALGRINDHEAP}" crypto
	@echo "■■■■■■■■ Finished leak tests on crypto functions"

load_modules_leaktest:
	@echo "■■■■■■■■ Running leak tests on builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" load_modules
	@echo "■■■■■■■■ Finished leak tests on builtin modules"

optimize_modules_leaktest:
	@echo "■■■■■■■■ Running leak tests on optimized builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@echo "■■■■■■■■ Finished leak tests on optimized builtin modules"

.PHONY: leaktest leaktest
.PHONY:	all_leaktest scheme_leaktest table_leaktests
.PHONY:	pool_leaktests index_leaktests db_leaktests
.PHONY:	crypto_leaktest load_modules_leaktest
.PHONY:	optimize_modules_leaktest

