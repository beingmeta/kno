# -*- Mode: Makefile; -*-
# Copyright (C) 2004, 2005 beingmeta, inc.
# This file is a part of beingmeta's FramerD implementation, EFramerD.

CC	= @CC@
XCFLAGS=  
CFLAGS=-I../../include @CFLAGS@ @PROFILING@ @DREENTRANT@ @dynamic_cflag@ \
       -DFD_TESTCONFIG=1 -I../../include $(XCFLAGS)
LDFLAGS=-L../../lib @LDFLAGS@ $(EFENCE) @TESTLDFLAGS@ -L../../lib
RPATH   = @rpath@
RPATHFLAGS = @RPATHFLAGS@
BASELIBS=@LIBS@ -lm -lz
BMLIBS=-lu8io -lu8data -lu8
XLIBS=
LIBS=$(XLIBS) $(BMLIBS) $(BASELIBS)
EXELDFLAGS = @EXELDFLAGS@
CORE_LIBS	= ../../lib/libfdscheme@suffix@.a       \
	  	  	../../lib/libfdbserv@suffix@.a  \
	 		../../lib/libfddbfile@suffix@.a \
			../../lib/libfddb@suffix@.a     \
			../../lib/libfdtype@suffix@.a
EXTRA_LIBS	= ../../lib/libtexttools@suffix@.a \
		  ../../lib/libfdweb@suffix@.a \
		  ../../lib/libfdschemeio@suffix@.a

FD_LOADPATH=../../src/modules/%/module.scm:../../src/modules/%.scm:
export FD_LOADPATH
FD_DLOADPATH=../../lib/framerd
export FD_DLOADPATH
LD_LIBRARY_PATH=../../lib
export LD_LIBRARY_PATH
DYLD_LIBRARY_PATH=../../lib
export DYLD_LIBRARY_PATH

DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
CLEAN		= @CLEAN@
INSTALL		= @INSTALL@
VALGRIND	= INVALGRIND=yes MEMCHECKING=yes valgrind --tool=memcheck --num-callers=9
VALGRINDHEAP	= INVALGRIND=yes MEMCHECKING=yes valgrind --tool=memcheck --leak-check=yes --num-callers=9
TESTPROG	= 
TESTENV		= @TESTENV@
TESTSIZE	= 512
SMALLTESTSIZE	= 64
TESTCONFIG	= 
RUNTEST		= $(TESTENV) $(TESTPROG)
DBTEST_FILES	= r4rs.scm misctest.scm seqtest.scm choicetest.scm dbtest.scm
PPROF_PATH      = @GOOGLE_PPROF@

TESTBIN=fdeval fdconsole fdexec fdbatch fdserver fdservlet fdcgiexec # fdsh

# Note that we don't add @suffix@ to these executables because they're
# never installed
%.o: %.c
	@$(CC) $(CFLAGS) -o $@ -c $<
	@echo CC $@ $<

# This is for making shared test programs, when there are associated problems
%.shared: %.c
	@echo MKTEST_SHARED $@
	@$(CC) $(CFLAGS) $(EXELDFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) \
		-lfdtype@suffix@ -lfddb@suffix@ -lfddbfile@suffix@ \
		-lfdscheme@suffix@ -lfdschemeio@suffix@

%: %.c $(EXTRA_LIBS) $(CORE_LIBS)
	@echo MKTEST_STATIC $@
	$(CC) $(CFLAGS) $(LDFLAGS) $(EXELDFLAGS) -o $@ $< 	\
		$(EXTRA_LIBS) $(CORE_LIBS) $(LIBS) -lu8stdio

# Base targets

default: alltests

testbin: $(TESTBIN) 

fdcgiexec fdconsole fdexec fdserver fdservlet: main.c main.h

fdcgiexec fdservlet: webcommon.h

# Linking targets

fdconsole.c: ../../src/exe/fdconsole.c
	ln -s $< $@

fdexec.c: ../../src/exe/fdexec.c
	ln -s $< $@

fdbatch.c: ../../src/exe/fdbatch.c
	ln -s $< $@

fdserver.c: ../../src/exe/fdserver.c
	ln -s $< $@

fdservlet.c: ../../src/exe/fdservlet.c
	ln -s $< $@

fdcgiexec.c: ../../src/exe/fdcgiexec.c
	ln -s $< $@

main.c: ../../src/exe/main.c
	ln -s $< $@

main.h: ../../src/exe/main.h
	ln -s $< $@

webcommon.h: ../../src/exe/webcommon.h
	ln -s $< $@

# Clean targets

clean: testclean
	rm -f $(TESTBIN)
	find . -name "vgcore.*" | xargs rm -f
	find . -name "*.pid" | xargs rm -f
	rm -rf mongodb/dbdata;

testclean:
	rm -f *.log *.err *.done *.finished *.pid *.died
	rm -f temp.* utf8-temp.* testdb* memoization.index test.dtype
	rm -f logfile thirty2fifty thirtythree 


# Static lib targets

../../lib/libfdweb@suffix@.a:
	cd ../..; make lib/libfdweb@suffix@.a
../../lib/libfdschemeio@suffix@.a:
	cd ../..; make lib/libfdschemeio@suffix@.a
../../lib/libfdscheme@suffix@.a:
	cd ../..; make lib/libfdscheme@suffix@.a
../../lib/libfdtype@suffix@.a:
	cd ../..; make lib/libfdtype@suffix@.a
../../lib/libfddb@suffix@.a:
	cd ../..; make lib/libfddb@suffix@.a
../../lib/libfddbfile@suffix@.a:
	cd ../..; make lib/libfddbfile@suffix@.a
../../lib/libtexttools@suffix@.a:
	cd ../..; make lib/libtexttools@suffix@.a
../../lib/libfdbserv@suffix@.a:
	cd ../..; make lib/libfdbserv@suffix@.a

# Extra dependencies

$(TESTBIN): $(EXTRA_LIBS) \
            ../../lib/libfdscheme@suffix@.a \
	    ../../lib/libfddb@suffix@.a ../../lib/libfdtype@suffix@.a

fdservlet: ../../src/exe/webcommon.h
fdcgiexec: ../../src/exe/webcommon.h

# Test targets

alltests: schemetests exectests tabletests \
	  indextests hashindextests dbtests optall \
	  chaintests batchtests batchchaintests
	@echo "*** Done with alltests"

cmdtests: exectests chaintests batchtests batchchaintests
	@echo "*** Done with alltests"

schemetests:
	@echo "*** Running scheme tests to exercise the data/eval layer"
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) r4rs.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes r4rs.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) exceptions.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) choicetest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes choicetest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) seqtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes seqtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) numvecs.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) picktest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) cachecall.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) texttest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) fdwebtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) timefns.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) threadtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) i18n.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) misctest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes misctest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) xmltest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) cryptotest.scm
	@echo "*** Completed scheme tests to exercise the data/eval layer"
optimizer-tests:
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes r4rs.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes choicetest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) TESTOPTIMIZED=yes seqtest.scm

optall:
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) optall.scm

tabletests:
	@echo "*** Running scheme tests to exercise the table/index layer"
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.table $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.table
	@echo "*** Completed scheme tests to exercise the table/index layer"

indextests:
	@echo "*** Running scheme tests to exercise file indices "
	@rm -f edit.dtype
	# The cache is off by default
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Test reading with the cache on, consed indices, and both
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CACHELEVEL=2 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CONSINDEX=yes 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index \
		CACHELEVEL=2 CONSINDEX=yes
	# Do test edits (no cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# New test, building with cache enabled
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE) CACHELEVEL=2
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CACHELEVEL=2
	# Try testing without the cache
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Do test edits (with cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype \
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# Build with both cache and consindices
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE) \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Do test edits (with cache and consindex)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype \
		CACHELEVEL=2 CONSINDEX=yes
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	@echo "*** Completed scheme tests to exercise file indices "

hashindextests:
	@echo "*** Running scheme tests to exercise hash indices "
	# The cache is off by default
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Test reading with the cache on, consed indices, and both
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CACHELEVEL=2 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CONSINDEX=yes 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex \
		CACHELEVEL=2 CONSINDEX=yes
	# Do test edits (no cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# New test, building with cache enabled
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE) CACHELEVEL=2
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CACHELEVEL=2
	# Try testing without the cache
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Do test edits (with cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype \
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# Build with both cache and consindices
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE) \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Do test edits (with cache and consindex)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype \
		CACHELEVEL=2 CONSINDEX=yes
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	@echo "*** Completed scheme tests to exercise hash indices "


dbtests:
	@echo "*** Running scheme tests to exercise the database layer"
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) testdb init $(DBTEST_FILES)
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) COUNT=$(TESTSIZE) testdb
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb init $(DBTEST_FILES)
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb
	@echo "*** Finished scheme tests to exercise the database layer"

dbhashtests:
	@echo "*** Running scheme tests to exercise the database layer with hashindices"
	make FD_HASHINDEX=yes dbtests
	make FD_HASHINDEX="(COMPRESS B40)" dbtests
	@echo "*** Completed scheme tests to exercise the database layer with hashindices"

dbhash32tests:
	@echo "*** Running scheme tests to exercise hashindices with B32 reprepresentation "***""
	make FD_HASHINDEX=yes dbtests
	make FD_HASHINDEX="(COMPRESS B32)" dbtests
	@echo "*** Completed scheme tests to exercise hashindices with B32 reprepresentation "***""

oidpooltests:
	@echo "*** Running scheme tests to exercise hashindices with B32 reprepresentation "***""
	make FD_HASHINDEX=yes OIDPOOL=yes dbtests
	make FD_HASHINDEX="(B32)" FD_OIDPOOL="FD_OIDPOOL=(B40)" dbtests
	make FD_HASHINDEX="(B40)" FD_OIDPOOL="FD_OIDPOOL=(B40)" dbtests
	make FD_HASHINDEX="(B64)" FD_OIDPOOL="FD_OIDPOOL=(B64)" dbtests
	make FD_HASHINDEX="(COMPRESS B32)" FD_OIDPOOL="FD_OIDPOOL=(B32)" dbtests
	@echo "*** Completed scheme tests to exercise hashindices with B32 reprepresentation "***""

cryptotests:
	@echo "*** Running crypto tests ***"
	$(RUNTEST) ./fdexec@suffix@ cryptotest.scm $(TESTCONFIG)
	@echo "*** Completed crypto tests ***"

xmltests:
	@echo "*** Running xml tests ***"
	$(RUNTEST) ./fdexec@suffix@ xmltests.scm $(TESTCONFIG)
	@echo "*** Completed xml tests ***"
exectests:
	@echo "*** Running exec tests ***"
	./fdexec ./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "*** Running exec test as script ***"
	./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "*** Done with exec tests ***"

memtests: @memtest_prefix@memtests
memschemetests: @memtest_prefix@memschemetests
memtabletests: @memtest_prefix@memtabletests
memindextests: @memtest_prefix@memindextests
memhashindextests: @memtest_prefix@memhashindextests
memdbtests: @memtest_prefix@memdbtests
memdbhashtests: @memtest_prefix@memdbhashtests
memcryptotests: @memtest_prefix@memcryptotests

vg_memtests:
	@echo "*** Running alltests with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) alltests
	@echo "*** Finished running alltests with valgrind memory debugging"

vg_memschemetests:
	@echo "*** Running tests on data/eval layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) schemetests
	@echo "*** Finished running tests on data/eval layers with valgrind memory debugging"

vg_memtabletests:
	@echo "*** Running tests on table/index layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) tabletests
	@echo "*** Finished running tests on table/index layers with valgrind memory debugging"

vg_memindextests:
	@echo "*** Running tests on table/index layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) indextests
	@echo "*** Finished running tests on table/index layers with valgrind memory debugging"

vg_memhashindextests:
	@echo "*** Running tests on table/index layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) hashindextests
	@echo "*** Finished running tests on table/index layers with valgrind memory debugging"

vg_memdbtests:
	@echo "*** Running tests on database layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) dbtests dbhashtests
	@echo "*** Finished running tests on database layers with valgrind memory debugging"

vg_memdbhashtests:
	@echo "*** Running tests on database layers with valgrind memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(SMALLTESTSIZE) dbhashtests
	@echo "*** Finished running tests on database layers with valgrind memory debugging"

vg_memcryptotests:
	make "TESTPROG=$(VALGRIND)" cryptotests

builtin_memtests:
	@echo "*** Running alltests with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 alltests
	@echo "*** Finished running alltests with memory debugging"

builtin_memschemetests:
	@echo "*** Running tests on data/eval layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 schemetests
	@echo "*** Finished running tests on data/eval layers with memory debugging"

builtin_memtabletests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 tabletests
	@echo "*** Finished running tests on table/index layers with memory debugging"

builtin_memindextests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 indextests
	@echo "*** Finished running tests on table/index layers with memory debugging"

builtin_memhashindextests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 hashindextests
	@echo "*** Finished running tests on table/index layers with memory debugging"

builtin_memdbtests:
	@echo "*** Running tests on database layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 dbtests dbhashtests
	@echo "*** Finished running tests on database layers with memory debugging"

builtin_memdbhashtests:
	@echo "*** Running tests on database layers with memory debugging"
	make @memtest_env@ TESTSIZE=$(TESTSIZE)/4 dbhashtests
	@echo "*** Finished running tests on database layers with memory debugging"

builtin_memcryptotests:
	make @memtest_env@ cryptotests

heaptests: @heaptest_prefix@heaptests
heapschemetests: @heaptest_prefix@heapschemetests
heaptabletests: @heaptest_prefix@heaptabletests
heapindextests: @heaptest_prefix@heapindextests
heapdbtests: @heaptest_prefix@heapdbtests

vg_heaptests:
	@echo "*** Running alltests with valgrind heap debugging"
	make "TESTPROG=$(VALGRINDHEAP)" TESTSIZE=$(SMALLTESTSIZE) alltests
	@echo "*** Finished running alltests with valgrind heap debugging"

vg_heapschemetests:
	@echo "*** Running tests on data/eval layers with valgrind heap debugging"
	make "TESTPROG=$(VALGRINDHEAP)" TESTSIZE=$(SMALLTESTSIZE) schemetests
	@echo "*** Finished running tests on data/eval layers with valgrind heap debugging"

vg_heaptabletests:
	@echo "*** Running tests on table/index layers with valgrind heap debugging"
	make "TESTPROG=$(VALGRINDHEAP)" TESTSIZE=$(SMALLTESTSIZE) tabletests
	@echo "*** Finished running tests on table/index layers with valgrind heap debugging"

vg_heapindextests:
	@echo "*** Running tests on table/index layers with valgrind heap debugging"
	make "TESTPROG=$(VALGRINDHEAP)" TESTSIZE=$(SMALLTESTSIZE) indextests
	@echo "*** Finished running tests on table/index layers with valgrind heap debugging"

vg_heapdbtests:
	@echo "*** Running tests on database layers with valgrind heap debugging"
	make "TESTPROG=$(VALGRINDHEAP)" TESTSIZE=$(SMALLTESTSIZE) dbtests dbhashtests
	@echo "*** Finished running tests on database layers with valgrind heap debugging"

vg_heapcryptotests:
	make "TESTPROG=$(VALGRINDHEAP)" cryptotests

builtin_heaptests:
	@echo "*** Running alltests with gperftools memory debugging"
	make @heaptest_env@ TESTSIZE=$(SMALLTESTSIZE) alltests
	@echo "*** Finished running alltests with gperftools memory debugging"

builtin_heapschemetests:
	@echo "*** Running tests on data/eval layers with gperftools memory debugging"
	make @heaptest_env@ TESTSIZE=$(SMALLTESTSIZE) schemetests
	@echo "*** Finished running tests on data/eval layers with gperftools memory debugging"

builtin_heaptabletests:
	@echo "*** Running tests on table/index layers with gperftools memory debugging"
	make @heaptest_env@ TESTSIZE=$(SMALLTESTSIZE) tabletests
	@echo "*** Finished running tests on table/index layers with gperftools memory debugging"

builtin_heapindextests:
	@echo "*** Running tests on table/index layers with gperftools memory debugging"
	make @heaptest_env@ TESTSIZE=$(SMALLTESTSIZE) indextests
	@echo "*** Finished running tests on table/index layers with gperftools memory debugging"

builtin_heapdbtests:
	@echo "*** Running tests on database layers with gperftools memory debugging"
	make @heaptest_env@ TESTSIZE=$(SMALLTESTSIZE) dbtests dbhashtests
	@echo "*** Finished running tests on database layers with gperftools memory debugging"

builtin_heapcryptotests:
	make @heaptest_env@ cryptotests

randomtests:
	@echo "*** Running alltests with a really random seed"
	make "TESTCONFIG=RANDOMSEED=TIME" alltests
	@echo "*** Finished alltests with a really random seed"

chaintests:
	@echo "*** Testing scripts which call CHAIN"
	./fdexec chaintest.scm
	./fdexec chaintest.scm 0 30
	./fdexec chaintest.scm 10 50
	@echo "*** Done testing scripts which call CHAIN"

batchtests:
	@echo "*** Testing fdbatch execution success and cleanliness"
	@rm -f _countup.log _countup.err _countup.done
	@rm -f  _countup.finished _countup.died _countup.pid
	./fdbatch countup.scm "_countup.finished" 10 1; sleep 3
	@if (test ! -f _countup.pid); then 	\
		echo error; 			\
           exit 1; 				\
	   fi; 					\
	 sleep 12;
	# This was written by fdbatch itself
	@if (test ! -s _countup.done); then	\
		echo _countup.done error; 	\
	  	exit 1; 				\
         fi;
	# This was written by the script
	@if (test ! -s _countup.finished); then		\
	   echo fdbatch success _countup.finished error;	\
	   exit 1;  						\
	 fi;
	@if (test ! -f _countup.err); then		\
		echo fdbatch success _countup.err error;	\
		exit 1; 					\
         fi;
	@if (test ! -s _countup.log); then		\
		echo fdbatch success _countup.log error;	\
		exit 1; 					\
	 fi;
	# These should have been deleted on successful exit
	@if (test -f _countup.died); then			\
		echo fdbatch success _countup.died error;	\
		exit 1; 						\
	 fi;
	@if (test -f _countup.pid); then			\
		echo fdbatch success _countup.pid error; \
		exit 1; 					\
         fi;
	@rm -f _countup.pid _countup.log _countup.err
	@rm -f _countup.done _countup.finished _countup.died
	@echo "*** "Done with fdbatch success test""
	@echo "*** "Starting fdbatch failure test""
	./fdbatch countup.scm ERROR=yes "_countup.finished" 10 1;
	@sleep 12;
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error;	\
		exit 1; 					\
		fi;
	@if (test -f _countup.done); then			\
		echo fdbatch failure _countup.done error;	\
		exit 1; 						\
	 fi;
	# This should have been created at exit
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure countup.died error;	\
		exit 1; 					\
	 fi;
	@echo "*** "Done with fdbatch failure test""
	@echo "*** "Starting fdbatch kill test""
	./fdbatch countup.scm "_countup.killed" 10 1;
	@sleep 3;
	@kill -9 `cat _countup.pid`; sleep 12
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error; \
		exit 1; 					\
	 fi;
	@# This should have been deleted by the watch process
	@if (test -f _countup.done); then 		\
		echo fdbatch failure _countup.done error;\
		exit 1; 					\
	 fi;
	@# This should have been created at exit by the watch process
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure _countup.died error;\
		exit 1; 					\
	 fi;
	@echo "*** "Done with fdbatch kill test""

batchchaintests:
	@echo "*** Testing batch scripts which call CHAIN"
	@rm -f _chaintest.*
	./fdbatch chaintest.scm
	@echo "*** Done testing batch scripts which call CHAIN"
