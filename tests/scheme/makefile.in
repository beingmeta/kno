# -*- Mode: Makefile; -*-
# Copyright (C) 2004, 2005 beingmeta, inc.
# This file is a part of beingmeta's FramerD implementation, EFramerD.
MAKEFILE_VERSION="$Id$"

# different random comment
CC	= @CC@
XCFLAGS=  
CFLAGS=-I../../include @CFLAGS@ @PROFILING@ @DREENTRANT@ @dynamic_cflag@ \
       -DFD_TESTCONFIG=1 -I../../include $(XCFLAGS)
LDFLAGS=@LDFLAGS@ $(EFENCE) @TESTLDFLAGS@ -L../../lib
BASELIBS=@LIBS@ -lm -lz
BMLIBS=-lu8io -lu8data -lu8
LIBS=${BMLIBS} ${BASELIBS}

CORE_LIBS	= ../../lib/libfdscheme@suffix@.a       \
	  	  	../../lib/libfdbserv@suffix@.a  \
	 		../../lib/libfddbfile@suffix@.a \
			../../lib/libfddb@suffix@.a     \
			../../lib/libfdtype@suffix@.a
EXTRA_LIBS	= ../../lib/libtexttools@suffix@.a \
		  ../../lib/libtagger@suffix@.a \
		  ../../lib/libfdweb@suffix@.a \
		  ../../lib/libfdschemeio@suffix@.a
DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
CLEAN		= @CLEAN@
INSTALL		= @INSTALL@
#RUNENV		= LD_LIBRARY_PATH=../../lib DYLD_LIBRARY_PATH=../../lib 
VALGRIND	= INVALGRIND=yes valgrind --tool=memcheck --leak-check=yes --num-callers=9
TESTPROG	= 
RUNENV		= 
TESTSIZE	= 64
TESTCONFIG	= 
RUNTEST		= $(RUNENV)$(TESTPROG)
DBTEST_FILES	= r4rs.scm misctest.scm seqtest.scm choicetest.scm dbtest.scm

TESTBIN=fdeval fdconsole fdexec fdbatch fdserver fdservlet fdcgiexec # fdsh

all: $(TESTBIN) 

%.o: %.c
	@$(CC) $(CFLAGS) -o $@ -c $<
	@echo CC $@ $<

# This is for making shared test programs, when there are associated problems
%.shared: %.c
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) \
		-lfdtype -lfddb -lfddbfile -lfdscheme -lfdschemeio
	@echo MKTEST_SHARED $@

../../lib/libfdweb@suffix@.a:
	cd ../..; make lib/libfdweb@suffix@.a
../../lib/libfdschemeio@suffix@.a:
	cd ../..; make lib/libfdschemeio@suffix@.a
../../lib/libfdscheme@suffix@.a:
	cd ../..; make lib/libfdscheme@suffix@.a
../../lib/libfdtype@suffix@.a:
	cd ../..; make lib/libfdtype@suffix@.a
../../lib/libfddb@suffix@.a:
	cd ../..; make lib/libfddb@suffix@.a
../../lib/libfddbfile@suffix@.a:
	cd ../..; make lib/libfddbfile@suffix@.a
../../lib/libtexttools@suffix@.a:
	cd ../..; make lib/libtexttools@suffix@.a
../../lib/libfdbserv@suffix@.a:
	cd ../..; make lib/libfdbserv@suffix@.a

$(TESTBIN): $(EXTRA_LIBS) \
            ../../lib/libfdscheme@suffix@.a \
	    ../../lib/libfddb@suffix@.a ../../lib/libfdtype@suffix@.a

%: %.c $(EXTRA_LIBS) $(CORE_LIBS)
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< $(EXTRA_LIBS) $(CORE_LIBS) $(LIBS) -lu8stdio
	@echo MKTEST_STATIC $@
fdservlet: ../../src/exe/webcommon.h
fdcgiexec: ../../src/exe/webcommon.h

clean: testclean
	rm -f $(TESTBIN)

testclean:
	rm -f *.log *.err *.done *.finished *.pid *.died
	rm -f temp.* utf8-temp.* testdb* memoization.index test.dtype
	rm -f logfile thirty2fifty thirtythree 
alltests: dtypetests tabletests indextests hashindextests dbtests
	@echo "*** Done with alltests"
dtypetests:
	@echo "*** Running scheme tests to exercise the data/eval layer"
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) r4rs.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) exceptions.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) choicetest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) seqtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) picktest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) cachecall.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) misctest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) texttest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) threadtest.scm
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) i18n.scm
	@echo "*** Completed scheme tests to exercise the data/eval layer"

tabletests:
	@echo "*** Running scheme tests to exercise the table/index layer"
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.table $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.table
	@echo "*** Completed scheme tests to exercise the table/index layer"

indextests:
	@echo "*** Running scheme tests to exercise file indices "
	@rm -f edit.dtype
	# The cache is off by default
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Test reading with the cache on, consed indices, and both
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CACHELEVEL=2 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CONSINDEX=yes 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index \
		CACHELEVEL=2 CONSINDEX=yes
	# Do test edits (no cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# New test, building with cache enabled
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE) CACHELEVEL=2
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index CACHELEVEL=2
	# Try testing without the cache
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Do test edits (with cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype \
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	# Build with both cache and consindices
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index $(TESTSIZE) \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index
	# Do test edits (with cache and consindex)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype \
		CACHELEVEL=2 CONSINDEX=yes
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.index edit.dtype
	@echo "*** Completed scheme tests to exercise file indices "

hashindextests:
	@echo "*** Running scheme tests to exercise hash indices "
	# The cache is off by default
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Test reading with the cache on, consed indices, and both
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CACHELEVEL=2 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CONSINDEX=yes 
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex \
		CACHELEVEL=2 CONSINDEX=yes
	# Do test edits (no cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# New test, building with cache enabled
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE) CACHELEVEL=2
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex CACHELEVEL=2
	# Try testing without the cache
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Do test edits (with cache)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype \
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	# Build with both cache and consindices
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex $(TESTSIZE) \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex \
		CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex
	# Do test edits (with cache and consindex)
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype \
		CACHELEVEL=2 CONSINDEX=yes
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ $(TESTCONFIG) tabletest.scm temp.hashindex edit.dtype
	@echo "*** Completed scheme tests to exercise hash indices "


dbtests:
	@echo "*** Running scheme tests to exercise the database layer"
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) testdb init $(DBTEST_FILES)
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) COUNT=$(TESTSIZE) testdb
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb init $(DBTEST_FILES)
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm $(TESTCONFIG) \
		COUNT=$(TESTSIZE) CACHELEVEL=2 testdb
	@echo "*** Finished scheme tests to exercise the database layer"

dbhashtests:
	@echo "*** Running scheme tests to exercise the database layer with hashindices"
	make FD_HASHINDEX=yes dbtests
	make FD_HASHINDEX="(COMPRESS B40)" dbtests
	@echo "*** Completed scheme tests to exercise the database layer with hashindices"

dbhash32tests:
	@echo "*** Running scheme tests to exercise hashindices with B32 reprepresentation "***""
	make FD_HASHINDEX=yes dbtests
	make FD_HASHINDEX="(COMPRESS B32)" dbtests
	@echo "*** Completed scheme tests to exercise hashindices with B32 reprepresentation "***""

memtests:
	@echo "*** Running alltests with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 alltests
	@echo "*** Finished running alltests with memory debugging"

memdtypetests:
	@echo "*** Running tests on data/eval layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 dtypetests
	@echo "*** Finished running tests on data/eval layers with memory debugging"

memtabletests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 tabletests
	@echo "*** Finished running tests on table/index layers with memory debugging"

memindextests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 indextests
	@echo "*** Finished running tests on table/index layers with memory debugging"

memhashindextests:
	@echo "*** Running tests on table/index layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 hashindextests
	@echo "*** Finished running tests on table/index layers with memory debugging"

memdbtests:
	@echo "*** Running tests on database layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 dbtests dbhashtests
	@echo "*** Finished running tests on database layers with memory debugging"

memdbhashtests:
	@echo "*** Running tests on database layers with memory debugging"
	make "TESTPROG=$(VALGRIND)" TESTSIZE=$(TESTSIZE)/8 dbhashtests
	@echo "*** Finished running tests on database layers with memory debugging"

heaptests:
	@echo "*** Running alltests with tcmalloc memory debugging"
	make "RUNENV=HEAPCHECK=normal" TESTSIZE=$(TESTSIZE)/8 alltests
	@echo "*** Finished running alltests with tcmalloc memory debugging"

heapdtypetests:
	@echo "*** Running tests on data/eval layers with tcmalloc memory debugging"
	make "RUNENV=HEAPCHECK=normal" TESTSIZE=$(TESTSIZE)/8 dtypetests
	@echo "*** Finished running tests on data/eval layers with tcmalloc memory debugging"

heaptabletests:
	@echo "*** Running tests on table/index layers with tcmalloc memory debugging"
	make "RUNENV=HEAPCHECK=normal" TESTSIZE=$(TESTSIZE)/8 tabletests
	@echo "*** Finished running tests on table/index layers with tcmalloc memory debugging"

heapdbtests:
	@echo "*** Running tests on database layers with tcmalloc memory debugging"
	make "RUNENV=HEAPCHECK=normal" TESTSIZE=$(TESTSIZE)/8 dbtests dbhashtests
	@echo "*** Finished running tests on database layers with tcmalloc memory debugging"

randomtests:
	@echo "*** Running alltests with a really random seed"
	make "TESTCONFIG=RANDOMSEED=TIME" alltests
	@echo "*** Finished alltests with a really random seed"

chaintest:
	@echo "*** Testing scripts which call CHAIN"
	fdexec chaintest.scm
	fdexec chaintest.scm 0 30
	fdexec chaintest.scm 10 50
	@echo "*** Done testing scripts which call CHAIN"

batchtest:
	@echo "*** Testing fdbatch execution success and cleanliness"
	rm -f countup.log countup.err countup.done countup.finished countup.died
	./fdbatch countup.scm "countup.finished" 10 1; sleep 3
	@if (test ! -f countup.pid); then echo error; exit 1; fi;
	sleep 12;
	@# This was written by fdbatch itself
	@if (test ! -s countup.done); then echo countup.done error; exit 1; fi;
	@# This was written by the script
	@if (test ! -s countup.finished); then echo fdbatch success countup.finished error; exit 1; fi;
	@if (test ! -f countup.err); then echo fdbatch success countup.err error; exit 1; fi;
	@if (test ! -s countup.log); then echo fdbatch success countup.log error; exit 1; fi;
	@# These should have been deleted on successful exit
	@if (test -f countup.died); then echo fdbatch success countup.died error; exit 1; fi;
	@if (test -f countup.pid); then echo fdbatch success countup.pid error; exit 1; fi;
	rm -f countup.log countup.err countup.done countup.finished countup.died
	@echo "*** "Done with fdbatch success test""
	./fdbatch countup.scm ERROR=yes "countup.finished" 10 1; sleep 3
	sleep 12;
	@# This should have been deleted by the watch process
	@if (test -f countup.pid); then echo fdbatch failure countup.pid error; exit 1; fi;
	@if (test -f countup.done); then echo fdbatch failure countup.done error; exit 1; fi;
	@# This should have been created at exit
	@if (test ! -f countup.died); then echo fdbatch failure countup.died error; exit 1; fi;
	@echo "*** "Done with fdbatch failure test""
	./fdbatch countup.scm "countup.killed" 10 1; sleep 3
	kill -9 `cat countup.pid`; sleep 12
	@# This should have been deleted by the watch process
	@if (test -f countup.pid); then echo fdbatch failure countup.pid error; exit 1; fi;
	@# This should have been deleted by the watch process
	@if (test -f countup.done); then echo fdbatch failure countup.done error; exit 1; fi;
	@# This should have been created at exit by the watch process
	@if (test ! -f countup.died); then echo fdbatch failure countup.died error; exit 1; fi;
	@echo "*** "Done with fdbatch kill test""

batchchaintest:
	@echo "*** Testing batch scripts which call CHAIN"
	fdbatch chaintest.scm
	@echo "*** Done testing batch scripts which call CHAIN"


