# -*- Mode: Makefile; -*-
# Copyright (C) 2004-2017 beingmeta, inc.
# This file is a part of beingmeta's FramerD implementation

FD_INIT_DLOADPATH=../../lib/framerd/%..@shared_suffix@:../../../aikit/c/%..@shared_suffix@:@prefix@/lib/framerd/%.@shared_suffix@
export FD_INIT_LOADPATH
FD_INIT_LOADPATH=../../src/scheme/%.scm:../../src/scheme/%/module.scm:@default_module_path@
export FD_INIT_LOADPATH
FD_INIT_SAFELOADPATH=../../src/scheme/safe/%.scm:../../src/scheme/safe/%/module.scm:@default_safe_module_path@
export FD_INIT_SAFELOADPATH
FD_LOADPATH=../../src/scheme/%/module.scm:../../src/scheme/%.scm:
export FD_LOADPATH
FD_DLOADPATH=../../lib/framerd
export FD_DLOADPATH
LD_LIBRARY_PATH=../../lib
export LD_LIBRARY_PATH
DYLD_LIBRARY_PATH=../../lib
export DYLD_LIBRARY_PATH
PPROF_PATH      = @GOOGLE_PPROF@
export PPROF_PATH

CC	= @CC@
XCFLAGS=  
CFLAGS=-I../../include @CFLAGS@ @PROFILING@ @DREENTRANT@ @dynamic_cflag@ \
       -DFD_TESTCONFIG=1 -I../../include $(XCFLAGS)
LDFLAGS=-L../../lib @LDFLAGS@ $(EFENCE) @TESTLDFLAGS@ -L../../lib
RPATH   = @rpath@
RPATHFLAGS = @RPATHFLAGS@
BASELIBS=@LIBS@ -lm -lz
BMLIBS=-lu8io -lu8data -lu8
XLIBS=
LIBS=$(XLIBS) $(BMLIBS) $(BASELIBS)
EXELDFLAGS = @EXELDFLAGS@
CORE_LIBS	= ../../lib/libfdscheme@suffix@.a       \
	  	  	../../lib/libfdkbserv@suffix@.a  \
	 		../../lib/libfdkbdrivers@suffix@.a \
			../../lib/libfdkbase@suffix@.a     \
			../../lib/libfdtype@suffix@.a
EXTRA_LIBS	= ../../lib/libtexttools@suffix@.a \
		  ../../lib/libfdweb@suffix@.a \
		  ../../lib/libfdschemeio@suffix@.a

DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
CLEAN		= @CLEAN@
INSTALL		= @INSTALL@
TESTPROG	= 
MEMTESTER	= @memtester@
LEAKTESTER	= @leaktester@
TEST_ENV	= @test_env@
MEMTEST_ENV	= @memtest_env@
LEAKTEST_ENV	= @leaktest_env@
TESTSIZE	= 512
SMALLTESTSIZE	= 64
BASETESTCONFIG	= LOADPATH=../../src/scheme/%/module.scm:../../src/scheme/%.scm
TEST_CONFIG	= @test_config@
MEMTEST_CONFIG	= @memtest_config@
LEAKTEST_CONFIG	= @leaktest_config@
RUNTEST		= ${TEST_ENV} $(TESTPROG)
MEMTEST		= ${TEST_ENV} ${MEMTEST_ENV} ${MEMTESTER:-${TESTPROG}}
LEAKTEST	= ${TEST_ENV} ${LEAKTEST_ENV} ${LEAKTESTER:-${TESTPROG}}
DBTEST_FILES	= r4rs.scm misctest.scm seqtest.scm choicetest.scm dbtest.scm

TESTBIN=fdeval fdconsole fdexec fdbatch fdserver fdservlet fdcgiexec # fdsh

# Note that we don't add @suffix@ to these executables because they're
# never installed
%.o: %.c
	@$(CC) $(CFLAGS) -o $@ -c $<
	@echo CC $@ $<

# This is for making shared test programs, when there are associated problems
%.shared: %.c
	@echo MKTEST_SHARED $@
	@$(CC) $(CFLAGS) $(EXELDFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) \
		-lfdtype@suffix@ -lfdkbase@suffix@ -lfdkbdrivers@suffix@ \
		-lfdscheme@suffix@ -lfdschemeio@suffix@

%: %.c $(EXTRA_LIBS) $(CORE_LIBS)
	@echo MKTEST_STATIC $@
	$(CC) $(CFLAGS) $(LDFLAGS) $(EXELDFLAGS) -o $@ $< 	\
		$(EXTRA_LIBS) $(CORE_LIBS) $(LIBS) -lu8stdio

# Base targets

default: alltests

testbin: $(TESTBIN) 

fdcgiexec fdconsole fdexec fdserver fdservlet: main.c main.h

fdcgiexec fdservlet: webcommon.h

# Linking targets

fdconsole.c: ../../src/exe/fdconsole.c
	ln -s $< $@

fdexec.c: ../../src/exe/fdexec.c
	ln -s $< $@

fdbatch.c: ../../src/exe/fdbatch.c
	ln -s $< $@

fdserver.c: ../../src/exe/fdserver.c
	ln -s $< $@

fdservlet.c: ../../src/exe/fdservlet.c
	ln -s $< $@

fdcgiexec.c: ../../src/exe/fdcgiexec.c
	ln -s $< $@

main.c: ../../src/exe/main.c
	ln -s $< $@

main.h: ../../src/exe/main.h
	ln -s $< $@

webcommon.h: ../../src/exe/webcommon.h
	ln -s $< $@

# Clean targets

clean: testclean
	rm -f $(TESTBIN)
	find . -name "vgcore.*" | xargs rm -f
	find . -name "*.pid" | xargs rm -f
	rm -rf mongodb/dbdata;

testclean:
	rm -f *.log *.err *.done *.finished *.pid *.died
	rm -f temp.* utf8-temp.* testdb* memoization.index test.dtype
	rm -f logfile thirty2fifty thirtythree 


# Static lib targets

../../lib/libfdweb@suffix@.a:
	cd ../..; make lib/libfdweb@suffix@.a
../../lib/libfdschemeio@suffix@.a:
	cd ../..; make lib/libfdschemeio@suffix@.a
../../lib/libfdscheme@suffix@.a:
	cd ../..; make lib/libfdscheme@suffix@.a
../../lib/libfdtype@suffix@.a:
	cd ../..; make lib/libfdtype@suffix@.a
../../lib/libfdkbase@suffix@.a:
	cd ../..; make lib/libfdkbase@suffix@.a
../../lib/libfdkbdrivers@suffix@.a:
	cd ../..; make lib/libfdkbdrivers@suffix@.a
../../lib/libtexttools@suffix@.a:
	cd ../..; make lib/libtexttools@suffix@.a
../../lib/libfdkbserv@suffix@.a:
	cd ../..; make lib/libfdkbserv@suffix@.a

# Extra dependencies

$(TESTBIN): $(EXTRA_LIBS) \
            ../../lib/libfdscheme@suffix@.a \
	    ../../lib/libfdkbase@suffix@.a ../../lib/libfdtype@suffix@.a

fdservlet: ../../src/exe/webcommon.h
fdcgiexec: ../../src/exe/webcommon.h

# Test targets

all_tests alltests: \
	scheme optscheme tables pools indexes db \
	execscripts chainscripts batchscripts  \
	chained_batchscripts optimize_modules
	@echo "*** Done with alltests"

cmdtests: execscripts chainscripts batchscripts chained_batchscripts
	@echo "*** Done with alltests"

schemetests scheme:
	@echo "*** Running scheme tests to exercise the data/eval layer"
	$(RUNTEST) ./fdexec@suffix@ r4rs.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ exceptions.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ choicetest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ seqtest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ numvecs.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ picktest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ cachecall.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ texttest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ fdwebtest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ timefns.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ threadtest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ i18n.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ misctest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ xmltest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ cryptotest.scm ${TEST_CONFIG}
	@echo "*** Completed scheme tests to exercise the data/eval layer"
optscheme:
	$(RUNTEST) ./fdexec@suffix@ TESTOPTIMIZED=yes r4rs.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ TESTOPTIMIZED=yes choicetest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ TESTOPTIMIZED=yes seqtest.scm ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ TESTOPTIMIZED=yes misctest.scm ${TEST_CONFIG}

loadmods: optimize_modules
	$(RUNTEST) ./fdexec@suffix@ loadmods.scm ${TEST_CONFIG}
optimize_modules:
	$(RUNTEST) ./fdexec@suffix@ optmods.scm ${TEST_CONFIG}

tabletests tables:
	@echo "*** Running scheme tests to exercise the table/index layer"
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.table $(TESTSIZE) ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.table ${TEST_CONFIG}
	@echo "*** Completed scheme tests to exercise the table/index layer"

pooltests pools:
	@echo "*** Running file pool tests ****"
	@rm -f temp.pool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} POOLTYPE=filepool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=1
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=2
	@echo "*** Running oidpool tests ****"
	@rm -f temp.pool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} POOLTYPE=iodpool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=1
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=2
	@echo "*** Running bigpool tests ****"
	@rm -f temp.pool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} POOLTYPE=iodpool
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=1
	$(RUNTEST) ./fdexec@suffix@ pooltest.scm ${TESTSIZE} CACHELEVEL=2


runindexes:
	@echo "*** Running scheme tests to exercise various kinds of file indexes"
	@rm -f edit.dtype
	# The cache is off by default
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} $(TESTSIZE) ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} ${TEST_CONFIG}
	# Test reading with the cache on, consed indices, and both
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} CACHELEVEL=2  ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} CONSINDEX=yes  ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} \
		${TEST_CONFIG} CACHELEVEL=2 CONSINDEX=yes
	# Do test edits (no cache)
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype ${TEST_CONFIG}
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype ${TEST_CONFIG}
	# New test, building with cache enabled
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} $(TESTSIZE) CACHELEVEL=2 ${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} CACHELEVEL=2 ${TEST_CONFIG}
	# Try testing without the cache
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} ${TEST_CONFIG}
	# Do test edits (with cache)
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype ${TEST_CONFIG}
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype ${TEST_CONFIG}
	# Build with both cache and consindices
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} $(TESTSIZE) \
		 ${TEST_CONFIG} CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} \
		${TEST_CONFIG} CACHELEVEL=2 CONSINDEX=yes
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} ${TEST_CONFIG}
	# Do test edits (with cache and consindex)
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype
		 ${TEST_CONFIG} CACHELEVEL=2 CONSINDEX=yes
	# Verify test edits
	$(RUNTEST) ./fdexec@suffix@ tabletest.scm temp.${TEST_SUFFIX} edit.dtype ${TEST_CONFIG}
	@echo "*** Completed scheme tests to exercise file indices "

fileindexes:
	@echo "*** Testing file indices "	
	@make TEST_SUFFIX=index runindexes
	@echo "*** Done testing file indices "

hashindexes:
	@echo "*** Testing hash indices "	
	@make TEST_SUFFIX=hashindex runindexes
	@echo "*** Done testing hash indices "	

indextests indexes: fileindexes hashindexes

dbtest:
	@echo "*** Running database layer tests"
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm testdb init \
		COUNT=$(TESTSIZE) $(DBTEST_FILES) \
		${TEST_CONFIG}
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm testdb COUNT=$(TESTSIZE) ${TEST_CONFIG} 
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm testdb COUNT=$(TESTSIZE) \
		 ${TEST_CONFIG} CACHELEVEL=2 
	@echo "*** Testing database creation with CACHELEVEL=2"
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm testdb init COUNT=$(TESTSIZE) 	\
		$(DBTEST_FILES) 						\
		${TEST_CONFIG} CACHELEVEL=2 	
	$(RUNTEST) ./fdexec@suffix@ dbtest.scm testdb COUNT=$(TESTSIZE) \
		 ${TEST_CONFIG} CACHELEVEL=2
	@echo "*** Finished database layer tests"

dbtests db:
	@echo "*** Database layer tests with oidpool/hashindex cofigurations ***"
	make TEST_CONFIG="POOLTYPE=oidpool" dbtest
	make TEST_CONFIG="POOLTYPE=oidpool INDEXTYPE=fileindex" dbtest
	make TEST_CONFIG="POOLTYPE=bigpool" dbtest
	make TEST_CONFIG="POOLTYPE=bigpool INDEXTYPE=fileindex" dbtest
	make TEST_CONFIG="POOLTYPE=oidpool OFFTYPE=B64" dbtest
	make TEST_CONFIG="POOLTYPE=bigpool OFFTYPE=B64" dbtest
	make TEST_CONFIG="POOLTYPE=oidpool INDEXTYPE=hashindex" dbtest
	make TEST_CONFIG="POOLTYPE=oidpool INDEXTYPE=memindex" dbtest
	make TEST_CONFIG="POOLTYPE=bigpool INDEXTYPE=memindex" dbtest
	make dbtest
	@echo "*** Completed hashindex tests with B32 reprepresentation "***""

cryptotests crypto:
	@echo "*** Running crypto tests ***"
	$(RUNTEST) ./fdexec@suffix@ cryptotest.scm $(TEST_CONFIG)
	@echo "*** Completed crypto tests ***"

xmltests xml:
	@echo "*** Running xml tests ***"
	$(RUNTEST) ./fdexec@suffix@ xmltests.scm $(TEST_CONFIG)
	@echo "*** Completed xml tests ***"
execscripts:
	@echo "*** Running exec tests ***"
	./fdexec ./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "*** Running exec test as script ***"
	./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@echo "*** Done with exec tests ***"

randomtests:
	@echo "*** Running alltests with a really random seed"
	make TEST_CONFIG="RANDOMSEED=TIME ${TEST_CONFIG}" alltests
	@echo "*** Finished alltests with a really random seed"

chainscripts:
	@echo "*** Testing scripts which call CHAIN"
	./fdexec chaintest.scm
	./fdexec chaintest.scm 0 30
	./fdexec chaintest.scm 10 50
	@echo "*** Done testing scripts which call CHAIN"

batchscripts:
	@echo "*** Testing fdbatch execution success and cleanliness"
	@rm -f _countup.log _countup.err _countup.done
	@rm -f  _countup.finished _countup.died _countup.pid
	./fdbatch countup.scm "_countup.finished" 10 1; sleep 3
	@if (test ! -f _countup.pid); then 	\
		echo error; 			\
           exit 1; 				\
	   fi; 					\
	 sleep 12;
	# This was written by fdbatch itself
	@if (test ! -s _countup.done); then	\
		echo _countup.done error; 	\
	  	exit 1; 				\
         fi;
	# This was written by the script
	@if (test ! -s _countup.finished); then		\
	   echo fdbatch success _countup.finished error;	\
	   exit 1;  						\
	 fi;
	@if (test ! -f _countup.err); then		\
		echo fdbatch success _countup.err error;	\
		exit 1; 					\
         fi;
	@if (test ! -s _countup.log); then		\
		echo fdbatch success _countup.log error;	\
		exit 1; 					\
	 fi;
	# These should have been deleted on successful exit
	@if (test -f _countup.died); then			\
		echo fdbatch success _countup.died error;	\
		exit 1; 						\
	 fi;
	@if (test -f _countup.pid); then			\
		echo fdbatch success _countup.pid error; \
		exit 1; 					\
         fi;
	@rm -f _countup.pid _countup.log _countup.err
	@rm -f _countup.done _countup.finished _countup.died
	@echo "*** "Done with fdbatch success test""
	@echo "*** "Starting fdbatch failure test""
	./fdbatch countup.scm ERROR=yes "_countup.finished" 10 1;
	@sleep 12;
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error;	\
		exit 1; 					\
		fi;
	@if (test -f _countup.done); then			\
		echo fdbatch failure _countup.done error;	\
		exit 1; 						\
	 fi;
	# This should have been created at exit
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure countup.died error;	\
		exit 1; 					\
	 fi;
	@echo "*** "Done with fdbatch failure test""
	@echo "*** "Starting fdbatch kill test""
	./fdbatch countup.scm "_countup.killed" 10 1;
	@sleep 3;
	@kill -9 `cat _countup.pid`; sleep 12
	@# This should have been deleted by the watch process
	@if (test -f _countup.pid); then 		\
		echo fdbatch failure _countup.pid error; \
		exit 1; 					\
	 fi;
	@# This should have been deleted by the watch process
	@if (test -f _countup.done); then 		\
		echo fdbatch failure _countup.done error;\
		exit 1; 					\
	 fi;
	@# This should have been created at exit by the watch process
	@if (test ! -f _countup.died); then 		\
		echo fdbatch failure _countup.died error;\
		exit 1; 					\
	 fi;
	@echo "*** "Done with fdbatch kill test""

chained_batchscripts:
	@echo "*** Testing batch scripts which call CHAIN"
	@rm -f _chaintest.*
	./fdbatch chaintest.scm
	@echo "*** Done testing batch scripts which call CHAIN"

# Memory integrity tests

heaptest memtest memtests: all_memtests

all_memtests: scheme_memtests table_memtests \
	pool_memtests index_memtests db_memtests \
	crypto_memtests load_modules_memtest

scheme_memtests:
	@echo "*** Running heap integrity tests on scheme/scripting layer"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" scheme
	@echo "*** Finished heap integrity tests on scheme/scripting layer"

table_memtests:
	@echo "*** Running heap integrity tests on tables"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" tables
	@echo "*** Finished heap integrity tests tables"

pool_memtests:
	@echo "*** Running heap integrity tests on pools"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "*** Finished heap integrity tests on pools"

index_memtests:
	@echo "*** Running heap integrity tests on indexes and index drivers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "*** Finished heap integrity tests on indexes and index drivers"

frames_memtests db_memtests:
	@echo "*** Running heap integrity tests on database layers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" db
	@echo "*** Finished heap integrity tests on database layers"

crypto_memtests:
	@echo "*** Running heap integrity tests on crypto functions"
	make TESTPROG="$(VALGRINDHEAP)" crypto
	@echo "*** Finished heap integrity tests on crypto functions"

load_modules_memtest:
	@echo "*** Running heap integrity tests on builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" load_modules
	@echo "*** Finished heap integrity tests on builtin modules"

optimize_modules_memtest:
	@echo "*** Running heap integrity tests on optimized builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" TEST_CONFIG="${MEMTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@echo "*** Finished heap integrity tests on optimized builtin modules"

.PHONY: memtest memtest
.PHONY:	all_memtests scheme_memtests table_memtests
.PHONY:	pool_memtests index_memtests db_memtests
.PHONY:	crypto_memtests load_modules_memtest
.PHONY:	optimize_modules_memtest

# Leaktests

heaptest leaktest leaktests: all_leaktests

all_leaktests: scheme_leaktests table_leaktests \
	pool_leaktests index_leaktests db_leaktests \
	crypto_leaktest load_modules_leaktest

scheme_leaktests:
	@echo "*** Running leak tests on scheme/scripting layer"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" scheme
	@echo "*** Finished leak tests on scheme/scripting layer"

table_leaktests:
	@echo "*** Running leak tests on tables"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" tables
	@echo "*** Finished leak tests tables"

pool_leaktests:
	@echo "*** Running leak tests on pools"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "*** Finished leak tests on pools"

index_leaktests:
	@echo "*** Running leak tests on indexes and index drivers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@echo "*** Finished leak tests on indexes and index drivers"

frames_leaktest db_leaktests:
	@echo "*** Running leak tests on database layers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" db
	@echo "*** Finished leak tests on database layers"

crypto_leaktest:
	@echo "*** Running leak tests on crypto functions"
	make TESTPROG="$(VALGRINDHEAP)" crypto
	@echo "*** Finished leak tests on crypto functions"

load_modules_leaktest:
	@echo "*** Running leak tests on builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" load_modules
	@echo "*** Finished leak tests on builtin modules"

optimize_modules_leaktest:
	@echo "*** Running leak tests on optimized builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" TEST_CONFIG="${LEAKTEST_CONFIG}" TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@echo "*** Finished leak tests on optimized builtin modules"

.PHONY: leaktest leaktest
.PHONY:	all_leaktest scheme_leaktest table_leaktests
.PHONY:	pool_leaktests index_leaktests db_leaktests
.PHONY:	crypto_leaktest load_modules_leaktest
.PHONY:	optimize_modules_leaktest

