(use-module 'brico)

(define noroget
  (ambda (x) (reject x 'source @1/1)))

(define (get-synset)
  (let ((s (random-oid brico-pool)))
    (while (empty? (get s english))
      (set! s (random-oid brico-pool)))
    s))
(define (find-similar-synsets synset)
  (choice (find-frames brico-index english (get synset english))
	  (find-frames brico-index genls (get synset genls))))
(define (check-hyponyms synset)
  (unless (empty? (get synset specls))
    (unless (empty? (choice (difference (noroget (get synset specls))
					(find-frames brico-index genls synset))
			    (difference (find-frames brico-index genls synset)
					(noroget (get synset specls)))))
      (lineout "Hyponym check fails for " synset))))
(define (check-siblings synset)
  (unless (empty? (get synset genls))
    (unless (empty? (choice (difference (noroget (get (get synset genls) specls))
					(find-frames brico-index
					    genls (get synset genls)))
			    (difference (find-frames brico-index
					    genls (get synset genls))
					(noroget (get (get synset genls) specls)))))
      (lineout "Sibling check fails for " synset))))

(define (check-hyponyms synset)
  (unless (empty? (get synset specls))
    (unless (empty? (choice (difference (noroget (get synset specls))
					(?? genls synset))
			    (difference (?? genls synset)
					(noroget (get synset specls)))))
      (lineout "Hyponym check fails for " synset))))
(define (check-siblings synset)
  (unless (empty? (get synset genls))
    (unless (empty? (choice (difference (noroget (get (get synset genls) specls))
					(?? genls (get synset genls)))
			    (difference (?? genls (get synset genls))
					(noroget (get (get synset genls) specls)))))
      (lineout "Sibling check fails for " synset))))

(define (nap)
  (flush-output)
  (sleep (/~ (+ 1 (random 1000)) 2000)))

(define (main (howmany 25) (seed #f))
  (when seed
    (cond ((number? seed)
	   (message "Random seed is " seed)
	   (randomize seed))
	  (else (message "Random seed is " (randomize)))))
  (dotimes (i howmany)
    (printout "+") (nap) (find-similar-synsets (get-synset))
    (printout ".") (nap) (check-hyponyms (get-synset))
    (printout ".") (nap) (check-siblings (get-synset)))
  (message "Done " howmany "...")
  (dotimes (i howmany)
    (let ((s (get-synset)))
      (printout "+") (nap) (find-similar-synsets s)
      (printout ".") (nap) (check-hyponyms s)
      (printout ".") (nap) (check-siblings s)))
  (message "Done another " howmany "..."))



