;;; -*- Mode: FDScript; -*-

(use-module 'bemeta)

(set-notify! #t)

(define (generate-file filename n genfn)
  (let ((f (fopen filename "w"))
	(v {}))
    (dotimes (i n)
      (let ((k (genfn)))
	(printout-to f k "\n")
	(set+! v k)))
    (notify "Generated " n " entries into " filename)
    v))

(define (generate-test-data genfn n all merged shared missing . files)
  (let ((v {}))
    (dotimes (i n) (set+! v (genfn)))
    (let ((n-files (length files))
	  (dumped {})
	  (common 'uninitialized))
      (dolist (file files)
	(let ((o (fopen-encoded file "w" "utf-8"))
	      (this {}))
	  (doseq (e (sorted v))
	    (when (zero? (random n-files))
	      (set+! dumped e) (set+! this e)
	      (write e o) (newline o)))
	  (notify "Wrote " (choice-size this) " entries into " file)
	  (if (eq? common 'uninitialized)
	      (set! common this)
	    (set! common (intersection this common)))))
      (notify "Writing " (choice-size dumped) " merged entries into " merged)
      (let ((o (fopen-encoded merged  "w" "utf8")))
	(do-choices (e dumped)
	  (write e o) (newline o)))
      (let ((o (fopen-encoded missing  "w" "utf-8"))
	    (diff (difference v dumped)))
	(notify "Writing " (choice-size diff) " missing entries into " missing)
	(do-choices (e diff)
	  (write e o) (newline o)))
      (notify "Writing " (choice-size common) " common entries into " shared)
      (let ((o (fopen-encoded shared "w" "utf8")))
	(do-choices (e common)
	  (write e o) (newline o))))
    (notify "Writing " (choice-size v) " entries into " all)
    (let ((o (fopen-encoded all "w" "utf8")))
      (do-choices (e v) (write e o) (newline o)))))

;;;; Generating random objects

(define random-super-pools
  (make-oid (choice (random 200000)
		    (random 200000)
		    (random 200000)
		    (random 200000)
		    (random 200000)
		    (random 200000))
	    (* (random 256) 0x100000)))

(define (random-oid)
  (oid-plus (pick-one random-super-pools)
	    (random 0x100000)))
(define (random-fixnum) (random 200000))
(define (random-packet)
  (let ((len (random 100)))
    (let ((vector (make-vector len)))
      (dotimes (i len)
	(vector-set! vector i (random 256)))
      (vector->packet vector))))
(define (random-string)
  (let ((len (if (zero? (random 25)) (random 100) (random 15))))
    (with-string-output
	(dotimes (i len)
	  (if (zero? (random 10))
	      (write-char (integer->char (1+ (random 256))))
	    (write-char (integer->char (1+ (random 128)))))))))
(define (random-symbol)
  (pick-one (all-symbols)))
(define (random-primobj)
  (let ((type (random 7)))
    (cond ((= type 0) (random-string))
	  ((= type 1) (random-symbol))
	  ((= type 2) (random-oid))
	  ((= type 3) (random (* 65536 256 64)))
	  ((= type 4) (random 65536))
	  ((= type 5) (pick-one (all-symbols)))
	  ((= type 6) (random-oid))
	  (else (pick-one (all-symbols))))))
(define (random-vector)
  (let* ((len (if (zero? (random 10)) (random 25)
		(random 7)))
	 (vector (make-vector len)))
    (dotimes (i len)
      (vector-set! vector i (random-primobj)))
    vector))
(define (random-pair)
  (cons (random-primobj) (random-primobj)))
(define (random-list)
  (let ((len (if (zero? (random 5)) (random 25)
	       (random 10))))
    (do ((i len (1+ i))
	 (l '() (cons (random-primobj) l)))
	((>= i len) l))))
(define (random-slotmap)
  (let ((len (if (zero? (random 5)) (random 30)
	       (random 10))))
    (let ((slotids (pick-n (all-symbols) len))
	  (slotmap (frame-create #f)))
      (do-choices (slotid slotids)
	(%set! slotmap slotid
	       (let ((vtype (random 3)))
		 (cond ((zero? vtype) (random-choice))
		       (else (random-primobj))))))
      slotmap)))
(define (random-choice)
  (let ((len (if (zero? (random 5))
		 (if (zero? (random 5))
		     (random 10)
		   (random 100))
	       (random 15)))
	(result {}))
    (dotimes (i len)
      (set+! result (random-primobj)))
    result))
(define (random-compound)
  (let ((type (random 5)))
    (cond ((= type 0) (random-slotmap))
	  ((= type 1) (random-choice))
	  ((= type 2) (random-vector))
	  ((= type 3) (random-pair))
	  ((= type 4) (random-list))
	  (else (random-pair)))))
(define (random-simple-compound)
  (let ((type (random 3)))
    (cond ((= type 0) (random-vector))
	  ((= type 1) (random-pair))
	  ((= type 2) (random-list))
	  (else (random-pair)))))
(define (random-object)
  (if (zero? (random 2))
      (random-simple-compound)
    (random-primobj)))
(define (random-compound-object)
  (if (zero? (random 2))
      (random-compound)
    (random-primobj)))
(define (write-random n prefix)
  (let ((vector (make-vector n)))
    (dotimes (i n)
      (vector-set! vector i (random-object)))
    (let ((text-file (open-output-file (string-append prefix
						      ".text")))
	  (bin-file (fopen (string-append prefix ".dtype") "wb")))
      (dotimes (i n)
	(write (vector-ref vector i) text-file)
	(write-dtype (vector-ref vector i) bin-file)))))

;;;; Generating a small brico dump

(define (dump-brico shrink index dump)
  (let ((index (open-index index)))
    (cache-index index)
    (let* ((keys (index-keys index))
	   (keys-to-dump
	    (if (not shrink) keys
	      (if (integer? shrink)
		  (pick-n keys shrink)
		(pick-n keys (truncate (* (choice-size keys)
					  shrink))))))
	   (dumpmap (make-hashtable))
	   (total-values 0)
	   (file (fopen dump "wb")))
      (index-prefetch index keys-to-dump)
      (notify "Dumping " (choice-size keys-to-dump) " keys out of "
	      (choice-size keys) " to " dump)
      (do-choices (key keys-to-dump)
	(write-dtype key file)
	(let* ((values (index-get index key))
	       (values-to-dump
		(try (pick-n values (quotient (choice-size values) 2))
		     values)))
	  (do-choices (value values-to-dump)
	    (write-dtype value file))))
      (notify "Second pass dumping " (choice-size keys-to-dump)
	      " keys to " dump)
      (do-choices (key keys-to-dump)
	(let ((values (index-get index key)))
	  (set! total-values (+ total-values (choice-size values)))
	  (write-dtype key file)
	  (write-dtype values file)))
      (notify "Dumped " (choice-size keys-to-dump) " covering "
	      total-values " values"))))

;;;; Doing some stuff

(define (file-contents filename)
  (read-from-string
   (elts (segment (filestring filename "utf8") "\n"))))

(gset! brico (getenv 'brico))

(define (intall.data)
  (generate-test-data
   random-fixnum 50000
   "intall.data" "intmerged.data" "intcommon.data" "intmissing.data"
   "inta.data" "intb.data" "intc.data" "intd.data" "inte.data"))
(define (oidall.data)
  (generate-test-data
   random-oid 50000
   "oidall.data" "oidmerged.data" "oidcommon.data" "oidmissing.data"
   "oida.data" "oidb.data" "oidc.data" "oidd.data" "oide.data"))
(define (objall.data)
  (generate-test-data
   random-object 15000
   "objall.data" "objmerged.data" "objcommon.data" "objmissing.data"
   "obja.data" "objb.data" "objc.data" "objd.data" "obje.data"))
(define (compall.data)
  (generate-test-data
   random-compound-object 15000
   "compall.data" "compmerged.data" "compcommon.data" "compmissing.data"
   "compa.data" "compb.data" "compc.data" "compd.data" "compe.data"))
(define (bricosmall.dump)
  (dump-brico .10 brico "bricosmall.dump"))
(define (bricosample.dump)
  (dump-brico .25 brico "bricosample.dump"))
(define (brico.dump)
  (dump-brico #f brico "brico.dump"))

(define (main (arg #f))
  (if arg (eval (list (intern arg)))
    (begin (intall.data)
	   (oidall.data)
	   (bricosmall.dump)
	   (bricosample.dump)
	   (brico.dump))))

