(set-default-cache-level! 2)
(use-pool "/home/sources/gnosys/gnosys.pool")
(use-index "/home/sources/gnosys/gnosys.index")
;(use-pool (append "/data/bg/" {"brico" "xbrico" "names" "places"} ".pool"))
;(use-index (append "/data/bg/" {"brico" "xbrico" "names" "places"} ".index"))
(use-pool "bground@gemini")
(use-index "bground@gemini")
;(use-pool "bground@localhost")
;(use-index "bground@localhost")

(define english (?? 'obj-name 'english))
(define gn/concepts (?? 'obj-name 'gn/concepts))

(define image-pool (use-pool "dvodb@gemini"))
(define image-index (open-index "dvodb@gemini"))
;(define image-pool (use-pool "/home/fdaemon/dvo/dvodb.pool"))
;(define image-index (open-index "/home/fdaemon/dvo/dvodb.index"))

(define (make-keylist keys)
  (map (lambda (key) (cons key (qchoice (?? english key))))
       keys))
(define (2index x)
  (if (string? x) (open-index x) x))

(define (get-corpus-scores keylist indexarg) 
  (let* ((corpus-scores (make-hashtable 1024))
	 (indexvec (if (vector? indexarg) (map 2index indexarg)
		     (vector (2index indexarg))))
	 (n-levels (length indexvec))) 
    (dolist (key keylist)
      (let ((meanings (cdr key)))
	(doseq (index indexvec i)
	  (do-choices (doc (find-frames index
			     gn/concepts (get meanings @?specls*)))
	    ;; (gdb i)
	    (hashtable-increment! corpus-scores doc (- n-levels i))))))
    corpus-scores))
(define (get-meaning-scores keylist indexarg)
  (let* ((indexvec (if (vector? indexarg) (map 2index indexarg)
		     (vector (2index indexarg))))
	 (corpus-scores (get-corpus-scores keylist indexvec))
	 (meaning-scores (make-hashtable))
	 (n-meanings 0))
    (dolist (key keylist)
      (do-choices (meaning (cdr key))
	(do-choices (instance (find-frames (elts indexvec)
				gn/concepts (get meaning @?specls*)))
	  (hashtable-increment! meaning-scores meaning
				(get corpus-scores instance)))))
    meaning-scores))

(define (disambig-keylist keylist)
  (let ((scores (get-meaning-scores keylist image-index)))
    (map (lambda (entry)
	   (cons (car entry)
		 (qchoice (try (largest (cdr entry) scores)
			       (cdr entry)))))
	 keylist)))

(define keylist (make-keylist '("wine" "glass" "party")))
