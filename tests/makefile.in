# -*- Mode: Makefile; -*-
# Copyright (C) 2004-2018 beingmeta, inc.
# This file is a part of beingmeta's FramerD implementation

MAKEFLAGS = -s
export FD_INIT_DLOADPATH=../lib/framerd/%..@shared_suffix@:../../tagger/c/%..@shared_suffix@:@prefix@/lib/framerd/%.@shared_suffix@
export FD_INIT_LOADPATH=../src/libscm/%/module.scm:../src/libscm/safe/%.scm:../src/extmods/%.scm:../src/extmods/%/module.scm:@default_module_path@
export FD_INIT_SAFELOADPATH=../src/libscm/%.scm:../src/libscm/safe/%/module.scm:../src/extmods/safe/%.scm:../src/extmods/safe/%/module.scm:@default_safe_module_path@
export FD_LOADPATH=../src/libscm/%/module.scm:../src/libscm/safe/%.scm:../src/extmods/%/module.scm:../src/extmods/%.scm:
export FD_DLOADPATH=../lib/framerd
export LD_LIBRARY_PATH=../lib
export DYLD_LIBRARY_PATH=../lib
export PPROF_PATH      = @GOOGLE_PPROF@
export FD_QUIET        = yes
export FD_HYPHENDICT=../src/cmodules/hyph_en_US.dic

# Change this to echo to output test headers. Note that these aren't
# much use when running tests with -j
header          = $(shell echo "\#")

CC	   	= @CC@
XCFLAGS    	=  
CFLAGS     	=-I../include @CFLAGS@ @PROFILING@ @DREENTRANT@ @dynamic_cflag@ \
                 -DFD_TESTCONFIG=1 -I../include $(XCFLAGS)
LDFLAGS    	= -L../lib @LDFLAGS@ $(EFENCE) @TESTLDFLAGS@ -L../lib
RPATH      	= @rpath@
RPATHFLAGS 	= @RPATHFLAGS@
BASELIBS   	= @LIBS@ -lm -lz
BMLIBS     	= -lu8io -lu8data -lu8
XLIBS      	=
LIBS       	= $(XLIBS) $(BMLIBS) $(BASELIBS)
EXEFLAGS	= @EXEFLAGS@
EXELIBS   	= @EXELIBS@
CORE_LIBS  	= ../lib/libfdscheme@suffix@.a       \
	          ../lib/libfddbserv@suffix@.a  \
	          ../lib/libfddrivers@suffix@.a \
	          ../lib/libfdstorage@suffix@.a     \
	          ../lib/libfdcore@suffix@.a
EXTRA_LIBS 	= ../lib/libtexttools@suffix@.a ../lib/libfdweb@suffix@.a
DESTDIR		=
prefix		= @prefix@
exec_prefix	= @exec_prefix@
LIBINSTALLDIR	= $(DESTDIR)@libdir@
CLEAN		= @CLEAN@
INSTALL		= @INSTALL@
TESTPROG	= @TESTER@
MEMTESTER	= @MEMTESTER@
LEAKTESTER	= @LEAKTESTER@
TEST_ENV	= @test_env@
MEMTEST_ENV	= @memtest_env@
LEAKTEST_ENV	= @leaktest_env@
TESTSIZE	= @test_size@
SMALLTESTSIZE	= @small_test_size@
BASETESTCONFIG	= LOADPATH=../src/extmods/%/module.scm:../src/extmods/%.scm
RUNCONF		= @test_config@
MEMCONF		= @memtest_config@
LEAKCONF	= @leaktest_config@
RUN		= ${TEST_ENV} ${TESTPROG}
MEMTEST		= ${TEST_ENV} ${MEMTEST_ENV} ${MEMTESTER:-${TESTPROG}}
LEAKTEST	= ${TEST_ENV} ${LEAKTEST_ENV} ${LEAKTESTER:-${TESTPROG}}
FRAMETEST_FILES	= r4rs.scm misctest.scm seqtest.scm choicetest.scm frametest.scm
TESTBASE	= tmptest
TESTFILE	= ${TESTBASE}.file
FDX		= ../dbg/fdexec
OIDPOOL		= POOLTYPE=oidpool
BIGPOOL		= POOLTYPE=bigpool
SNAPPY		= COMPRESSION=snappy
ZPOOL		= COMPRESSION=zlib
ZSTDPOOL	= COMPRESSION=zstd
FILEPOOL	= POOLTYPE=filepool
FILEINDEX	= INDEXTYPE=fileindex
HASHINDEX	= INDEXTYPE=hashindex
MEMINDEX	= INDEXTYPE=memindex
OFFB40		= OFFTYPE=B40
OFFB64		= OFFTYPE=B64
OFFB32		= OFFTYPE=B32
PACKINDEX	= ../src/scripts/pack-index.scm

# Base targets

default: alltests

fresh: clean
	make alltests

# Clean targets

clean: tidy
	rm -f $(TESTBIN)
	find . -name "vgcore.*" | xargs rm -f
	find . -name "*.pid" | xargs rm -f
	rm -rf mongodb/dbdata;

tidy testclean cleantests cleantest:
	rm -rf *.log *.err *.done *.finished *.pid *.died *.elapsed
	rm -rf tmp* utf8-temp* memoization.index *.dtype
	rm -rf *.pool *.index *.flexpool *.flexindex
	rm -rf logfile thirty2fifty thirtythree 
	rm -rf success.log failure.log timing.log

# Test targets

all_tests alltests: tidy
	make libtests cmdtests optimize_modules
	@${header} "■■■■■■■■ Done with alltests"

libtests: scheme optscheme slotmaps tables pools indexes db
cmdtests: execscripts chainscripts batchscripts chained_batchscripts utilscripts

schemetest schemetests scheme: r4rs exceptions choices sequences breaks numvecs reflect hashsets \
	picktest cachecall texttools fdweb timefns threads i18n misc gctests profiling \
	xml crypto
optscheme:
	@${header} "■■■■■■■■ Running optimized scheme tests ${RUNCONF}"
	@${RUN} ${FDX} TESTOPTIMIZED=yes r4rs.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes choicetest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes seqtest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes misctest.scm ${RUNCONF} FOO=quux "CONFVAR=88;XCONF=baz"
	@${RUN} ${FDX} TESTOPTIMIZED=yes reflect.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes exceptions.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes picktest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes cachecall.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes timefns.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes i18n.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes numvecs.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes threadtest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes gctests.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes xmltest.scm ${RUNCONF}
	@${RUN} ${FDX} TESTOPTIMIZED=yes texttest.scm ${RUNCONF}
	@${header} "■■■■■■■■ Completed optimized scheme tests ${RUNCONF}"

loadmods load_modules:
	@${header} "■■■■■■■■ Testing default module loads ${RUNCONF}"
	@${RUN} ${FDX} loadmods.scm ${RUNCONF}
	@${header} "■■■■■■■■ Finished testing default module loads ${RUNCONF}"
optmods optimize_modules: load_modules
	@${header} "■■■■■■■■ Testing optimized module loads ${RUNCONF}"
	@${RUN} ${FDX} optmods.scm ${RUNCONF}
	@${header} "■■■■■■■■ Finished testing optimized module loads ${RUNCONF}"

.PHONY: scheme schemetest schemetests optscheme loadmodes load_modules optmodes optimize_modules

# Individual scheme tests

r4rs:
	@${RUN} ${FDX} r4rs.scm ${RUNCONF}
	@${header} "■■■■ Completed r4rs tests ${RUNCONF}"
exceptions:
	@${RUN} ${FDX} exceptions.scm ${RUNCONF}
	@${header} "■■■■ Completed exceptions tests ${RUNCONF}"
choices choicetest:
	@${RUN} ${FDX} choicetest.scm ${RUNCONF}
	@${header} "■■■■ Completed choices tests ${RUNCONF}"
sequences seqtest:
	@${RUN} ${FDX} seqtest.scm ${RUNCONF}
	@${header} "■■■■ Completed sequences tests ${RUNCONF}"
numvecs:
	@${RUN} ${FDX} numvecs.scm ${RUNCONF}
	@${header} "■■■■ Completed numvecs tests ${RUNCONF}"
hashsets:
	@${RUN} ${FDX} hashsets.scm ${RUNCONF}
	@${header} "■■■■ Completed numvecs tests ${RUNCONF}"
pick picktest:
	@${RUN} ${FDX} picktest.scm ${RUNCONF}
	@${header} "■■■■ Completed picktest tests ${RUNCONF}"
cachecall:
	@${RUN} ${FDX} cachecall.scm ${RUNCONF}
	@${header} "■■■■ Completed cachecall tests ${RUNCONF}"
texttools texttest:
	@${RUN} ${FDX} texttest.scm ${RUNCONF}
	@${header} "■■■■ Completed texttools tests ${RUNCONF}"
fdweb fdwebtest:
	@${RUN} ${FDX} fdwebtest.scm ${RUNCONF}
	@${header} "■■■■ Completed fdweb tests ${RUNCONF}"
timefns:
	@${RUN} ${FDX} timefns.scm ${RUNCONF}
	@${header} "■■■■ Completed timefns tests ${RUNCONF}"
threads threadtest:
	@${RUN} ${FDX} threadtest.scm ${RUNCONF}
	@${header} "■■■■ Completed threads tests ${RUNCONF}"
reflect:
	@${RUN} ${FDX} reflect.scm ${RUNCONF}
	@${header} "■■■■ Completed reflection tests ${RUNCONF}"
breaks breaktests:
	@${RUN} ${FDX} breaktests.scm ${RUNCONF}
	@${header} "■■■■ Completed breaks tests ${RUNCONF}"
i18n:
	@${RUN} ${FDX} i18n.scm ${RUNCONF}
	@${header} "■■■■ Completed i18n tests ${RUNCONF}"
misc misctest:
	@${RUN} ${FDX} misctest.scm ${RUNCONF} FOO=quux "CONFVAR=88;XCONF=baz"
	@${header} "■■■■ Completed misc tests ${RUNCONF}"
gctests:
	@${RUN} ${FDX} gctests.scm ${RUNCONF}
	@${header} "■■■■ Completed GC tests ${RUNCONF}"
profiling profiletest:
	@${RUN} ${FDX} profiletest.scm ${RUNCONF}
	@${header} "■■■■ Completed GC tests ${RUNCONF}"
xml xmltest:
	@${RUN} ${FDX} xmltest.scm ${RUNCONF}
	@${header} "■■■■ Completed xml tests ${RUNCONF}"
crypto cryptotest:
	@${RUN} ${FDX} cryptotest.scm ${RUNCONF}
	@${header} "■■■■ Completed crypto tests ${RUNCONF}"

temptest:
	@${RUN} ${FDX} temptest.scm ${RUNCONF}
	@${header} "■■■■ Completed misc tests ${RUNCONF}"

# Table tests

tabletest:
	@${RUN} ${FDX} tabletest.scm ${TESTFILE} ${TESTSIZE} ${RUNCONF} && \
	 ${RUN} ${FDX} tabletest.scm ${TESTFILE} ${RUNCONF} && \
	 rm ${TESTFILE}

slotmaptests slotmaps:
	@make TESTFILE=${TESTBASE}.slotmap tabletest

tabletests hashtables:
	@make TESTFILE=${TESTBASE}.hashtable tabletest

.PHONY: slotmaptests slotmaps tabletests tables

# Base storage tests

storagebase:
	@${header} "■■■■■■■■ Running pool tests ${TESTBASE} ${RUNCONF}"
	${RUN} ${FDX} storage.scm

storage: storagebase pooltest indextest frametest

# Pool tests

pooltest:
	@${header} "■■■■■■■■ Running pool tests ${TESTBASE} ${RUNCONF}"
	@rm -rf ${TESTBASE}.pool ${TESTBASE}.adjunct.pool
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool ${RUNCONF}
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool CACHELEVEL=1 ${RUNCONF}
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool CACHELEVEL=2 ${RUNCONF}
	${RUN} ${FDX} pooltest.scm ${TESTSIZE} ${TESTBASE}.pool CACHELEVEL=3 ${RUNCONF}

filepooltest:
	@make TESTBASE=filepool RUNCONF="${FILEPOOL} ${RUNCONF}" pooltest

oidpooltest:
	@make TESTBASE=oidpool RUNCONF="${OIDPOOL} ${RUNCONF}" pooltest
oidpool32test:
	@make TESTBASE=oidpool32 RUNCONF="${OIDPOOL} ${OFFB32} ${RUNCONF}" pooltest
oidpool64test:
	@make TESTBASE=oidpool64 RUNCONF="${OIDPOOL} ${OFFB64} ${RUNCONF}" pooltest

bigpooltest:
	@make TESTBASE=bigpool RUNCONF="${BIGPOOL} ${RUNCONF}" pooltest
bigpool32test:
	@make TESTBASE=bigpool32 RUNCONF="${BIGPOOL} ${OFFB32} ${RUNCONF}" pooltest
bigpool64test:
	@make TESTBASE=bigpool64 RUNCONF="${BIGPOOL} ${OFFB64} ${RUNCONF}" pooltest
bigpoolsnappytest:
	@make TESTBASE=bigpoolsnappy RUNCONF="${BIGPOOL} ${SNAPPY} ${RUNCONF}" pooltest
bigpoolzlibtest:
	@make TESTBASE=bigpoolzlib RUNCONF="${BIGPOOL} ${ZPOOL} ${RUNCONF}" pooltest
bigpoolzstdtest:
	@make TESTBASE=bigpoolzlib RUNCONF="${BIGPOOL} ${ZSTDPOOL} ${RUNCONF}" pooltest
# This doesn't do any slotcoding to check those code paths
bigpooltest_nx:
	@make TESTBASE=bigpool_nx RUNCONF="SLOTCODES=#f ${BIGPOOL} ${RUNCONF}" pooltest

lvldbpools lvldbpooltests:
	@make TESTBASE=lvldbpool RUNCONF="SLOTCODES=#f POOLTYPE=leveldb POOLMOD=leveldb ${RUNCONF}" pooltest
rckdbpools rckdbpooltests:
	@make TESTBASE=rckdbpool RUNCONF="SLOTCODES=#f POOLTYPE=rocksdb POOLMOD=rocksdb ${RUNCONF}" pooltest

bigpools bigpooltests: bigpooltest bigpool32test bigpool64test bigpooltest_nx bigpoolsnappytest bigpoolzlibtest
oidpools oidpooltests: oidpooltest oidpool32test oidpool64test

flexpools flexpooltests:
	@${header} "■■■■■■■■ Running flexpool tests, ${TESTBASE} ${TESTSIZE} ${RUNCONF}";
	@${RUN} ${FDX} flextest.scm flex${TESTBASE}.flexpool RESET=yes ${RUNCONF};
	@${RUN} ${FDX} flextest.scm flex${TESTBASE}.flexpool ${RUNCONF};

pooltests pools: filepooltest bigpooltests flexpooltests

.PHONY: pooltests pool

# Index tests

indextest:
	@${header} "■■■■■■■■ Running index tests ${TESTBASE} ${RUNCONF}"
	@rm -rf *.edit.dtype ${TESTBASE}
	@${header} Build with the offsets cache off
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF}             && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=3  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CONSINDEX=yes  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF}
	@${header} "■■■■■■■■ Finished index tests ${TESTBASE} ${RUNCONF}"

fileindextest:
	@${header} "■■■■■■■■ Running file index tests ${TESTBASE} ${RUNCONF}"
	@rm -rf *.edit.dtype ${TESTBASE}
	@${header} Build with the offsets cache off
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF}             && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=3  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CONSINDEX=yes  ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	rm ${TESTBASE}
	@${header} Build with the offsets cache on
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} && \
	rm ${TESTBASE}
	@${header} Build and edit with the offsets cache on
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=2 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} CACHELEVEL=2 && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} CACHELEVEL=2 && \
	rm ${TESTBASE}
	@${header} Build and edit with the offsets cache and memorymapping on
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} CACHELEVEL=3 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} CACHELEVEL=3 ${RUNCONF} && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} CACHELEVEL=3 && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype ${RUNCONF} CACHELEVEL=3 && \
	rm ${TESTBASE}
	@${header} Build with both cache and consindices
	@${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTSIZE} \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype \
		${RUNCONF} CACHELEVEL=2 CONSINDEX=yes && \
	${RUN} ${FDX} tabletest.scm ${TESTBASE} ${TESTBASE}.edit.dtype \
		${RUNCONF} && \
	rm -rf ${TESTBASE} *.edit.dtype
	@${header} "■■■■■■■■ Finished file index tests ${TESTBASE} ${RUNCONF}"

fileindexes fileindex:
	@make TESTBASE=tmpfile.index RUNCONF="INDEXTYPE=fileindex" fileindextest

memindexes memindex:
	@make TESTBASE=memfile.index RUNCONF="INDEXTYPE=memindex" indextest

typeindexes typeindex:
	@make TESTBASE=temp/typekeys.index RUNCONF="INDEXTYPE=typeindex INDEXMOD=storage/typeindex" indextest
lvldbindexes lvldbindex:
	@make TESTBASE=templvl.index RUNCONF="INDEXTYPE=leveldb INDEXMOD=leveldb" indextest
rckdbindexes rckdbindex:
	@make TESTBASE=temprck.index RUNCONF="INDEXTYPE=rocksdb INDEXMOD=rocksdb" indextest

hashindex32:
	@make TESTBASE=tmphash32.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B32" indextest
hashindex40:
	@make TESTBASE=tmphash40.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B40" indextest
hashindex64:
	@make TESTBASE=tmphash64.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B64" indextest
hashindex40x:
	@make TESTBASE=tmphash40x.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B40 SLOTCODES=yes OIDCODES=yes" indextest

aggindex:
	@make TESTBASE=aggindex.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B40 AGGINDEX=yes" indextest
aggindex_consed:
	@make TESTBASE=aggindex.index RUNCONF="INDEXTYPE=hashindex OFFTYPE=B40 CONSINDEX=yes AGGINDEX=yes" indextest
aggindexes: aggindex aggindex_consed


hashindexes hashindex: hashindex32 hashindex40 hashindex40x hashindex64

indextests indexes: fileindexes hashindexes memindexes

.PHONY: indexes indextests fileindexes hashindexes memindexes aggindexes

# Database/frames test

frametest:
	@${header} "■■■■■■■■ Running frame/database tests, ${TESTBASE} ${TESTSIZE} ${RUNCONF}";
	rm -rf ${TESTBASE}db.pool ${TESTBASE}db.index
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db init \
		COUNT=${TESTSIZE} ${FRAMETEST_FILES} \
		${RUNCONF};
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db COUNT=${TESTSIZE} ${RUNCONF};
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=2;
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=3;
	@${header} "■■■■■■■■ Testing database creation with CACHELEVEL=2";
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db init COUNT=${TESTSIZE} 	\
		${FRAMETEST_FILES} ${RUNCONF} CACHELEVEL=2;
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=2;
	@${RUN} ${FDX} frametest.scm ${TESTBASE}db COUNT=${TESTSIZE} \
		 ${RUNCONF} CACHELEVEL=3;
	@${header} "■■■■■■■■ Finished frame/database tests, ${TESTBASE} ${TESTSIZE} ${RUNCONF} ■■■■■■■■■■■■■■■■";

frametest_base:
	@make TESTBASE=testdb RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40}" frametest
frametest_aggregate:
	@make TESTBASE=agg RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40} AGGINDEX=yes" frametest
frametest_slotindex:
	@make TESTBASE=slotindex RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40} SEPINDEX=FILENAME" frametest
frametest_bigpool32:
	@make TESTBASE=tmpbigpool32 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB32}" frametest
frametest_bigpool40:
	@make TESTBASE=tmpbigpool40 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB40}" frametest
frametest_bigpool64:
	@make TESTBASE=tmpbigpool64 RUNCONF="${BIGPOOL} ${HASHINDEX} ${OFFB64}" frametest
frametest_fileindex:
	@make TESTBASE=tmpfileindex RUNCONF="${BIGPOOL} ${FILEINDEX} ${OFFB40}" frametest
frametest_memindex:
	@make TESTBASE=tmpmemindex RUNCONF="${BIGPOOL} ${MEMINDEX} ${OFFB40}" frametest
frametest_oidpool32:
	@make TESTBASE=tmpoidpool32 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB32}" frametest
frametest_oidpool40:
	@make TESTBASE=tmpoidpool40 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB40}" frametest
frametest_oidpool64:
	@make TESTBASE=tmpoidpool64 RUNCONF="${OIDPOOL} ${HASHINDEX} ${OFFB64}" frametest

lvldbframes lvldbframetest:
	@make TESTBASE=lvldb RUNCONF="POOLTYPE=leveldb INDEXTYPE=leveldb INDEXMOD=leveldb POOLMOD=leveldb" frametest
rckdbframes rckdbframetest:
	@make TESTBASE=rckdb RUNCONF="POOLTYPE=rocksdb INDEXTYPE=rocksdb INDEXMOD=rocksdb POOLMOD=rocksdb" frametest

frametests dbtest dbtests db: frametest_base \
	frametest_bigpool32 frametest_bigpool40 frametest_bigpool64 \
	frametest_aggregate frametest_slotindex \
	frametest_fileindex frametest_memindex \

.PHONY: frametests frametest dbtest dbtests db

# Miscellanous module tests

randomtests:
	@${header} "■■■■■■■■ Running alltests with a really random seed"
	make RUNCONF="RANDOMSEED=TIME ${RUNCONF}" alltests
	@${header} "■■■■■■■■ Finished alltests with a really random seed"

.PHONY: randomtests xml xmltests crypto cryptotests

leveldbtests: lvldbframes lvldbpools lvldbindexes
rocksdbtests: rckdbframes rckdbpools rckdbindexes

# Scripting tests

scripts: chainscripts batchscripts atexit_tests utilscripts

execscripts:
	@${header} "■■■■■■■■ Running exec tests ■■■■■■■■"
	@@test_env@ ${FDX} ./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@${header} "■■■■■■■■ Running exec test as script ■■■■■■■■"
	@@test_env@ ./exectest.scm a "b b" c foobar=8 quux=1/2 4 1/3 9/3 5.9 :x
	@${header} "■■■■■■■■ Done with exec tests ■■■■■■■■"

chainscripts: execscripts
	@${header} "■■■■■■■■ Testing scripts which call CHAIN"
	@rm -f chaintest.log; touch chaintest.failed;
	@@test_env@ \
	        ${FDX} chaintest.scm > chaintest.log && \
		${FDX} chaintest.scm 0 30 > chaintest.log && \
		${FDX} chaintest.scm 10 50 > chaintest.log && \
		rm chaintest.failed;
	@if test -f chaintest.failed; then \
	  echo "FAILURE: chaintest.scm failed, log in chaintest.log"; fi
	@${header} "■■■■■■■■ Done testing scripts which call CHAIN"

fdbatch_normal:
	@${header} "■■■■■■■■ Testing fdbatch execution success and cleanliness"
	@rm -f _countup.log _countup.err _countup.done
	@rm -f  _countup.finished _countup.died _countup.pid batchscripts.log
	@@test_env@ ../dbg/fdbatch countup.scm "_countup.finished" 10 1 QUIET=yes LOGLEVEL=3;
	@sleep 3
	@if (test ! -f _countup.pid); then \
	   ./batchfail fdbatch _countup.pid NOT CREATED; fi;
	@sleep 12;
	@${header} This was written by fdbatch itself
	@if (test ! -f _countup.done); then \
	   ./batchfail fdbatch _countup.done MISSING; fi;
	@${header} This was written by the script
	@if (test ! -f _countup.finished); then \
           ./batchfail fdbatch _countup.finished MISSING; fi;
	@if (test ! -f _countup.err); then \
	    ./batchfail fdbatch _countup.err MISSING; fi;
	@if (test ! -f _countup.log); then \
	   ./batchfail fdbatch _countup.log MISSING; fi;
	@${header} These should have been deleted on successful exit
	@if (test -f _countup.died); then \
	   ./batchfail fdbatch _countup.died CREATED; fi;
	@if (test -f _countup.pid); then \
	   ./batchfail fdbatch _countup.pid STILL EXISTS; fi;
	@if test -f batchscripts.failed; then 	\
	  rm batchscripts.failed; 		\
	else echo "SUCCESS: batchscripts/normal test succeeded"; fi
	@${header} "■■■■■■■■ "Done with fdbatch success test""

fdbatch_error: fdbatch_normal
	@${header} "■■■■■■■■ "Starting fdbatch error test""
	@@test_env@ ../dbg/fdbatch countup.scm ERROR=yes "_countup.finished" 10 1 QUIET=yes LOGLEVEL=3;
	@sleep 12;
	@${header} This should have been deleted by the watch process
	@if (test -f _countup.pid); then \
	   ./batchfail fdbatch/errtest _countup.pid still exists; fi;
	@if (test -f _countup.done); then \
	   ./batchfail fdbatch/errtest _countup.done created; fi
	@${header} This should have been created at exit
	@if (test ! -f _countup.died); then 		\
	   ./batchfail fdbatch/errtest countup.died not created; fi
	@rm -f _countup.done _countup.finished _countup.died
	@if test -f batchscripts.failed; then 	\
	  rm batchscripts.failed; 		\
	else echo "SUCCESS: batchscripts/onerror test succeeded"; fi
	@${header} "■■■■■■■■ "Done with fdbatch error test""

fdbatch_signal: fdbatch_error
	@${header} "■■■■■■■■ "Starting fdbatch kill test""
	@@test_env@ ../dbg/fdbatch countup.scm "_countup.killed" 10 1 QUIET=yes LOGLEVEL=3;
	@sleep 3;
	@kill -9 `cat _countup.pid`; sleep 12
	@${header} This should have been deleted by the watch process
	@if (test -f _countup.pid); then \
	   ./batchfail fdbatch/killtest _countup.pid still exists; fi;
	@${header} This should have been deleted by the watch process
	@if (test -f _countup.done); then \
	   ./batchfail fdbatch/killtest _countup.done exists; fi;
	@${header} This should have been created at exit by the watch process
	@if (test ! -f _countup.died); then \
	   ./batchfail fdbatch/killtest _countup.died missing; fi;
	@if test -f batchscripts.failed; then 	\
	  rm batchscripts.failed; 		\
	else echo "SUCCESS: batchscripts/onkill test succeeded"; fi;
	@echo "RELAX: the 'Critical (Job terminated)' warning above was expected, so don't worry about it";
	@${header} "■■■■■■■■ "Done with fdbatch kill test""

batchscripts: fdbatch_signal

chained_batchscripts:
	@${header} "■■■■■■■■ Testing batch scripts which call CHAIN"
	@rm -f _chaintest.*
	@@test_env@ ../dbg/fdbatch chaintest.scm
	@${header} "■■■■■■■■ Done testing batch scripts which call CHAIN"

# ATEXIT tests

atexit_tests: atexit_kill atexit_quit atexit_term

atexit_normal:
	@rm -f ./_atexit*;
	@@test_env@ ${FDX} ./atexit.scm SLEEP4=3 QUIET=yes LOGLEVEL=4 ; \
	if test -f ./_atexit.oldout; then \
	  ./batchfail atexit.scm Earlier atexit handler called; \
	elif test ! -f ./_atexit.out; then \
	  ./batchfail atexit.scm ATEXIT handler not called; \
	elif test -f ./_atexit.pid; then \
	  ./batchfail atexit.scm ATEXIT handler not called; \
	else echo "Success: ATEXIT handlers working";\
	fi;
atexit_term: atexit_normal
	@rm -f ./_atexit_term.pid
	@@test_env@ ${FDX} ./atexit.scm PREFIX=_atexit_term SLEEP4=20 QUIET=yes LOGLEVEL=4 & \
	sleep 3; kill `cat ./_atexit_term.pid`; sleep 3; \
	if test -f ./_atexit_term.pid; then \
	  ./batchfail "ATEXIT handler not run on SIGTERM, .pid file still exists"; \
	else \
	  echo "Success: ATEXIT handlers run on SIGTERM"; \
	fi;
atexit_quit: atexit_normal
	@rm -f ./_atexit_quit.pid
	@@test_env@ ${FDX} ./atexit.scm PREFIX=_atexit_quit SLEEP4=20 QUIET=yes LOGLEVEL=4 &
	sleep 3 ; kill -s QUIT `cat ./_atexit_quit.pid` ; sleep 3 ; \
	if test -f ./_atexit_quit.pid; then \
	  echo "Success: ATEXIT handlers not run on SIGQUIT"; \
	else \
	  ./batchfail "ATEXIT handler run on SIGQUIT"; \
	fi;
atexit_kill: atexit_normal
	@rm -f ./_atexit_kill.pid
	@@test_env@ ${FDX} ./atexit.scm PREFIX=_atexit_kill SLEEP4=20 QUIET=yes LOGLEVEL=4 & \
	sleep 3 && kill -s KILL `cat ./_atexit_kill.pid` && sleep 3 && \
	if test -f ./_atexit_kill.pid; then \
	  echo "Success: ATEXIT handlers not run on SIGKILL"; \
	  rm -f ./_atexit_kill.pid; \
	else \
	  ./batchfail "ATEXIT handler run on SIGKILL"; \
	fi;

# Builtin script tests

utilscripts: repack-index split-index

repack-index:
	@${header} "■■■■■■■■ Testing repack index"
	@rm -f packed.index
	@${RUN} ${FDX} ${PACKINDEX} data/misc.index packed.index ${RUNCONF} TESTLOAD=common.scm;
	@${RUN} ${FDX} indexcompare.scm data/misc.index packed.index ${RUNCONF} TESTLOAD=common.scm;

split-index:
	@${header} "■■■■■■■■ Testing split index"
	@rm -f unique.index split.index
	@${RUN} ${FDX} ${PACKINDEX} data/misc.index split.index UNIQUE=unique.index TESTLOAD=common.scm ${RUNCONF};

.PHONY: chained_batchscripts batchscripts chainscripts execscripts atexit

# SMP tests

smp smptests: smp_hashtables smp_slotmaps smp_indexes smp_pools

smp_hashtables:
	make RUNCONF="NTHREADS=5" hashtables

smp_slotmaps:
	make RUNCONF="NTHREADS=5" slotmaps

smp_indexes:
	make RUNCONF="NTHREADS=5" indexes

smp_pools:
	make RUNCONF="NTHREADS=5" pools

# Memory integrity tests

heaptest memtest memtests: all_memtests

all_memtests: scheme_memtests \
	slotmap_memtests table_memtests \
	pool_memtests index_memtests db_memtests \
	crypto_memtests load_modules_memtest

scheme_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on scheme/scripting layer"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" scheme
	@${header} "■■■■■■■■ Finished heap integrity tests on scheme/scripting layer"

slotmap_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on tables"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" slotmaps
	@${header} "■■■■■■■■ Finished heap integrity tests tables"

table_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on tables"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" tables
	@${header} "■■■■■■■■ Finished heap integrity tests tables"

pool_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on pools"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" pools
	@${header} "■■■■■■■■ Finished heap integrity tests on pools"

index_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on indexes and index drivers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" indexes
	@${header} "■■■■■■■■ Finished heap integrity tests on indexes and index drivers"

frames_memtests db_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on database layers"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" db
	@${header} "■■■■■■■■ Finished heap integrity tests on database layers"

crypto_memtests:
	@${header} "■■■■■■■■ Running heap integrity tests on crypto functions"
	make TESTPROG="${VALGRINDHEAP}" crypto
	@${header} "■■■■■■■■ Finished heap integrity tests on crypto functions"

load_modules_memtest:
	@${header} "■■■■■■■■ Running heap integrity tests on builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" load_modules
	@${header} "■■■■■■■■ Finished heap integrity tests on builtin modules"

optimize_modules_memtest:
	@${header} "■■■■■■■■ Running heap integrity tests on optimized builtin modules"
	make TESTPROG="${MEMTESTER}" TEST_ENV="${MEMTEST_ENV}" RUNCONF="${MEMCONF}" \
	     TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@${header} "■■■■■■■■ Finished heap integrity tests on optimized builtin modules"

.PHONY: memtest memtest
.PHONY:	all_memtests scheme_memtests table_memtests
.PHONY:	pool_memtests index_memtests db_memtests
.PHONY:	crypto_memtests load_modules_memtest
.PHONY:	optimize_modules_memtest

# Leaktests

heaptests heaptest heap leak leaks leaktest leaktests: all_leaktests

all_leaktests: scheme_leaktests \
	slotmap_leaktests table_leaktests \
	pool_leaktests index_leaktests db_leaktests \
	crypto_leaktest load_modules_leaktest

scheme_leaktests:
	@${header} "■■■■■■■■ Running leak tests on scheme/scripting layer"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" scheme
	@${header} "■■■■■■■■ Finished leak tests on scheme/scripting layer"

slotmap_leaktests:
	@${header} "■■■■■■■■ Running leak tests on slotmaps"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" slotmaps
	@${header} "■■■■■■■■ Finished leak tests tables"

table_leaktests:
	@${header} "■■■■■■■■ Running leak tests on hashtables"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" tables
	@${header} "■■■■■■■■ Finished leak tests tables"

pool_leaktests:
	@${header} "■■■■■■■■ Running leak tests on pools"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" pools
	@${header} "■■■■■■■■ Finished leak tests on pools"

index_leaktests:
	@${header} "■■■■■■■■ Running leak tests on indexes and index drivers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" indexes
	@${header} "■■■■■■■■ Finished leak tests on indexes and index drivers"

fileindex_leaktests:
	@${header} "■■■■■■■■ Running leak tests on indexes and index drivers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" fileindexes
	@${header} "■■■■■■■■ Finished leak tests on indexes and index drivers"

hashindex_leaktests:
	@${header} "■■■■■■■■ Running leak tests on indexes and index drivers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" hashindexes
	@${header} "■■■■■■■■ Finished leak tests on indexes and index drivers"

frames_leaktest db_leaktests:
	@${header} "■■■■■■■■ Running leak tests on database layers"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" db
	@${header} "■■■■■■■■ Finished leak tests on database layers"

crypto_leaktest:
	@${header} "■■■■■■■■ Running leak tests on crypto functions"
	make TESTPROG="${VALGRINDHEAP}" crypto
	@${header} "■■■■■■■■ Finished leak tests on crypto functions"

load_modules_leaktest:
	@${header} "■■■■■■■■ Running leak tests on builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" load_modules
	@${header} "■■■■■■■■ Finished leak tests on builtin modules"

optimize_modules_leaktest:
	@${header} "■■■■■■■■ Running leak tests on optimized builtin modules"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" optimize_modules
	@${header} "■■■■■■■■ Finished leak tests on optimized builtin modules"

optscheme_leaktest:
	@${header} "■■■■■■■■ Leak checking the optimized scheme tests"
	make TESTPROG="${LEAKTESTER}" TEST_ENV="${LEAKTEST_ENV}" \
			RUNCONF="${LEAKCONF}" TESTSIZE="${SMALLTESTSIZE}" \
		optscheme
	@${header} "■■■■■■■■ Finished leak checking for optimized scheme tests"


.PHONY: leaktest leaktest
.PHONY:	all_leaktest scheme_leaktest table_leaktests
.PHONY:	pool_leaktests index_leaktests db_leaktests
.PHONY:	crypto_leaktest load_modules_leaktest
.PHONY:	optimize_modules_leaktest

