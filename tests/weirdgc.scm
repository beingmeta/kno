;;; -*- Mode: scheme; text-encoding: utf-8; -*-

(load-component "common.scm")

;;(optimization-leaks)

(define-amb-tester (dointersect x y (z))
  (if (bound? z)
      (intersection x y z)
      (intersection x y)))
(define-amb-tester (dounion x y (z))
  (if (bound? z)
      (union x y z)
      (union x y)))
(define-amb-tester (dodiff x y (z))
  (if (bound? z)
      (difference x y z)
      (difference x y)))
(define-amb-tester (doand x y (z))
  (if (bound? z)
      (and x y z)
      (and x y)))
(define-amb-tester (door x y (z))
  (if (bound? z)
      (or x y z)
      (or x y)))

(define-tester (random-choice n (numrange))
  (default! numrange (config 'fixmax (* n 8)))
  (when (and (config 'int_max) (> numrange (config 'int_max)))
    (set! numrange (config 'int_max)))
  (let ((answer {}))
    (dotimes (i n) (set+! answer (random numrange)))
    (while (< (choice-size answer) n)
      (dotimes (i (* 2 (- n (choice-size answer))))
	(set+! answer (random numrange))))
    (pick-n answer n)))

(define-tester (nrange start end)
  (let ((answer {}))
    (dotimes (i (- end start))
      (set+! answer (+ start i)))
    answer))

(define-tester (nrange-r start end)
  (if (= start end) {}
      (choice start (nrange-r (+ start 1) end))))

(define-tester (srange cstart cend)
  (let ((start (char->integer cstart)) (end (char->integer cend)))
    (let ((answer {}))
      (dotimes (i (- end start))
	(set+! answer (string (integer->char (+ start i)))))
      answer)))
;;(applytester (choice 0 1 2 3 4 10 11 12 13 14) union (nrange 0 5) (nrange 10 15))
;;(applytester {0 1 2 3 4 10 11 12 13 14} union (nrange 0 5) (nrange 10 15))
;;(applytester {0 1 2 3 4 10 11 12 13 14} union {0 1 2 3 4} (deep-copy (qc '{10 11 12 13 14})))
(applytester {0 1 2 3 4 10 11 12 13 14} union {0 1 2 3 4} '{10 11 12 13 14})

(test-finished "CHOICETEST")
