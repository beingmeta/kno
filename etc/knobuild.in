#!/bin/sh

usage (){
    echo "Usage: knobuild cmd args..., e.g.";
    echo "  debchangelog pkgname [distro] [status=stable] [version] < base_changelog";
    echo "  getbuildopt optname [default]";
    echo "  help cmd";
}

if [ $# -lt 2 ]; then
    usage;
    exit;
fi

getbuildopt_usage() {
    echo "getbuildopt optname [default]";
    echo "Gets a build configuration option, trying (in order):";
    echo "  1. the file .optname in the current directory";
    echo "  2. the file .opts/optname in your (the user's) home directory";
    echo "  3. the file optname in the @buildopts_dir@ directory";
    echo "  4. any defined value for opt_optname in the environment";
    echo "  5. the default argument, if provided";
}

debchangelog_usage() {
    echo "debchangelog pkgname [distro] [status=stable] [version] < base_changelog";
    echo "  Creates a new debian changelog from an existing \"base\" changelog";
    echo "  If *version* is not provided, it is computed from either the";
    echo "   output of `git describe` (stripping off the initial *pkg_name*),"; 
    echo "   the environment variable USE_VERSION, the file ./etc/version, "; 
    echo "   or the combination of the major.minor KNO version and the file ";
    echo "   ./etc/release";
}

get_git_branch() {
    branch=$(git branch | \
		 grep "^ *[*-+0123456789][0123456789]*" | \
		 sed -e 's/^ *[*-+0123456789][0123456789]* *//')
    if [ -z $branch ]; then return 1; fi
    echo $branch;
    return 0;
}
get_git_version() {
    STRIP_PACKAGE=$1
    version=$(git describe | \
		  sed -e "s/-g[0123456789ABCDEFabcdef]*$//" | \
		  sed -e "s/^${STRIP_PACKAGE}-//")
    if [ -z $version ]; then return 1; fi
    echo $version;
    return 0;
}

debchangelog_head() {
    PKGNAME=${1:-kno};
    CODENAME=${2:-debian};
    BRANCH=$3;
    STATUS=${4:-stable};
    URGENCY=${5:-medium};
    DATE=`date -R`;
    gitid=$(git describe);
    version=$(get_git_version ${PKGNAME});
    if [ -z ${BRANCH} ] || [ ${BRANCH} = "current" ]; then
	BRANCH=$(get_git_branch);
    fi;
    if [ -z "${STATUS}" ] || 
	   [ ${STATUS} = "stable" ] || 
	   [ ${STATUS} = "default" ]; then
	STATUS=
    else
	STATUS="-${STATUS}";
    fi;
    if [ -z "${BRANCH}" ] || \
	   [ ${BRANCH} = "trunk" ] || \
	   [ ${BRANCH} = "master" ] || \
	   [ ${BRANCH} = "default" ]; then
	DBRANCH=
    else
	DBRANCH="-${BRANCH}";
    fi;
    echo ${PKGNAME} \(${version}-${CODENAME}${DBRANCH}\) ${CODENAME}${DBRANCH}${STATUS}\; urgency=${URGENCY}
    echo
    if [ -z ${DBRANCH} ]; then
	echo "  * ${gitid} point release of ${PKGNAME} for ${CODENAME} (${STATUS})"
    else
	echo "  * ${gitid} point release of ${PKGNAME} (branch ${BRANCH}) for ${CODENAME} (${STATUS})"
    fi;
    echo
    echo " -- Repository Manager <repoman@beingmeta.com>  ${DATE}"
    echo
}

getbuildopt() {
    optname=$1
    dflt=$2
    env_name="${optname}_buildopt"
    if [ -f ./.${optname} ]; then
	cat ./.${optname};
    elif [ -f ~/.opts/${optname} ]; then
	cat ~/.opts/${optname};
    elif [ -f @buildopts_dir@/${optname} ]; then
	cat ~/.opts/${optname};
    elif printenv ${env_name} 2>&1 > /dev/null; then
	printenv ${env_name};
    elif [ $# -gt 1 ]; then
	echo $dflt;
    else
	return 1;
    fi;
    return 0;
}

show_help() {
    if [ $# -lt 2 ]; then
	usage;
	exit;
    else case $2 in
	     getbuildopt)
		 getbuildopt_usage;;
	     debchangelog)
		 debchangelog_usage;;
	     help|usage)
		 echo "Just leave off the second help";;
	     default)
		 echo "Unknown command $2";
	 esac;
    fi;
}

cmd=$1; shift;
case $cmd in
    debchangelog)
	debchangelog_head $* && cat -
	;;
    getbuildopt)
	if [ $# -lt 1 ]; then
	    getbuildopt_usage;
	elif [ $# = 1 ]; then
	    if getbuildopt $1; then
		return 1;
	    else return 0;
	    fi;
	elif [ $# = 2 ]; then
	    if getbuildopt $1 $2; then
		return 1;
	    else return 0;
	    fi;
	else
	    getbuildopt_usage;
	fi;
	;;
    help|usage) 
	show_help $*;;
    *)
	usage;
	exit;
esac
