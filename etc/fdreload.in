#!/bin/sh
DEFAULT_RUNDIRS="@config_dir@/daemons @config_dir@/servlets"
RUNDIRS=""
while ((test $# -ne "0") && ((test -d $1) || (test -f $1)));
   do RUNDIRS="${RUNDIRS} $1"; shift; 
done
XARGS=$*
READLINK=`which readlink`
if ${READLINK} -e /tmp 2>&1 > /dev/null; then 
    READLINK="${READLINK} -e";
fi;
if test -z "${RUNDIRS}"; then RUNDIRS=${DEFAULT_RUNDIRS}; fi

checkpid ( ) {
    if kill -0 $0 2>&1 > /dev/null; then
	retval=1
    else
	retval=0;
    fi;}
killpid ( ) {
    pid=$1
    count=${2:-1}
    sleep=${3:-1}
    live=1
    while test ${live} -eq 1 && test ${count} -gt 0; do
	live=`kill -0 ${pid} 2>&1 > /dev/null`;
	if test ${live} -eq 1; then sleep ${sleep}; fi
	count=$((${count}-1));
    done;
    retval=${live};}
livepid ( ) {
    pid=$1
    count=${2:-1}
    sleep=${3:-1}
    live=1
    while test ${live} -eq 1 && test ${count} -gt 0; do
	live=`kill -0 ${pid} 2>&1 > /dev/null`;
	if test ${live} -eq 1; then sleep ${sleep}; fi
	count=$((${count}-1));
    done;
    retval=${live};}
waitfile ( ) {
    filename=$1
    count=${2:-1}
    sleep=${3:-1}
    if test ! -f ${filename}; then
	exists=0
	while test ${exists} -eq 0 && test ${count} -gt 0; do
	    if test -f ${filename}; then exists=1; fi
	    if test ${exists} -eq 0; then sleep ${sleep}; fi
	    count=$((${count}-1));
	done;
    else exists=1;
    retval=${exists};}

for rundir in ${RUNDIRS}; do
    for ppidfile in ${rundir}/*.ppid; do
	if test -f ${ppidfile}; then
	    dirname=`dirname ${ppidfile}`;
	    basename=`basename ${ppidfile} .ppid`;
	    ppidnum=`cat ${ppidfile}`
	    pidfile="${dirname}/${basename}.pid";
	    sleep=1;
	    count=7;
	    if test -f ${pidfile}; then
		pidnum=`cat ${pidfile}`;
		kill -HUP ${ppidnum};
		if livepid ${pidnum} ${count} ${sleep}; then
		    echo "fdreload: forced kill (-9) of ${pidile} (${pidnum})";
		    kill -9 ${ppidnum}; rm -f ${pidfile}; fi;

	    else kill -HUP ${ppidnum}; fi
	    if waitfile ${pidfile} ${count} ${sleep}; then
		echo "fdreload: Gave up waiting for ${pidile} to exist"; fi;
	fi;
    done;
done;
