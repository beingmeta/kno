set env UNDERGDB=yes
set env FD_FOREGROUND=yes
set env FD_IGNORELEFTOVERS=yes
set env FD_STEALSOCKETS=yes
set env DUMA_ALIGNMENT=4
#set env PPROF_PATH=/usr/bin/pprof
set print elements 64
define dtype
  printf "%s\n",fd_dtype2string($arg0)
end
define showtypename
  printf "object type is 0x%x: %s\n",_fd_ptr_type($arg0),fd_type_names[_fd_ptr_type($arg0)]
end
define showtype
  print (((($arg0)&0x03)==2)?(fd_fixnum_type):((($arg0)&0x3)==3)?(fd_oid_type):((($arg0)&0x3)==0)?((enum FD_PTR_TYPE)(((((struct FD_CONS *)($arg0))->consbits)&0x7F)+0x84)):((enum FD_PTR_TYPE)(((($arg0)>>25)&0x7f)+0x04)))
end
define refcount
  if (($arg0)&3)
  print "not a cons" 
  else
  printf "object refcount=%d\n",((((struct FD_CONS *)$arg0)->consbits)>>7)
  print ((struct FD_CONS *)($arg0))
  end
end
define watchcons
  watch ((struct FD_CONS *)($arg0))->consbits
end
define xrefcount
  printf "cons refcount=%d\n",((((struct FD_CONS *)$arg0)->consbits)>>7)
end
define showstruct 
  print *((struct $arg1 *)($arg0))
end
define showcons
  print ((struct FD_CONS *)($arg0))
end
define showfield
  print ((struct $arg1 *)($arg0))->$arg2
end
define showstring
  set print elements 0
  print ((struct FD_STRING *)($arg0))->bytes
  set print elements 16
end
define showsymbol
  printf "%s\n",((struct FD_STRING *)(fd_symbol_names[((($arg0)>>2)&0x7FFFFF)]))->bytes
end
define showoid
  print/x (fd_base_oids[(($arg0>>2)&0x3FF)]+($arg0>>12))
end
define showcar
  print/x (((struct FD_PAIR *)$arg0)->car)
  showtype $
end
define showcdr
  print/x (((struct FD_PAIR *)$arg0)->cdr)
  showtype $
end
define showvelt
   print/x ((((struct FD_VECTOR *)$arg0)->data)[$arg1])
   showtype $
end
define showcelt
  print/x ((&((struct FD_CHOICE *)$arg0)->elt0)[$arg1])
  showtype $  
end
define oidinfo
  printf "oidinfo: %s\n", (_fd_oid_info($arg0))
end
define showchoice
  printf "data=%d\n",(&(((struct FD_CHOICE *)$arg0)->elt0))
  printf "size=%d\n",((((struct FD_CHOICE *)$arg0)->size)&(0x7FFFFFFF))
  print (*((struct FD_CHOICE *)$arg0))
end
define showvec
  printf "data=%d\n",(&(((struct FD_VECTOR *)$arg0)->data))
  printf "size=%d\n",(((struct FD_VECTOR *)$arg0)->length)
  print (*((struct FD_VECTOR *)$arg0))
end
define showschemap
  printf "schema=%d\n",(&(((struct FD_SCHEMAP *)$arg0)->schema))
  printf "values=%d\n",(&(((struct FD_SCHEMAP *)$arg0)->values))
  printf "size=%d\n",(((struct FD_SCHEMAP *)$arg0)->size)
  print (*((struct FD_SCHEMAP *)$arg0))
end
define showschemapk
  print (((struct FD_SCHEMAP *)$arg0)->schema)[$arg1]
  showtype $
end
define showschemapv
  print (((struct FD_SCHEMAP *)$arg0)->values)[$arg1]
  showtype $
end
define showslotmap
  printf "keyvals=%d\n",(&(((struct FD_SLOTMAP *)$arg0)->keyvals))
  printf "size=%d\n",((((struct FD_SLOTMAP *)$arg0)->size)&0x3FFFFFFF)
  print (*((struct FD_SLOTMAP *)$arg0))
end
define showslotmapk
  print ((((fd_slotmap)($arg0))->keyvals)[($arg1)].key)
  showtype $
end
define showslotmapv
  print ((((fd_slotmap)$arg0)->keyvals)[($arg1)].value)
  showtype $
end
define findelt
  print _fd_find_elt($arg0,$arg1,$arg2)
  showtype $
end
define inchoicep
  print _fd_find_elt($arg0,&(((struct FD_CHOICE *)$arg1)->elt0),((((struct FD_CHOICE *)$arg1)->size)&(0x7FFFFFFF)))
  showtype $
end

set breakpoint pending on
#set disable-randomization off
set overload-resolution off

break u8_new_exception
break _fd_debug
break _u8_dbg
break u8_raise
break __msan_warning
break __msan_warning_noreturn
break __asan_report_error
#break abort
#break exit

# For LIBC
set env MALLOC_CHECK_=2
# For OS X
#set env MallocHelp=1 
set env MallocGuardEdges=1
set env MallocScribble=1
set env MallocBadFreeAbort=1
set env MallocCheckHeapAbort=1
set env MallocCorruptionAbort=1

define osx_check_heap
  set env MallocCheckHeapStart=0
  set env MallocCheckHeapEach=$arg0
  break malloc_error_break
end

# Init fdb print limits (init done through the config interface)
define set_fdmaxelts
  set env FD_DISPLAYMAXELTS=36
  set env FD_DISPLAYMAXCHARS=1024
end

define reset_fdmaxelts
  unset env FD_DISPLAYMAXELTS
  unset env FD_DISPLAYMAXCHARS
end

define trace_server
  set env FD_U8LOGLISTEN=yes
  set env FD_U8LOGCONNECT=yes
  set env FD_U8LOGTRANSACT=yes
  set env FD_LOGTRANSFER=yes
  set env FD_LOGLEVEL=8
end

define debug_tempsrv
  set args tempsrv.fdz
end

define trace_tempsrv
  set args tempsrv.fdz
  set env FD_U8LOGLISTEN=yes
  set env FD_U8LOGCONNECT=yes
  set env FD_U8LOGTRANSACT=yes
  set env FD_U8LOGTRANSFER=yes
  set env FD_LOGLEVEL=8
end

define sbooksweb
    set args /var/run/fdserv/$arg0.sock CONFIG=/src/sbooks/config/site.cfg PRELOAD=/src/sbooks/preload.scm TRACEWEB=yes
end

define sbooksdaemon
    set args /src/sbooks/daemons/$arg0.fdz CONFIG=/src/sbooks/config/site.cfg
end

define staticweb
    set args /var/run/fdserv/static.sock
end

# Init some tracing configurations
set env FD_TRACEWEB=yes
