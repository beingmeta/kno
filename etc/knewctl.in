#!@SCRIPT_SHELL@

ACTIVITY=${KNOCTL_ACTIVITY}
COMMAND=${KNOCTL_COMMAND}

show_usage( ) {
    echo "Usage: knoctl activity command [name] args...";
    echo "Usage: knoctl command activity [name] args...";
#    echo "Usage: knoctl name command args... (NYI)";
    echo "Usage: knoctl fixdirs";
    echo "  activity=servlet|daemon";
}
usage_err( ) {
    if [ $# -gt 0 ]; then echo $*; fi;
    show_usage;
    exit;
}

if  [ $# = 0 ]; then
    show_usage;
    exit;
fi;
case $1 in
	help|usage)
	    show_usage;
	    exit;
	    ;;
	fixdirs)
	    kno_fixdirs;
	    exit;
esac;
while [ $# -gt 0 ]; do
    case $1 in
	servlet|knocgi|web)
	    if [ -z "${ACTIVITY}" ]; then
		ACTIVITY=servlet; shift;
	    else
		usage_err "Redundant activity $1 (v.s. ${ACTIVITY}";
	    fi;
	    ;;
	daemon|server|knoserver)
	    if [ -z "${ACTIVITY}" ]; then
		ACTIVITY=daemon; shift;
	    else
		usage_err "Redundant activity $1 (v.s. ${ACTIVITY}";
	    fi;
	    ;;
	start|stop|status|restart|disable|enable|pid|ppid|status|link|enable|disable)
	    if [ -z "${COMMAND}" ]; then
		COMMAND=$1; shift;
	    else
		usage_err "Redundant command $1 (vs. ${COMMAND})";
	    fi;
	    ;;
	*)
	    break;
	    ;;
    esac;
done;

export LAUNCHER=${KNOCTL_LAUNCHER}
export CONFDIR=${KNOCTL_CONFDIR}
export RUNDIR=${KNOCTL_RUNDIR}
export LOGDIR=${KNOCTL_LOGDIR}


if [ -z "${ACTIVITY}" ]; then
    usage_err "No activity provided";
elif [ ${ACTIVITY} = "servlet" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=@config_dir@/servlets; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=@kno_rundir@/servlets; fi;
    if [ -z "${LOGDIR}" ]; then LOGDIR=@kno_logdir@/servlets; fi;
    if [ -z "${LAUNCHER}" ]; then LAUNCHER=@prefix@/bin/knocgi; fi;
elif [ ${ACTIVITY} = "daemon" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=@config_dir@/daemons; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=@kno_rundir@/daemons; fi;
    if [ -z "${LOGDIR}" ]; then LOGDIR=@kno_logdir@/daemons; fi;
    if [ -z "${LAUNCHER}" ]; then LAUNCHER=@prefix@/bin/knoserver; fi;
else
    if [ -z "${KNOCTL_ACTIVITY}" ]; then
	usage_err "(Internal error) Bad activity specified ${ACTIVITY}";
    else usage_err "Bad activity specified ${ACTIVITY} (from KNOCTL_ACTIVITY)";
    fi;
fi;

msg ( ) {
    echo $(date +%T\(%a%d%b%Y\));
}
errmsg ( ) {
    echo $(date +%T\(%a%d%b%Y\)) >2;
}

READLINK=$(which readlink);
if [ -z "${READLINK}" ]; then
    READLINK=echo;
elif ${READLINK} -e /tmp 2>&1 > /dev/null; then 
    READLINK="${READLINK} -e";
fi;

get_abspath ( ) {
    arg=$1
    if [ -z "$1" ]; then 
	pwd;
    else case $1 in
	     /*)
		 echo $1;
		 ;;
	     *)
		 echo $(pwd)/$1;
		 ;;
	 esac;
    fi;
}

DEFAULT_U8RUN=@u8run@
if [ -z "${DEFAULT_U8RUN}" ] || [ ! -x "${DEFAULT_U8RUN}" ]; then
    DEFAULT_U8RUN=$(which u8run 2> /dev/null);
fi;
U8RUN=${U8RUN:-${DEFAULT_U8RUN}}
U8RUN_FLAGS=${U8_RUNFLAGS:-${KNCTL_U8RUN_FLAGS}}

find_ctl_file ( ) {
    local srvname=$1;
    if [ -f ${srvname} ]; then
	echo ${srvname};
    elif [ -f ${CONFDIR}/${srvname} ]; then
	echo ${CONFDIR}/${srvname};
    elif [ -f ${CONFDIR}/${srvname}.cfg ]; then
	echo ${CONFDIR}/${srvname}.cfg;
    elif [ -f ${CONFDIR}/${srvname}.sock ]; then
	echo ${CONFDIR}/${srvname}.sock;
    fi;
}
get_run_file ( ) {
    local srvname=$1
    local suffix=$2
    if [ -f ${RUNDIR}/${srvname}.${suffix} ]; then
	echo ${RUNDIR}/${srvname}.${suffix};
    else
	echo;
    fi;
}
get_run_data ( ) {
    local run_file=$(get_run_file $*)
    if [ -z "${run_file}" ]; then
	echo;
    else cat ${run_file};
    fi;
}

# Checks to see if a PID is live
checkpid ( ) {
    local arg=$1;
    if [ -z "${arg}" ]; then
	retval=0;
    elif [ -f /proc/${arg} ]; then
	retval=1;
    elif ps -p ${arg} 2>&1 > /dev/null; then
	retval=1;
    else
	retval=0;
    fi;}

# Gets a pid file and checks that the PID is live
# If it isn't, it remove the PID file
# Returns the contents of the valid PID file
get_pid_file ( ) {
    local srvname=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${srvname}.${suffix};
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    echo ${pid_file};
	else
	    rm ${pid_file};
	    echo -n;
	fi;
    fi;
}    
get_pid ( ) {
    local srvname=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${srvname}.${suffix};
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    echo ${pid};
	else
	    rm -f ${pid_file};
	    echo -n;
	fi;
    fi;
}
kill_pid ( ) {
    local pid=$1
    local secs=${2:-8}
    local wait=0.25
    local elapsed=0
    while checkpid ${pid}; do
	${SUDO} kill ${pid};
	sleep ${wait};
	elapsed=$(expr ${elapsed} \+ ${wait})
	wait=$(expr ${wait} \* 2)
    done;
    if checkpid ${pid}; then
	echo "Failed to normally terminate ${ACTIVITY} ${pid}, forcing termination";
	${SUDO} kill -9 ${pid};
    fi;
}

activity_status ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then errmsg "No configured ${ACTIVITY} named ${srvname}"; fi;
    local ppid=$(get_pid ${srvname} ppid)
    local pid=$(get_pid ${srvname} pid)
    if [ ! -z "${ppid}" ] && [ ! -z "${pid}" ]; then echo "active";
    elif [ ! -z "${pid}" ]; then echo "orphan";
    elif [ ! -z "${ppid}" ]; then echo "childless";
    else echo "inactive";
    fi;
}    

start_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    echo "Starting ${srvname} using ${ctl_file}";
    if [ -z "${ctl_file}" ]; then errmsg "No configured ${ACTIVITY} named ${srvname}"; fi;
    local status=$(activity_status ${srvname})
    if [ ${status} = "active" ]; then
	local ppid=$(get_pid ${srvname} pid)
	local pid=$(get_pid ${srvname} pid)
	echo "${ACTIVITY} ${srvname} already running with PPID=${pid}, pid=${PID}";
    elif [ ${status} = "inactive" ]; then
	shift;
	echo ${U8RUN} +daemon ${srvname} ${U8RUN_FLAGS} ${LAUNCHER} ${srvname} \
	         CONFIG=${ctl_file} RUNDIR=${RUNDIR} \
		 LOGFILE=${LOGDIR}/${srvname}.log \
		 $*;
	${U8RUN} +daemon ${srvname} ${U8RUN_FLAGS} ${LAUNCHER} ${srvname} \
	         CONFIG=${ctl_file} RUNDIR=${RUNDIR} \
		 LOGFILE=${LOGDIR}/${srvname}.log \
		 $*;
    else echo "${ACTIVITY} ${srvname} in ${status} status; try restart?";
    fi;
}

restart_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then errmsg "No ${ACTIVITY} named ${srvname}"; fi;
    local ppid_file=$(get_pid_file ppid)
    local pid_file=$(get_pid_file ${srvname} pid)
    local ppid;
    local pid;
    if [ ! -z ${ppid_file} ]; then ppid=$(cat ${ppid_file}); fi;
    if [ ! -z ${pid_file} ]; then pid=$(cat ${pid_file}); fi;
    if [ ! -z "${pid}" ] && [ ! -z "${ppid}" ]; then
	kill_pid ${pid};
	wait_for_pid_file ${pid_file} ${pid};
    fi;
    if [ -z ${pid} ]; then
	echo -n;
    elif ! checkpid ${pid}; then
	pid=;
	rm ${pid_file};
    fi;
   if [ ! -z "${ppid_file}" ] && [ ! -z "${pid_file}" ]; then
	kill_pid ${pid};
    fi;
    if [ -z "${kill_pid}" ]; then
	echo "${ACTIVITY} ${srvname} is not active (no PPID/PID file)";
    else
	echo "Terminating process ${kill_pid} for ${ACTIVITY} ${srvname}";
    fi
    ${SUDO} kill ${kill_pid}; sleep 1;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then
	echo "Failed to normally terminate ${ACTIVITY} ${srvname} (${kill_pid})";
	echo "Killing process ${kill_pid} for ${ACTIVITY} ${srvname}";
	${SUDO} kill ${kill_pid};
    fi;
}

stop_activity ( ) {
    local srvname=$1;
    local ctl_file=$(find_ctl_file ${srvname});
    if [ -z "${ctl_file}" ]; then
	echo "No known control file for ${ACTIVITY} ${srvname}";
	local kill_pid_file=$(get_pid_file ${srvname} pid)
	if [ -z "${kill_pid_file}" ]; then
	    echo "No PID file for ${ACTIVITY} ${srvname}";
	else
	    local kill_pid=$(cat ${kill_pid_file});
	    kill_pid ${kill_pid};
	fi;
    else
	local kill_ppid_file=$(get_pid_file ${srvname} ppid)
	local kill_pid=$(get_pid ${srvname} pid)
	if [ -z "${kill_ppid_file}" ]; then
	    echo "No PPID file for ${ACTIVITY} ${srvname}";
	else
	    local kill_ppid=$(cat ${kill_ppid_file});
	    kill_pid ${kill_ppid};
	fi;
	local cur_pid=$(get_pid ${srvname} pid)
	if [ ${cur_pid} = ${kill_pid} ]; then
	    if checkpid ${kill_pid}; then
		echo "Terminating orphan process (#${kill_pid}) for ${ACTIVITY} ${srvname}";
		kill_pid ${kill_pid};
		cur_pid=$(get_pid ${srvname} pid)
	    fi;
	fi;
	echo "${ACTIVITY} ${srvname} is not active (no PPID/PID file)";
    fi;
}

show_activity ( ) {
    local srvname=$1;
    local pid=$(get_run_data ${srvname} .pid);
    local ppid=$(get_run_data ${srvname} .ppid);
    local cmd=$(get_run_data ${srvname} .cmd);
    local status=$(get_run_data ${srvname} .status);
    local condition=$(activity_status ${srvname})
    echo "===========================================================================================";
    echo "${ACTIVITY} ${srvname} ${condition} ppid=${pid:-none} pid=${pid:-none} cmd=${cmd:-unknown}";
    if [ ! -z "${status}" ]; then echo "${ACTIVITY} ${srvname} ${status}"; fi;
}

echo ACTIVITY=${ACTIVITY}
echo COMMAND=${COMMAND}
echo CONFDIR=${CONFDIR}
echo RUNDIR=${RUNDIR}
echo LOGDIR=${LOGDIR}
echo ARG1=$1

case ${COMMAND} in 
    pid|ppid|cmd)
	echo $(get_run_data ${srvname} ${COMMAND});
	;;
    status)
	for spec in $*; do show_activity $d; done;
	;;
    start)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${CONFDIR}/*; do
		case ${file} in
		    *.disabled)
			;;
		    *)
			if [ ! -f ${file}.disabled ]; then
			    base_conf=$(basename ${file})
			    base_conf=$(basename ${file} .cfg)
			    start_activity ${base_conf};
			fi;
		esac;
	    done;
	else
	    for name in $*; do
		ctl_file=$(find_ctl_file ${srvname})
		if [ -z "$ctl_file" ]; then
		    errmsg "Couldn't find control file for ${srvname}";
		fi;
	    done;
	    for srvname in $*; do 
		start_activity ${srvname};
	    done;
	    exit;
	fi;
	;;
    stop)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${RUNDIR}/*; do
		base_name=$(basename ${file} .pid)
		stop_activity ${base_name};
	    done;
	else
	    for name in $*; do stop_activity ${srvname}; done;
	    exit;
	fi;
	;;
    restart)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${RUNDIR}/*; do
		base_name=$(basename ${file} .pid)
		restart_activity ${base_name};
	    done;
	else
	    for name in $*; do restart_activity ${srvname}; done;
	    exit;
	fi;
	;;
    link)
	if [ -z "$1" ]; then
	    usage_err "Missing argument to link";
	elif [ -f "$1" ]; then
	    srvname=$(basename $1 .cfg);
	    abspath=$(get_abspath $1);
	    ln -sf ${abspath} ${CONFDIR}/${srvname};
	    if [ "$2" != "enabled" ]; then
		touch ${CONFDIR}/${srvname}.disabled;
		msg "Initially disabled; knoctl enable ${ACTIVITY} ${srvname} to enable";
	    fi;
	else usage_err "The file $1 does not exist";
	fi;
	;;
    disable)
	touch ${CONFDIR}/$1.disabled;
	stop_activity $1;
	;;
    enable)
	rm -f ${CONFDIR}/$1.disabled;
	start_activity $1;
	;;
esac

# Local variables:
# mode: shell-script
# End:
