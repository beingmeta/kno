#!@SCRIPT_SHELL@

ACTIVITY=${KNOCTL_ACTIVITY}
COMMAND=${KNOCTL_COMMAND}
NAME=

show_usage( ) {
    echo "Usage: knoctl activity command [name] args...";
    echo "Usage: knoctl command activity [name] args...";
    echo "Usage: knoctl name command args... (NYI)";
    echo "Usage: knoctl fixdirs";
    echo "  activity=servlet|daemon";
}
usage_err( ) {
    if [ $# -gt 0 ]; then echo $*; fi;
    show_usage;
    exit;
}

if  [ $# = 0 ]; then
    show_usage;
    exit;
fi;
while [ $# -gt 0 ]; do
    case $1 in
	help|usage)
	    show_usage;
	    exit;
	    ;;
	servlet|knocgi|web)
	    if [ -z "${ACTIVITY}" ]; then
		ACTIVITY=servlet;
	    else
		usage_err "Redundant activity $1 (v.s. ${ACTIVITY}";
	    fi;
	    ;;
	daemon|server|knoserver)
	    if [ -z "${ACTIVITY}" ]; then
		ACTIVITY=daemon; shift;
	    else
		usage_err "Redundant activity $1 (v.s. ${ACTIVITY}";
	    fi;
	    ;;
	start|stop|status|restart|disable|enable|pid|ppid|status|cmd)
	    if [ -z "${COMMAND}" ]; then
		COMMAND=$1; shift;
	    else
		usage_err "Redundant command $1 (v.s. ${COMMAND}";
	    fi;
	    ;;
	fixdirs)
	    kno_fixdirs;
	    exit;
    esac;
done;

LAUNCHER=${KNOCTL_LAUNCHER}
CONFDIR=${KNOCTL_CONFDIR}
RUNDIR=${KNOCTL_RUNDIR}
LOGDIR=${KNOCTL_LOGDIR}

if [ -z "${ACTIVITY}" ]; then
    usage_err "No activity provided";
elif [ ${ACTIVITY} = "servlet" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=@config_dir@/servlets; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=@kno_rundir@/servlets; fi;
    if [ -z "${LOGDIR}" ]; then RUNDIR=@kno_logdir@/servlets; fi;
    if [ -z "${LAUNCHER}" ]; then RUNDIR=@exe_prefix@/knocgi; fi;
elif [ ${ACTIVITY} = "daemon" ]; then
    if [ -z "${CONFDIR}" ]; then CONFDIR=@config_dir@/daemons; fi;
    if [ -z "${RUNDIR}" ]; then RUNDIR=@kno_rundir@/daemons; fi;
    if [ -z "${LOGDIR}" ]; then RUNDIR=@kno_logdir@/daemons; fi;
    if [ -z "${LAUNCHER}" ]; then RUNDIR=@exe_prefix@/knoserver; fi;
else
    if [ -z "${KNOCTL_ACTIVITY}" ]; then
	usage_err "(Internal error) Bad activity specified ${ACTIVITY}";
    else usage_err "Bad activity specified ${ACTIVITY} (from KNOCTL_ACTIVITY)";
    fi;
fi;

msg ( ) {
    echo $(date +%T\(%a%d%b%Y\));
}
errmsg ( ) {
    echo $(date +%T\(%a%d%b%Y\)) >2;
}

READLINK=$(which readlink);
if [ -z "${READL	 INK}" ]; then
    READLINE=echo;
elif ${READLINK} -e /tmp 2>&1 > /dev/null; then 
    READLINK="${READLINK} -e";
fi;

DEFAULT_U8RUN=@u8run@
if [ -z "${DEFAULT_U8RUN}" ] || [ ! -x "${DEFAULT_U8RUN}" ]; then
    DEFAULT_U8RUN=$(which u8run 2> /dev/null);
fi;
U8RUN=${U8RUN:-${DEFAULT_U8RUN}}
U8RUN_FLAGS=${U8_RUNFLAGS:-${KNCTL_U8RUN_FLAGS}}

find_ctl_file ( ) {
    local name = $1;
    if [ -f ${name} ]; then
	echo ${name};
    elif [ -f ${CONFDIR}/${name} ]; then
	echo ${CONFDIR}/${name};
    elif [ -f ${CONFDIR}/${name}.cfg ]; then
	echo ${CONFDIR}/${name}.cfg;
    elif [ -f ${CONFDIR}/${name}.sock ]; then
	echo ${CONFDIR}/${name}.sock;
    elif [ ${ACTIVITY} = "servlet" ] && [ -f ${CONFDIR}/${name}/servlet.cfg ]; then
	echo ${CONFDIR}/${name}/servlet.cfg;
    elif  [ ${ACTIVITY} = "daemon" ] && [ -f ${CONFDIR}/${name}/daemon.cfg ]; then
	echo ${CONFDIR}/${name}/daemon.cfg;
    fi;
}
get_run_file ( ) {
    local name=$1
    local suffix=$2
    if [ -f ${RUNDIR}/${name}.${suffix} ]; then
	echo ${RUNDIR}/${name}.${suffix};
    else
	echo;
    fi;
}
get_run_data ( ) {
    local run_file=$(get_run_file $*)
    if [ -z "${run_file}" ]; then
	echo;
    else cat ${run_file};
    fi;
}

# Checks to see if a PID is live
checkpid ( ) {
    if [ -z "$0" ]; then
	retval=0;
    elif [ test -f /proc/$0 ]; then
	retval=1;
    elif ps -p $0 2>&1 > /dev/null; then
	retval=1;
    else
	retval=0;
    fi;}

# Gets a pid file and checks that the PID is live
# If it isn't, it remove the PID file
# Returns the contents of the valid PID file
get_pid_file ( ) {
    local name=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${name}.${suffix};
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    echo ${pid_file};
	else
	    rm ${pid_file};
	    echo -n;
	fi;
    fi;
}    
get_pid ( ) {
    local name=$1
    local suffix=${2:-pid}
    local pid_file=${RUNDIR}/${name}.${suffix};
    if [ ! -f ${pid_file} ]; then
	echo -n;
    else
	local pid=$(cat ${pid_file});
	if checkpid ${pid}; then
	    cat ${pid};
	else
	    rm -f ${pid_file};
	    echo -n;
	fi;
    fi;
}
kill_pid ( ) {
    local pid=$1
    local secs=${2:-8}
    local wait=0.25
    local elapsed=0
    while checkpid ${pid}; do
	${SUDO} kill ${pid};
	sleep ${wait};
	elapsed=$(expr ${elapsed} \+ ${wait})
	wait=$(expr ${wait} \* 2)
    done;
    if checkpid ${pid}; then
	echo "Failed to normally terminate ${ACTIVITY} ${pid}, forcing termination";
	${SUDO} kill -9 ${pid};
    fi;
}

activity_status ( ) {
    local name=$1;
    local ctl_file=$(find_ctl_file ${name});
    if [ -z "${ctl_file}" ]; then err_msg "No configured ${ACTIVITY} named ${name}"; fi;
    local ppid=$(get_pid ${name} ppid)
    local pid=$(get_pid ${name} pid)
    if [ ! -z "${ppid}" ] && [ ! -z "${pid}" ]; then echo "active";
    elif [ ! -z "${pid}" ]; then echo "orphan";
    elif [ ! -z "${ppid}" ]; then echo "childless";
    else echo "inactive";
    fi;
}    

start_activity ( ) {
    local name=$1;
    local ctl_file=$(find_ctl_file ${name});
    if [ -z "${ctl_file}" ]; then err_msg "No configured ${ACTIVITY} named ${name}"; fi;
    local status=$(activity_status ${name})
    if [ ${status} = "active" ]; then
	local ppid=$(get_pid ${name} pid)
	local pid=$(get_pid ${name} pid)
	echo "${ACTIVITY} ${name} already running with PPID=${pid}, pid=${PID}";
    elif [ ${status} = "inactive" ]; then
	${U8RUN} +daemon ${name} ${U8RUN_FLAGS} ${LAUNCHER} ${ctl_file} \
		 RUNDIR=${RUNDIR} LOGFILE=${LOGDIR}/${name}.log \
		 $*;
    else echo "${ACTIVITY} ${name} in ${status} status; try restart?";
    fi;
}

restart_activity ( ) {
    local name=$1;
    local ctl_file=$(find_ctl_file ${name});
    if [ -z "${ctl_file}" ]; then err_msg "No ${ACTIVITY} named ${name}"; fi;
    local ppid_file=$(get_pid_file ppid)
    local pid_file=$(get_pid_file ${name} pid)
    local ppid;
    local pid;
    if [ ! -z ${ppid_file} ]; then ppid=$(cat ${ppid_file}); fi;
    if [ ! -z ${pid_file} ]; then pid=$(cat ${pid_file}); fi;
    if [ ! -z "${pid}" ] && [ ! -z "${ppid}" ]; then
	kill_pid ${pid};
	wait_for_pid_file ${pid_file} ${pid};
    else
    fi;
    if [ -z ${pid} ]; then
	echo -n;
    elif ! checkpid ${pid}; then
	pid=;
	rm ${pid_file};
    fi;
   if [ ! -z "${ppid_file}" ] && [ ! -z "${pid_file}" ]; then
	kill_pid ${pid};
   elif

	kill_pid=$(get_run_data ${name} pid);
	kill_pid_file=$(get_run_file ${name} ppid);
    fi;
    if [ -z "${kill_pid}" ]; then
	echo "${ACTIVITY} ${name} is not active (no PPID/PID file)";
    else
	echo "Terminating process ${kill_pid} for ${ACTIVITY} ${name}";
    fi
    ${SUDO} kill ${kill_pid}; sleep 1;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then ${SUDO} kill ${kill_pid}; sleep 2; fi;
    if [ -f ${kill_pid_file} ]; then
	echo "Failed to normally terminate ${ACTIVITY} ${name} (${kill_pid})";
	echo "Killing process ${kill_pid} for ${ACTIVITY} ${name}";
	${SUDO} kill ${kill_pid};
    fi;
}

stop_activity ( ) {
    local name=$1;
    local ctl_file=$(find_ctl_file ${name});
    if [ -z "${ctl_file}" ]; then
	echo "No known control file for ${ACTIVITY} ${name}";
	local kill_pid_file=$(get_pid_file ${name} pid)
	if [ -z "${kill_pid_file}" ]; then
	    echo "No PID file for ${ACTIVITY} ${name}";
	else
	    local kill_pid=$(cat ${kill_pid_file});
	    kill_pid ${kill_pid};
	fi;
    else
	local kill_ppid_file=$(get_pid_file ${name} ppid)
	local kill_pid=$(get_pid ${name} pid)
	if [ -z "${kill_ppid_file}" ]; then
	    echo "No PPID file for ${ACTIVITY} ${name}";
	else
	    local kill_ppid=$(cat ${kill_ppid_file});
	    kill_pid ${kill_ppid};
	fi;
	local cur_pid=$(get_pid ${name} pid)
	if [ ${cur_pid} = ${kill_pid} ]; then
	    if checkpid ${kill_pid}; then
		echo "Terminating orphan process (#${kill_pid}) for ${ACTIVITY} ${name}";
		kill_pid ${kill_pid};
		cur_pid=$(get_pid ${name} pid)
	    fi;
	fi;
	echo "${ACTIVITY} ${name} is not active (no PPID/PID file)";
    else
	echo "Terminating process ${kill_pid} for ${ACTIVITY} ${name}";
    fi;
}

show_activity ( ) {
    local name=$1;
    local pid=$(check_run_file ${name} .pid);
    local ppid=$(check_run_file ${name} .ppid);
    local cmd=$(check_run_file ${name} .cmd);
    local status=$(check_run_file ${name} .status);
    local condition=$(activity_status ${name})
    echo "${ACTIVITY} ${name} ${condition} ppid=${pid:-none} pid=${pid:-none} cmd=${cmd:-unknown}";
    if [ ! -z "${status}" ]; then echo "${ACTIVITY} ${name} ${status}"; fi;
}

case ${COMMAND} in 
    pid|ppid|cmd)
	echo $(get_run_data ${name} ${COMMAND});
	;;
    status)
	for spec in $*; do show_activity $d; done;
	;;
    start)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${CONFDIR}/*; do
		base_conf=$(basename ${file})
		base_conf=$(basename ${file} .sock)
		base_conf=$(basename ${file} .cfg)
		start_activity ${base_conf};
	    done;
	else
	    for name in $*; do
		ctl_file=$(find_ctl_file ${name})
		if [ -z "$ctl_file" ]; then
		    err_msg "Couldn't find control file for ${name}";
		fi;
	    done;
	    for name in $*; do start_activity ${name}; done;
	    exit;
	fi;
	;;
    stop)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${RUNDIR}/*; do
		base_name=$(basename ${file} .pid)
		stop_activity ${base_name};
	    done;
	else
	    for name in $*; do stop_activity ${name}; done;
	    exit;
	fi;
	;;
    restart)
	if [ "$1" = "all" ] || [ $# = 0 ]; then
	    for file in ${RUNDIR}/*; do
		base_name=$(basename ${file} .pid)
		restart_activity ${base_name};
	    done;
	else
	    for name in $*; do restart_activity ${name}; done;
	    exit;
	fi;
	;;
esac

# Local variables:
# mode: shell-script
# End:
