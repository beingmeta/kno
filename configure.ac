AC_PREREQ(2.50)
AC_INIT(include/framerd/dtype.h)
m4_include([etc/ax_pthread.m4])

AC_DEFUN([AC_CHECK_USER],[
AC_MSG_CHECKING([for user $1])
  found_user="none";
  for user in $2;		    
  do
  if grep ^$user: /etc/passwd > /dev/null; 
  then
	found_user=$user;
	break;
  fi;
  done;
  $1=$found_user;
  AC_MSG_RESULT($found_user)])

AC_DEFUN([AC_CHECK_GROUP],[
AC_MSG_CHECKING([for group $1])
  found_group="none";
  for group in $2;
  do if grep ^$group: /etc/group > /dev/null; 
  then
	found_group=$group;
	break;
  fi; done;
  $1=$found_group;
  AC_MSG_RESULT($found_group)])

# Override the default value for localstatedir
if (test "x$localstatedir" == "x\${prefix}/var"); then localstatedir="/var"; fi

threads_default="yes"
shared_default="yes"
shared_suffix="so"
tls_default="no"
global_ipeval_default="no"
enable_fdweb_default="no"
enable_texttools_default="no"
install_dir_opts="-d -m 0775"
install_file_opts="-m 0664"
install_exe_opts="-m 0775"
wwwinstall=""
admininstall=""
fdaemoninstall=""
libc_pthreads="no"
libc_dlopen="no"
curlo=""
curlconfig=""
curl_default="no"
exifo=""
doi18n="no"
exif_default="no"
dynamic_cflag="-rdynamic"
xstatic_exe_libs=""
xstatic_scheme_libs=""
xdynamic_scheme_libs=""
scheme_builtins_init="fd_init_fdscheme()"
definefileinfo=""
versionsh=""
suffix=""
daemon_identity_default="daemon"
DREENTRANT="-D_REENTRANT"
MKSTATIC="ld -r -o"
TESTLDFLAGS=
EXELDFLAGS=
SHARED_LIB_TARGET=shared-libs
VERSION=3.4
vshared_suffix=so.$VERSION
I18N=""
INSTALLI18N=""
WWWUSER="apache"
apache_modules_dir="/usr/lib/apache2/modules"
apache_conf_dir="/etc/apache2"
apache_modinfo="/etc/apache2"
A2EN="none"
standard_module_path=""
safe_module_path=""
site_module_path=""
safe_site_module_path=""
extra_module_path=""
safe_extra_module_path=""
module_load_path=""
safe_module_load_path=""
CMODULES=""
INSTALLCMODULES=""
TAGS="TAGS SCHEMETAGS"
default_config_dir="\$PREFIX/etc/framerd"
rundir="${localstatedir}/run"
logdir="${localstatedir}/log"
archflags=""
with_mysql_default="yes"
with_crypto_default="no"
use_dtblock_default="yes"
MYSQL_CFLAGS=
MYSQL_LDFLAGS=
DEFAULTISASYNC=0
USEDTBLOCK=0
MSG=echo

AC_PREFIX_DEFAULT(/usr)
AC_CONFIG_AUX_DIR(etc)
AC_CONFIG_HEADER(include/framerd/config.h)

AC_SUBST(install_dir_opts)
AC_SUBST(install_file_opts)
AC_SUBST(install_exe_opts)
AC_SUBST(shared_suffix)
AC_SUBST(vshared_suffix)
AC_SUBST(dynamic_cflag)
AC_SUBST(curlconfig)
AC_SUBST(curlo)
AC_SUBST(exifo)
AC_SUBST(suffix)
AC_SUBST(xstatic_exe_libs)
AC_SUBST(xstatic_scheme_libs)
AC_SUBST(xdynamic_scheme_libs)
AC_SUBST(scheme_builtins_init)
AC_SUBST(data_dir)
AC_SUBST(module_dir)
AC_SUBST(safe_module_dir)
AC_SUBST(standard_module_dir)
AC_SUBST(config_dir)
AC_SUBST(local_config)
AC_SUBST(shared_config)
AC_SUBST(apache_modules_dir)
AC_SUBST(apache_conf_dir)
AC_SUBST(apache_modinfo)
AC_SUBST(wwwinstall)
AC_SUBST(admin_group)
AC_SUBST(admininstall)
AC_SUBST(fdaemon)
AC_SUBST(fdaemoninstall)
AC_SUBST(webuser)
AC_SUBST(rundir)
AC_SUBST(logdir)
AC_SUBST(archflags)
AC_SUBST(versionsh)
AC_SUBST(definefileinfo)

AC_SUBST(TAGS)
AC_SUBST(DREENTRANT)
AC_SUBST(SHARED_LIB_TARGET)
AC_SUBST(SHARED_LIB)
AC_SUBST(SHARED_LIBV)
AC_SUBST(TESTLDFLAGS)
AC_SUBST(EXELDFLAGS)
AC_SUBST(VERSION)
AC_SUBST(PROFILING)
AC_SUBST(MKSTATIC)
AC_SUBST(I18N)
AC_SUBST(INSTALLI18N)
AC_SUBST(WWWUSER)
AC_SUBST(CMODULES)
AC_SUBST(INSTALLCMODULES)
AC_SUBST(MYSQL_CFLAGS)
AC_SUBST(MYSQL_LDFLAGS)
AC_SUBST(DEFAULTISASYNC)
AC_SUBST(USEDTBLOCK)
AC_SUBST(MSG)

AC_CANONICAL_HOST
AC_PROG_CC([cc gcc])
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROG(ECHO,echo,,/bin/echo)
AC_CHECK_PROG(VALGRIND,valgrind)
AC_CHECK_PROGS(APXS,apxs2 apxs /usr/sbin/apxs2 /usr/sbin/apxs /usr/sbin/apxs /usr/bin/apxs,apxs)
AC_CHECK_PROGS(buildrpm,"lsb-rpmbuild","rpmbuild","lsb-rpm","na")

if test $prefix = "usr"; then 
   default_config_dir="/etc/framerd";
else
   default_config_dir=$prefix/etc/framerd;
fi

AC_CHECK_GROUP(default_admin_group,framerd adm admin)
AC_CHECK_USER(default_fdaemon,fdaemon daemon nobody)
AC_CHECK_USER(default_daemon,xdaemon fdaemon daemon nobody)
AC_CHECK_USER(default_webuser,www apache httpd www-data _www)

AC_ARG_WITH(optinclude,--with-optinclude Use optional include directory,,with_optinclude="none")
if test $with_optinclude != "none"; then
  CPPFLAGS="$CPPFLAGS -I$with_optinclude"
  CFLAGS="$CFLAGS -I$with_optinclude"
fi

AC_ARG_WITH(optlib,--with-optlib Use optional library directory,,with_optlib="none")
if test $with_optlib != "none"; then
  LDFLAGS="$LDFLAGS -L$with_optlib"
fi

AC_ARG_WITH(optdir,--with-optdir Use optional header/lib,,with_optdir="/opt/local")
if test -d $with_optdir/include; then
  CPPFLAGS="$CPPFLAGS -I$with_optdir/include"
  CFLAGS="$CFLAGS -I$with_optdir/include"
fi
if test -d $with_optdir/lib; then
  LDFLAGS="$LDFLAGS -L$with_optdir/lib"
fi
if test -d $with_optdir/bin; then
  PATH="$PATH:$with_optdir/bin"
fi

AC_ARG_WITH(optlib,--with-optlib Use optional library directory,,with_optlib="none")
if test $with_optlib != "none"; then
  LDFLAGS="$LDFLAGS -L$with_optlib"
fi

dnl Specifies an admin group; files written by installation scripts will be
dnl owned by this group and the group will have full rwX access.
AC_ARG_WITH(admin_group,--with-admin-group Install files with admin group and group write permissions,,with_admin_group=$default_admin_group)
if test $with_admin_group != "none"; then
  install_dir_opts="-g $with_admin_group $install_dir_opts"
  install_file_opts="-g $with_admin_group $install_file_opts"
  install_exe_opts="-g $with_admin_group $install_exe_opts"
  admin_group=$with_admin_group
  admininstall="-g $with_admin_group"
else
  install_dir_opts="$install_dir_opts"
  install_file_opts="$install_file_opts"
  install_exe_opts="$install_exe_opts"
  admin_group=$default_admin_group
  admininstall=""
fi

dnl Specifies a daemon identity user/group for managed FramerD servers
AC_ARG_WITH(fdaemon,--with-fdaemon The identity for FramerD servers to run,,with_fdaemon=$default_fdaemon)
if test $with_fdaemon != "none"; then
   fdaemoninstall="-o $with_fdaemon"
   fdaemon=$with_fdaemon
else
   fdaemoninstall=""
   fdaemon=$default_fdaemon
fi

dnl Specifies the user which the Web server runs as
dnl This is used to set up the directories used by fdserv
AC_ARG_WITH(webuser,--with-webuser The user for the webserver,,with_webuser=$default_webuser)
if test x$with_webuser != "xnone"; then
   webuser=$with_webuser
   wwwinstall="-o $webuser"
else
   webuser=$default_webuser
   wwwinstall=""
fi

if test ! -z $APXS; then
  apache_conf_dir=`$APXS -q SYSCONFDIR`
  apache_modules_dir=`$APXS -q LIBEXECDIR`
  if test -d ${apache_conf_dir}/mods-available; then
    apache_modinfo=${apache_conf_dir}/mods-available;
  elif test -d ${apache_conf_dir}/mods_available; then
    apache_modinfo=${apache_conf_dir}/mods_available;
  elif test -d ${apache_conf_dir}.d; then
    apache_modinfo=${apache_conf_dir}.d;
  else apache_modinfo=$apache_conf_dir;
  fi;
else
  echo "Warning: No apache development environment, can't build mod_fdserv"
fi

dnl Allow overrides of APXS apacheinfo
AC_ARG_WITH(apacheinfo,--with-apacheinfo where Apache module info lives,,with_apacheinfo=$apache_modinfo)

AC_ARG_WITH(apachelib,--with-apachelib where Apache extensions live,,with_apachelib=$apache_modules_dir)

apache_modinfo=$with_apacheinfo
apache_modules_dir=$with_apachelib

dnl Specifies where server state files should live
AC_ARG_WITH(rundir,--with-rundir The default location for server state files,,with_rundir="$localstatedir/run")
rundir=$with_rundir

dnl Specifies where log files should live
AC_ARG_WITH(logdir,--with-logdir The default location for log files,,with_logdir="$localstatedir/log")
logdir=$with_logdir

AC_AIX

gcc_version=`gcc -dumpversion`

case $gcc_version in
  4*)
   CFLAGS="-Wno-pointer-sign -Wimplicit -fno-strict-aliasing $CFLAGS"
  ;;
esac

case $host_os in
  darwin*)
   MKSTATIC="libtool -static -o "
#   if test "x$CC" = "xgcc"; then LIBS="$LIBS -lgcc"; fi
   dynamic_cflag="-dynamic"
   shared_suffix="dylib"
   vshared_suffix=$VERSION.dylib
   APXS="apxs -Wc,'-arch x86_64' -Wl,'-arch x86_64'  -a"
   ifmacosx=""
   ;;
esac  

dnl For specifying default -arch flags for OSX
AC_ARG_WITH(arch,--with[out]-arch build with particular --arch flags,,with_arch="")
if test -z $with_arch; then
  archflags=""
elif test $with_arch = "all"; then
  archflags="-arch i386 -arch x86_64 -arch ppc -arch ppc64";
elif test $with_arch = "all86"; then
  archflags="-arch i386 -arch x86_64";
elif test $with_arch = "allppc"; then
  archflags="-arch ppc -arch ppc64";
else archflags=$with_arch
fi

AC_DEFINE(FD_WORDS_ARE_ALIGNED,1)
AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_C_INLINE
AC_C_BIGENDIAN
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(long,4)
AC_CHECK_SIZEOF(long long,8)
AC_CHECK_SIZEOF(void *,4)
AC_CHECK_SIZEOF(time_t,4)
AC_CHECK_TYPES(uchar)

AC_HEADER_STDC
AC_HEADER_STAT

AC_CHECK_PROGS(etags,etags,"na")

if test $etags = "na"; then
   TAGS=""
fi

AC_CHECK_HEADERS(resource.h sys/resource.h sys/types.h sys/wait.h sys/stat.h)

AC_CHECK_MEMBERS([struct rusage.ru_inblock, struct rusage.ru_nvcsw, struct rusage.ru_nivcsw],[],[],
	         [#include <sys/resource.h>])
AC_CHECK_MEMBERS([struct rusage.ru_majflt, struct rusage.ru_nswap],[],[],
	         [#include <sys/resource.h>])

dnl Various directory/path configuration options

AC_ARG_WITH(suffix,--with-suffix string,,with_suffix="")
suffix=$with_suffix

dnl Specify an additional library
AC_ARG_WITH(extlib,
[  --with-extlib[[=DIR]]       use additional lib dir],[
  if test "$withval" != "no" -a "$withval" != "yes"; then
    LDFLAGS="${LDFLAGS} -L$withval"
  fi
])

AC_ARG_WITH(data_dir,--with-data-dir location,,with_data_dir=$prefix/share/framerd)
AC_DEFINE_UNQUOTED(FD_DATA_DIR,"$with_data_dir")
data_dir=$with_data_dir

AC_ARG_WITH(config_dir,--with-config-dir location,,with_config_dir=$default_config_dir)
config_dir=$with_config_dir

AC_ARG_WITH(local_config,--with-local-config location,,with_local_config=$config_dir/config)
local_config=$with_local_config
AC_ARG_WITH(shared_config,--with-shared-config location,,with_shared_config=$data_dir/config)
shared_config=$with_shared_config

AC_DEFINE_UNQUOTED(FD_CONFIG_FILE_PATH,"$with_local_config/%:$with_shared_config/%")

AC_ARG_WITH(module_dir,--with-module-dir location,,with_module_dir=$with_data_dir/scheme_modules)
module_dir=$with_module_dir

AC_ARG_WITH(standard_module_dir,--with-standard-module-dir location,,with_standard_module_dir=$with_data_dir/standard_modules)
standard_module_dir=$with_standard_module_dir
safe_module_dir=$standard_module_dir/safe

standard_module_path=$standard_module_dir/%/module.scm:$with_standard_module_dir/%.scm
standard_safe_module_path=$with_standard_module_dir/safe/%/module.scm:$with_standard_module_dir/safe/%.scm

default_module_path=$module_dir/%/module.scm:$module_dir/%.scm:$standard_module_path
default_safe_module_path=$safe_module_dir/%/module.scm:$safe_module_dir/%.scm:$standard_safe_module_path

AC_ARG_WITH(module_path,--with-module-path location,,with_module_path=$default_module_path)
AC_ARG_WITH(safe_module_path,--with-safe-module-path location,,with_safe_module_path=$default_safe_module_path)

AC_DEFINE_UNQUOTED(FD_DEFAULT_LOADPATH,"$with_module_path")
AC_DEFINE_UNQUOTED(FD_DEFAULT_SAFE_LOADPATH,"$with_safe_module_path")
AC_DEFINE_UNQUOTED(FD_DLOAD_SUFFIX,"$shared_suffix")

AC_ARG_WITH(dload_path,--with-dload-path location,,with_dload_path=$with_data_dir/lib/%.$shared_suffix:$with_data_dir/lib/lib%.$shared_suffix:$prefix/lib/framerd/%.$shared_suffix:$prefix/lib/%.$shared_suffix:$prefix/lib/lib%.$shared_suffix:/lib/%.$shared_suffix:/lib/lib%.$shared_suffix:)
AC_DEFINE_UNQUOTED(FD_DEFAULT_DLOADPATH,"$with_dload_path")

AC_ARG_WITH(boot_config,--with-boot-config configstring,,with_boot_config="")
AC_DEFINE_UNQUOTED(FD_BOOT_CONFIG,"$with_boot_config")

if test $exec_prefix = "NONE"; then
  AC_DEFINE_UNQUOTED(FD_EXEC,"$prefix/bin/fdexec")
  AC_DEFINE_UNQUOTED(FD_DBSERVER,"$prefix/bin/fdbserver")
else
  AC_DEFINE_UNQUOTED(FD_EXEC,"$exec_prefix/bin/fdexec")
  AC_DEFINE_UNQUOTED(FD_DBSERVER,"$prefix/bin/fdbserver")
fi

AC_CHECK_FUNCS(sigprocmask)
AC_CHECK_FUNCS(sigsetmask)
AC_CHECK_FUNCS(strdup strndup)
AC_CHECK_FUNCS(flock)
AC_CHECK_FUNCS(chmod)
AC_CHECK_FUNCS(sleep)
AC_CHECK_FUNCS(nanosleep)
AC_CHECK_FUNCS(fseeko)
AC_CHECK_FUNCS(mmap)
AC_CHECK_FUNCS(ftime)
AC_CHECK_FUNCS(waitpid)
AC_CHECK_FUNCS(wait4)
AC_CHECK_FUNCS(gettext)

# This gets it in the library list
AC_CHECK_LIB(m,floor)
AC_CHECK_LIB(z,compress2)

# Ditto, though it's almost always there
AC_CHECK_FUNCS(dlopen,libc_dlopen="yes")
if test $libc_dlopen != "yes"; then
   AC_CHECK_LIB(dl,dlopen)
fi

dnl Build the shared libraries.  
AC_ARG_ENABLE(shared,--en[able]-shared Build with/without shared libraries,,enable_shared=$shared_default)
if test $enable_shared = "yes"; then
  CFLAGS="-fPIC $CFLAGS"
  SHARED_LIB_TARGET=shared-libs
else
  SHARED_LIB=
  SHARED_LIBV=
  SHARED_LIB_TARGET=
fi

dnl Build the shared libraries.  
AC_ARG_ENABLE(async,--en[able]-async Enable async I/O features)

if test "x$enable_async" = "xyes"; then
  DEFAULTISASYNC=1
  AC_DEFINE(FD_DEFAULT_ASYNC,1)
else
  DEFAULTISASYNC=0
  AC_DEFINE(FD_DEFAULT_ASYNC,0)
fi

dnl Build the shared libraries.  
AC_ARG_ENABLE(dtblock,--en[able]-dtblock DTBlock dtype for net I/O,,enable_dtblock=$use_dtblock_default)

if test "x$enable_dtblock" = "xyes"; then
  USEDTBLOCK=1
  AC_DEFINE(FD_USE_DTBLOCK,1)
else
  USEDTBLOCK=0
  AC_DEFINE(FD_USE_DTBLOCK,0)
fi

# Internationalization
AC_CHECK_HEADERS(libintl.h)
AC_CHECK_FUNCS(gettext,[doi18n="yes"])

dnl Whether to build message catalogs
AC_ARG_WITH(i18n,--with[out]-i18n built and install message catalogs,,with_i18n="no")
if test $with_i18n = "yes"; then
  AC_CHECK_FUNCS(gettext,[doi18n="yes"])
fi
if test $doi18n = "yes"; then
  I18N="i18n"
  INSTALLI18N="install-i18n"
fi

if test $doi18n = "yes"; then
  I18N="i18n"
  INSTALLI18N="install-i18n"
fi

AX_PTHREAD()
AX_PTHREAD(threads_default="yes",threads_default="no")

dnl If possible, compile for multi-threaded execution.  This both makes
dnl  the library threadsafe and enables Scheme primitives for spawning threads
dnl  and parallel execution
AC_ARG_ENABLE(threads,--en/disable-threads Enable multi-threading,,enable_threads=$threads_default)
if test $enable_threads = "yes"; then
   AC_CHECK_HEADERS(pthread.h)
   REENTRANT=-D_REENTRANT	
   LIBS="$PTHREAD_LIBS $LIBS"
   CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
   AC_DEFINE(FD_THREADS_ENABLED,1)
else
  AC_DEFINE(FD_THREADS_ENABLED,0)
fi

dnl Specify the prefetch window for memory-mapped databases; when
dnl  accessing a series of blocks, this indicates the number of blocks
dnl  to prefetch ahead.  This assumes that the built-in memory prefetching
dnl  extends to memory-mapped data on disk.
AC_ARG_ENABLE(mmap_prefetch,--en/disable-mmap-prefetch Enable prefetching on access to memory mapped databases,,enable_mmap_prefetch="no")
if test $enable_mmap_prefetch = "no"; then
  AC_DEFINE(FD_MMAP_PREFETCH_WINDOW,0)
elif test $enable_mmap_prefetch = "yes"; then
  AC_DEFINE(FD_MMAP_PREFETCH_WINDOW,2)
else
  AC_DEFINE_UNQUOTED(FD_MMAP_PREFETCH_WINDOW,$enable_mmap_prefetch)
fi

dnl Use the editline library from fdconsole
AC_ARG_WITH(editline,--with[out]-editline Use the editline with fdconsole,,with_editline="yes")
if test "x$with_editline" = "xyes"; then
  AC_CHECK_HEADERS(histedit.h)
  AC_CHECK_LIB(edit,el_init)
  AC_DEFINE(FD_WITH_EDITLINE,1)
else
  AC_DEFINE(FD_WITH_EDITLINE,0)
fi

dnl Use a different directory for libu8
AC_ARG_WITH(libu8,--with[out]-libu8 Use libu8 includes,,with_libu8="")
if test "$with_libu8" != ""; then
  CFLAGS="-I$with_libu8/include $CFLAGS"
  LDFLAGS="-L$with_libu8/lib $LDFLAGS"
  EXELDFLAGS="$EXELDFLAGS -L$with_libu8/lib"
fi

with_fastcgi="yes";
AC_ARG_WITH(fastcgi,--with[out]-fastcgi Use fastcgi,with_fastcgi=no,[AC_DEFINE(WITH_FASTCGI,1)])
if test "x$with_fastcgi" != "xno"; then
  AC_CHECK_HEADERS(fcgiapp.h)
  AC_CHECK_LIB(fcgi,FCGX_Init)
fi

AC_CHECK_HEADERS(sqlite3.h sql.h)

AC_CHECK_PROGS(mysql_config,mysql_config,"na")

if test $mysql_config != "na"; then
   with_mysql_default="auto"
fi


AC_ARG_WITH(mysql,--with[out]-mysql Use alternate mysql lib,,with_mysql=$with_mysql_default)

if test x$with_mysql = "xauto"; then
  MYSQL_CFLAGS=`mysql_config --cflags`
  MYSQL_LDFLAGS=`mysql_config --libs_r`
elif test x$with_mysql = "xyes"; then
  MYSQL_CFLAGS=\`mysql_config --cflags\`
  MYSQL_LDFLAGS=\`mysql_config --libs_r\`
elif test x$with_mysql != "xno"; then
  MYSQL_CFLAGS="-I$with_mysql/include"
  MYSQL_LDFLAGS="-I$with_mysql/lib"
  AC_CHECK_HEADER(mysql/mysql.h)
  AC_CHECK_LIB(libmysqlclient_r,my_init)
fi

if test x$with_mysql != "xno"; then
  CMODULES="lib/framerd/mysql.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-mysql ${INSTALLCMODULES}"
fi

AC_ARG_WITH(odbc,--with[out]-odbc Build odbc libraries,,with_odbc="yes")

if test "x$with_odbc" == "xyes"; then
AC_CHECK_HEADER(sql.h,have_sql_h="yes",have_sql_h="no")
if test "x$have_sql_h" = "xyes"; then
  AC_CHECK_LIB(iodbc,SQLNumResultCols)
  CMODULES="lib/framerd/odbc.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-odbc ${INSTALLCMODULES}"
fi
fi

if test "x$have_sql_h" = "xyes"; then
  AC_CHECK_LIB(odbc,SQLNumResultCols)
fi

AC_CHECK_HEADER(sqlite3.h,have_sqlite3_h="yes",have_sqlite3_h="no")
if test $have_sqlite3_h = "yes"; then
  AC_CHECK_LIB(sqlite3,sqlite3_open)
  AC_CHECK_FUNCS(sqlite3_open_v2)
  AC_CHECK_FUNCS(sqlite3_prepare_v2)
  AC_CHECK_FUNCS(sqlite3_errstr)
  CMODULES="lib/framerd/sqlite.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-sqlite ${INSTALLCMODULES}"
fi

AC_CHECK_HEADER(mysql/mysql.h,have_mysql_h="yes",have_mysql_h="no")


AC_CHECK_HEADER(png.h,have_png_h="yes",have_png_h="no")
AC_CHECK_HEADER(qrencode.h,have_qrencode_h="yes",have_qrencode_h="no")

if (test "x$have_png_h" = "xyes") && (test "x$have_qrencode_h" = "xyes"); then
  AC_CHECK_LIB(png,png_create_write_struct)
  AC_CHECK_LIB(qrencode,QRcode_encodeString8bit)
  CMODULES="lib/framerd/qrcode.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-qrcode ${INSTALLCMODULES}"
fi

AC_CHECK_HEADER(regex.h,have_regex_h="yes",have_regex_h="no")
if (test "x$have_regex_h" = "xyes"); then
  AC_CHECK_FUNC(regcomp,have_regcomp="yes",have_regcomp="no")
fi
if (test "x$have_regex_h" = "xyes") && (test "x$have_regcomp" = "xno"); then
  AC_CHECK_LIB(regex,regcomp,have_regcomp="yes",have_regcomp="no")
fi
if (test "x$have_regex_h" = "xyes") && (test "x$have_regcomp" = "xyes"); then
  CMODULES="lib/framerd/regex.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-regex ${INSTALLCMODULES}"
fi

AC_CHECK_HEADER(zlib.h,have_zlib_h="yes",have_zlib_h="no")
if (test "x$have_zlib_h" = "xyes"); then
  AC_CHECK_LIB(z,compress2,have_libz="yes",have_libz="no")
fi

if (test "x$have_libz" = "xyes"); then
  CMODULES="lib/framerd/zlib.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-zlib ${INSTALLCMODULES}"
fi

AC_ARG_WITH(ziptools,--with-ziptools Build and install ziptools,,with_ziptools="yes")

if test "x$with_ziptools" == "xyes"; then
AC_CHECK_HEADER(zip.h,have_zip_h="yes",have_zip_h="no")
if (test "x$have_zip_h" = "xyes"); then
  AC_CHECK_LIB(zip,zip_add)
  AC_CHECK_LIB(zip,zip_add,have_libzip="yes",have_libzip="no")
  AC_CHECK_FUNCS(zip_set_file_compression zip_set_file_comment zip_set_file_extra)
fi
if (test "x$have_zip_h" = "xyes") && (test "x$have_libzip" = "xyes"); then
  CMODULES="lib/framerd/ziptools.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-ziptools ${INSTALLCMODULES}"
fi
fi

AC_ARG_WITH(tidy,--with-tidy Build and install tidy library,,with_tidy="yes")

if test "x$with_tidy" == "xyes"; then
AC_CHECK_HEADER(tidy.h,have_tidy_h="yes",have_tidy_h="no")
if (test "x$have_tidy_h" = "xyes"); then
  AC_DEFINE(HAVE_TIDY_H,1)
fi
if (test "x$have_tidy_h" = "xno"); then
   AC_CHECK_HEADER(tidy/tidy.h,have_tidy_tidy_h="yes",have_tidy_tidy_h="no")
fi
if (test "x$have_tidy_tidy_h" = "xyes"); then
  AC_DEFINE(HAVE_TIDY_TIDY_H,1)
fi
if ((test "x$have_tidy_h" = "xyes")||(test "x$have_tidy_tidy_h" = "xyes")); then
  AC_CHECK_LIB(tidy,tidyCreate)
  AC_CHECK_LIB(tidy,tidyCreate,have_libtidy="yes",have_libtidy="no")
fi
if (test "x$have_libtidy" = "xyes"); then
  CMODULES="lib/framerd/tidy.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-tidy ${INSTALLCMODULES}"
fi
fi

AC_ARG_WITH(fileinfo,--with[out]-fileinfo record fileinfo,,with_fileinfo="yes")
if test "x$with_fileinfo" = "xyes" ; then
   definefileinfo="-D_FILEINFO=\"\\\"\`./fileinfo ./$< .\`\\\"\""
   versionsh="include/framerd/versions.h"
fi

dnl When available, use the thread-optimized tcmalloc functions from
dnl   Google perftools
AC_ARG_WITH(tcmalloc,--with[out]-tcmalloc Use the Google malloc library,,with_tcmalloc="no")
if test $with_tcmalloc = "yes"; then
  AC_CHECK_LIB(tcmalloc,malloc)
fi

# For OS X
AC_CHECK_HEADERS(CommonCrypto/CommonDigest.h CommonCrypto/CommonHMAC.h)
AC_CHECK_FUNCS(CCHmacInit)
# OpenSSL checks
AC_CHECK_HEADERS(openssl/hmac.h)
AC_CHECK_HEADERS(openssl/sha.h)
AC_CHECK_LIB(crypto,EVP_CIPHER_CTX_init)
AC_CHECK_FUNCS(SHA1_Init EVP_get_cipherbyname EVP_CIPHER_CTX_init)
# For UUID functions
AC_CHECK_LIB(uuid,uuid_generate_time)
AC_CHECK_FUNCS(uuid_generate_time)

dnl Compile for access to large files, essentially defining off_t as 64 bits.
dnl  Note that the basic FramerD/fdb data files are still limited to 4GB, but
dnl  this lets you use all 4GB.
AC_ARG_ENABLE(largefiles,--en/disable-largefiles Enable use of large (> 2GB) file support,,enable_largefiles=yes)
if test $enable_largefiles = "yes"; then
  AC_DEFINE(FD_LARGEFILES_ENABLED,1)
else
  AC_DEFINE(FD_LARGEFILES_ENABLED,0)
fi

AC_CHECK_LIB(u8,u8_raise)
AC_CHECK_LIB(u8io,u8_open_xinput)
AC_CHECK_LIB(u8fns,u8_mkdir)
AC_CHECK_LIB(u8data,u8_init_chardata_c)
dnl Check for cryptic in in libu8
AC_CHECK_FUNCS(u8_cryptic,with_crypto_default="yes")
AC_ARG_WITH(crypto,--with[out]-crypto Compile the crypto module,,with_crypto=$with_crypto_default)
if test $with_crypto = "yes"; then
  CMODULES="lib/framerd/crypto.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-crypto ${INSTALLCMODULES}"
fi

dnl This compiles a version to be used with the GNU profiling tools
AC_ARG_WITH(profiling,--with/out-profiling compile to generate profile information,,with_profiling="no")
if test $with_profiling = "yes"; then
  AC_DEFINE(FD_WITH_PROFILING,1)
  PROFILING="-O0 -pg -fno-inline -fprofile-arcs -ftest-coverage"
else 
  PROFILING=""
fi

dnl This compiles a version to be used with the GNU profiling tools
AC_ARG_WITH(profiler,--with/out-profiler build with optional perftools profiling,,with_profiler="no")
if test $with_profiler = "yes"; then
   AC_DEFINE(FD_WITH_PROFILER,1)
   AC_CHECK_HEADERS(google/profiler.h)
   LIBS="-lprofiler $LIBS"
fi


dnl This is used to disable the simplest automatic database prefetches.
dnl This is almost only used to configure for benchmarking prefetch mechanisms
dnl against the base case of no prefetches at all.
AC_ARG_ENABLE(prefetching,--en/disable-prefetching make frame operations prefetch when they can,,enable_prefetching="yes")
if test $enable_prefetching = "yes"; then
  AC_DEFINE(FD_PREFETCHING_ENABLED,1)
else
  AC_DEFINE(FD_PREFETCHING_ENABLED,0)
fi

dnl This builds in Scheme level profiling for the interpreter.  When not used,
dnl  the cost is negligible.
AC_ARG_ENABLE(calltrack,--en/disable-calltrack enable internal scheme profiling,,enable_calltrack="yes")
if test $enable_calltrack = "yes"; then
  AC_DEFINE(FD_CALLTRACK_ENABLED,1)
else
  AC_DEFINE(FD_CALLTRACK_ENABLED,0)
fi

dnl This builds in file config lookups
AC_ARG_ENABLE(fileconfig,--en/disable-fileconfig enable file-based configuration,,enable_fileconfig="yes")
if test $enable_calltrack = "yes"; then
  AC_DEFINE(FD_FILECONFIG_ENABLED,1)
else
  AC_DEFINE(FD_FILECONFIG_ENABLED,0)
fi

dnl This makes all executables have stdio-based schemeio builtin.  Disabling
dnl  this might make sense for handheld and some embedded contexts,  but
dnl  you'll probably need to replace some things
AC_ARG_ENABLE(schemeio,--en/disable-schemeio compiled-in schemeio,,enable_schemeio="yes")
if test $enable_schemeio = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_schemeio()"
  xdynamic_scheme_libs="$xdynamic_scheme_libs -lfdschemeio${suffix}"
  xstatic_exe_libs="lib/libfdschemeio${suffix}.a $xstatic_exe_libs"
  xstatic_scheme_libs="../../lib/libfdschemeio${suffix}.a $xstatic_scheme_libs"
fi

dnl This integrates the fdweb module into executables by default; otherwise
dnl  it is built and installed as a plugin library
AC_ARG_ENABLE(fdweb,--en/disable-fdweb compiled-in fdweb,,enable_fdweb=$enable_fdweb_default)
if test $enable_fdweb = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_fdweb()"
  xdynamic_scheme_libs="$xdynamic_scheme_libs -lfdweb${suffix}"
  xstatic_exe_libs="lib/libfdweb${suffix}.a $xstatic_exe_libs"
  xstatic_scheme_libs=" ../../lib/libfdweb${suffix}.a $xstatic_scheme_libs"
fi

dnl This integrates the texttools module into executables by default; otherwise
dnl  it is built and installed as a plugin library
AC_ARG_ENABLE(texttools,--en/disable-texttools compiled-in texttools,,enable_texttools=$enable_texttools_default)
if test $enable_texttools = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_texttools()"
  xdynamic_scheme_libs="-ltexttools $xdynamic_scheme_libs"
  xstatic_exe_libs="lib/libtexttools.a $xstatic_exe_libs"
  xstatic_scheme_libs=" ../../lib/libtexttools.a $xstatic_scheme_libs"
fi

dnl This integrates the fdweb module into executables by default; otherwise
dnl  it is built and installed as a plugin library
AC_ARG_ENABLE(htmldump,--en/disable-htmldump write HTML backtraces,,enable_htmldump="yes")
if test $enable_htmldump = "yes"; then
  scheme_builtins_init="$scheme_builtins_init; fd_init_fdweb()"
  xdynamic_scheme_libs="$xdynamic_scheme_libs -lfdweb${suffix}"
  xstatic_exe_libs="lib/libfdweb${suffix}.a $xstatic_exe_libs"
  xstatic_scheme_libs=" ../../lib/libfdweb${suffix}.a $xstatic_scheme_libs"
  AC_DEFINE(FD_HTMLDUMP_ENABLED,1)
fi

dnl ***********************************
dnl *** Checks for working __thread ***
dnl ***********************************
AC_MSG_CHECKING(for working __thread)
AC_TRY_COMPILE([
            #include <pthread.h>
            __thread int i;
	    static int res1, res2;
	],[
	     void thread_main (void *arg)
	     {
		i = arg;
		sleep (1);
		if (arg == 1) res1 = (i == arg);
		else res2 = (i == arg);
	     }

	     int main () {
		pthread_t t1, t2;
 		i = 5;
		pthread_create (&t1, NULL, thread_main, 1);
		pthread_create (&t2, NULL, thread_main, 2);

		pthread_join (t1, NULL);
		pthread_join (t2, NULL);
		return !(res1 + res2 == 2);
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_THREAD_STORAGE_CLASS)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working __builtin_expect ***
dnl ***********************************
AC_MSG_CHECKING(for working __builtin_expect)
AC_TRY_COMPILE([],[
	     int main (int argc,char *argv[]) {
                if (__builtin_expect((argc>2),1)) return 0;
                else return 1;
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BUILTIN_EXPECT)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working __builtin_prefetch ***
dnl ***********************************
AC_MSG_CHECKING(for working __builtin_prefetch)
AC_TRY_COMPILE([],[
	     static int data[]={0,1,2,3};

	     int main (int argc,char *argv[]) {
                __builtin_prefetch(&data[2],0,3);
		return 0;
		}
	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BUILTIN_PREFETCH)],
	       [AC_MSG_RESULT(no)])


dnl ***********************************
dnl *** Checks for working constructor attributes ***
dnl ***********************************
AC_MSG_CHECKING(for working __constructor_attributes)
AC_TRY_COMPILE([],[
             int tmpinit(void) __attribute__ ((constructor));

	    ], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CONSTRUCTOR_ATTRIBUTES)],
	       [AC_MSG_RESULT(no)])

dnl This forces the use of the threadlocal storage functions from the pthreads
dnl  library.  Otherwise, the executable will use __thread storage declarations
dnl  when available
AC_ARG_WITH(tls,--with[out]-tls Force use of threadlocal storage,,with_tls=$tls_default)
if test $with_tls = "yes"; then
  AC_DEFINE(FD_FORCE_TLS,1)
else
  AC_DEFINE(FD_FORCE_TLS,0)
fi

dnl This forces the use of a global lock for ipeval, which can reduce
dnl  parallellism  but may help track down subtle bugs
AC_ARG_WITH(global_ipeval,--with[out]-global-ipeval Use global lock and variables for ipeval,,with_global_ipeval=$global_ipeval_default)
if test $with_global_ipeval = "yes"; then
  AC_DEFINE(FD_GLOBAL_IPEVAL,1)
else
  AC_DEFINE(FD_GLOBAL_IPEVAL,0)
fi

dnl Build with primitives accessing libcurl, if it is available
AC_CHECK_LIB(curl,curl_easy_init,curl_default="yes")
AC_ARG_WITH(curl,--with[out]-curl Use libcurl in fdweb,,with_curl=$curl_default)
if test $with_curl = "yes"; then
  AC_CHECK_LIB(curl,curl_easy_init)
  AC_CHECK_HEADERS(curl/curl.h)
  AC_DEFINE(FD_WITH_CURL,1)
  curlo="src/fdweb/curl.o"
  curlconfig="\`curl-config --libs\`"
else
  AC_DEFINE(FD_WITH_CURL,0)
fi

dnl Build with primitives accessing libexif, if it is available
AC_CHECK_LIB(exif,exif_data_new_from_data,exif_default="yes")
AC_CHECK_HEADER(libexif/exif-data.h,exif_default=$exif_default,exif_default="no")
AC_ARG_WITH(exif,--with[out]-exif Use libexif in fdweb,,with_exif=$exif_default)
if test "x$with_exif" = "xyes"; then
  AC_CHECK_HEADERS(libexif/exif-data.h)
  CMODULES="lib/framerd/exif.$shared_suffix ${CMODULES}"
  INSTALLCMODULES="install-exif ${INSTALLCMODULES}"
fi

dnl Enables/disables linking with RPATH
AC_ARG_ENABLE(rpath,--en/disable-rpath usage)
if test "x$enable_rpath" != "xno" && test "$prefix" != "/usr" && test "$prefix" != "/usr/local"; then
  EXELDFLAGS="$EXELDFLAGS -Wl,-rpath,\$(LIBINSTALLDIR)"
fi

AC_DEFINE_UNQUOTED(FD_SCHEME_BUILTINS,$scheme_builtins_init)

AC_OUTPUT(makefile exe/.gdbinit
          tests/dtype/makefile tests/db/makefile tests/scheme/makefile
	  tests/dtype/.gdbinit tests/db/.gdbinit tests/scheme/.gdbinit
	  etc/fdsetconfig etc/fdgetconfig etc/fdconfig etc/framerd-rc.d
	  etc/OSXStartupItem/FramerD etc/logrotate
	  etc/fdserv.conf etc/fdserv.load
	  etc/install-script)

chmod a+x etc/fdsetconfig etc/fdgetconfig etc/framerd-rc.d etc/install-script
